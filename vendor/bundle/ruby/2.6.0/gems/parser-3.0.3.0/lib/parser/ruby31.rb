# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby31 < Parser::Base


  def version
    31
  end

  def default_encoding
    Encoding::UTF_8
  end

  def endless_method_name(name_t)
    if !%w[=== == != <= >=].include?(name_t[0]) && name_t[0].end_with?('=')
      diagnostic :error, :endless_setter, nil, name_t
    end
  end

  def try_declare_numparam(node)
    name = node.children[0]

    if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
      # definitely an implicit param
      location = node.loc.expression

      if max_numparam_stack.has_ordinary_params?
        diagnostic :error, :ordinary_param_defined, nil, [nil, location]
      end

      raw_context = context.stack.dup
      raw_max_numparam_stack = max_numparam_stack.stack.dup

      # ignore current block scope
      raw_context.pop
      raw_max_numparam_stack.pop

      raw_context.reverse_each do |outer_scope|
        if outer_scope == :block || outer_scope == :lambda
          outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

          if outer_scope_has_numparams
            diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
          else
            # for now it's ok, but an outer scope can also be a block
            # with numparams, so we need to continue
          end
        else
          # found an outer scope that can't have numparams
          # like def/class/etc
          break
        end
      end

      static_env.declare(name)
      max_numparam_stack.register(name[1].to_i)

      true
    else
      false
    end
  end
##### State transition tables begin ###

clist = [
'-606,681,-119,-121,1212,-123,230,-606,-606,-606,218,219,-606,-606,-606',
'1122,-606,236,-124,-118,-121,618,218,219,-606,-724,-606,-606,-606,659',
'680,-119,983,890,923,308,-606,-606,-120,-606,-606,-606,-606,-606,-122',
'618,-116,618,618,-117,-124,826,123,610,123,923,612,122,237,122,-121',
'237,-736,-116,-120,999,-606,-606,-606,-606,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,922,618,-606,-606,-606,119,-606,-606,-117,-119',
'-606,-118,-122,-606,-606,658,-606,1123,-606,303,-606,-503,-606,-606',
'237,-606,-606,-606,-606,-606,-318,-606,-112,-606,-114,-711,237,-318',
'-318,-318,-119,-712,307,-318,-318,-119,-318,-606,-109,-711,-606,-606',
'-606,-606,-318,-606,-124,-606,-121,123,-110,-124,-606,-121,122,-606',
'-318,-318,618,-318,-318,-318,-318,-318,-123,123,-120,-712,-108,-115',
'122,-120,-122,123,-116,123,123,-122,122,-116,122,122,-107,-111,998,132',
'-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318',
'218,219,-318,-318,-318,308,685,-318,308,123,-318,-113,988,-318,122,646',
'-117,215,-318,-118,-318,-117,-318,-318,-118,-318,-318,-318,-318,-318',
'230,-318,-715,-318,101,102,216,218,219,-715,-715,-715,101,102,-715,-715',
'-715,-318,-715,-724,-318,-318,217,-113,923,-318,-715,-715,-715,-715',
'-715,661,-318,220,1034,-122,237,-112,-715,-715,873,-715,-715,-715,-715',
'-715,123,948,949,648,647,122,-123,-111,-110,-109,-736,-123,308,646,230',
'230,307,297,237,307,1062,237,-715,-715,-715,-715,-715,-715,-715,-715',
'-715,-715,-715,-715,-715,-715,103,104,-715,-715,-715,646,919,-715,103',
'104,-715,-118,358,-715,-715,660,-715,-118,-715,123,-715,-112,-715,-715',
'122,-715,-715,-715,-715,-715,-620,-715,-715,-715,-736,-736,-711,-111',
'-110,-109,303,648,647,644,234,-621,918,-715,-102,-617,-715,-715,-715',
'-715,646,-715,-617,-715,799,-715,-88,-112,-715,307,-112,-120,-715,-715',
'-715,648,647,644,-715,-715,359,-715,-112,-111,-110,-109,-111,-110,-109',
'-715,-715,237,1062,890,917,-116,947,-115,-111,-110,-109,-715,-715,831',
'-715,-715,-715,-715,-715,-124,-117,-121,715,488,946,485,484,483,493',
'486,-617,646,520,631,648,647,651,958,496,646,716,-715,-715,-715,-715',
'-715,-715,-715,-715,-715,-715,-715,-715,-715,-715,598,234,-715,-715',
'-715,491,686,-715,-119,-620,-715,646,-611,-715,501,500,504,503,-715',
'-611,-715,497,-715,-715,646,-715,-715,-715,-715,-715,-318,-715,-715',
'-715,-724,428,-124,-318,-318,-318,648,647,649,-318,-318,-612,-318,-715',
'648,647,-715,-715,-612,-715,-318,-715,-107,-613,857,-123,-124,482,-715',
'468,-613,-120,-318,-318,-116,-318,-318,-318,-318,-318,237,648,647,-611',
'488,-318,485,484,483,493,486,859,-318,123,648,647,644,-712,122,496,-627',
'-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318',
'-318,-612,598,-318,-318,-318,491,685,-318,1147,1148,-318,646,-613,-318',
'501,500,504,503,-318,646,-318,497,-318,-318,646,-318,-318,-318,-318',
'-318,-318,-318,625,-318,-318,-621,123,-318,-318,-318,831,122,-318,-318',
'-318,224,-318,-318,-114,508,-318,-318,301,-318,-318,-318,-318,-318,-318',
'929,-123,482,-318,519,925,-122,-318,-318,926,-318,-318,-318,-318,-318',
'631,648,647,657,632,-618,224,521,-108,648,647,653,-618,301,648,647,662',
'504,503,873,-117,-618,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318',
'-318,-318,-318,-318,225,-619,-318,-318,-318,224,920,-318,-619,522,-318',
'631,590,-318,-318,958,-318,-619,-318,123,-318,588,-318,-318,122,-318',
'-318,-318,-318,-318,-109,-318,-609,-318,-618,225,890,236,625,-609,-609',
'-609,-118,556,-609,-609,-609,-318,-609,568,-318,-318,-318,-318,570,-318',
'-609,-318,-609,-609,-609,610,-318,572,612,-122,-619,132,-609,-609,225',
'-609,-609,-609,-609,-609,-87,-309,237,224,583,224,-606,-609,-309,584',
'600,-616,1162,-606,-609,218,219,-309,-616,518,591,1160,-609,-609,-609',
'-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,312,753,-609',
'-609,-609,224,-609,-609,983,890,-609,496,1186,-609,-609,237,-609,-615',
'-609,230,-609,636,-609,-609,-615,-609,-609,-609,-609,-609,-309,-609',
'225,-609,225,-606,-609,230,224,-614,-616,278,279,218,219,628,-614,-609',
'303,497,-609,-609,-609,-609,626,-609,595,-609,680,-715,601,1055,-609',
'681,87,-609,-715,-715,-715,261,225,237,-715,-715,224,-715,88,277,276',
'261,613,634,-615,-715,-715,610,89,614,612,572,636,111,110,112,113,-715',
'-715,625,-715,-715,-715,-715,-715,225,-614,-110,417,115,114,116,-112',
'258,629,630,638,260,259,-119,256,257,101,102,-121,663,355,-715,-715',
'-715,-715,-715,-715,-715,-715,-715,-715,-715,-715,-715,-715,225,666',
'-715,-715,-715,667,686,-715,-353,237,-715,425,1195,-715,224,-353,427',
'426,-715,-291,-715,1186,-715,-715,-353,-715,-715,-715,-715,-715,636',
'-715,-715,-715,669,99,87,90,91,670,92,94,93,95,753,674,237,-715,88,98',
'-715,-715,678,-111,496,-715,82,679,89,103,104,610,-715,303,609,-120',
'330,77,78,26,11,65,692,-353,693,71,72,237,695,225,75,-708,73,74,76,35',
'36,79,80,237,698,701,497,702,81,33,32,111,110,112,113,704,706,23,1055',
'717,718,261,720,10,53,332,12,115,114,116,105,64,107,106,108,723,109',
'117,118,224,101,102,49,50,48,224,673,-606,725,-319,731,732,223,258,-606',
'671,-319,260,259,-708,261,221,261,-606,45,-319,261,38,261,237,66,67',
'224,787,68,237,40,237,237,517,52,-102,-708,802,261,237,851,852,518,24',
'853,117,118,604,99,87,90,91,813,92,94,93,95,817,225,237,819,88,98,822',
'225,827,-606,828,-319,82,258,89,103,104,260,259,46,47,330,77,78,26,11',
'65,832,856,860,71,72,861,-292,225,75,-709,73,74,76,35,36,79,80,874,556',
'493,556,886,81,33,32,111,110,112,113,496,1157,23,485,484,483,890,486',
'10,53,332,12,115,114,116,105,64,107,106,108,911,109,117,118,-319,101',
'102,49,50,48,-318,-319,-609,504,503,912,237,-318,497,-609,-319,915,-712',
'237,-709,924,-318,941,-609,45,942,952,38,956,955,66,67,957,943,68,488',
'40,485,484,483,52,486,-709,126,127,128,129,130,493,24,960,962,297,968',
'99,87,90,91,496,92,94,93,95,954,-319,970,972,88,98,570,-318,572,-609',
'813,237,82,303,89,103,104,303,813,46,47,330,77,78,26,11,65,261,504,503',
'71,72,890,497,985,75,-715,73,74,76,35,36,79,80,126,127,128,129,130,81',
'33,32,111,110,112,113,986,488,23,485,484,483,237,486,10,53,332,12,115',
'114,116,105,64,107,106,108,237,109,117,118,996,101,102,49,50,48,237',
'488,-715,485,484,483,-293,486,708,-715,237,1007,1011,-291,-711,1015',
'237,712,-715,45,1018,1020,38,701,716,66,67,1023,1025,68,1157,40,485',
'484,483,52,486,-715,708,488,1025,485,484,483,24,486,237,712,773,99,87',
'90,91,237,92,94,93,95,237,1053,1056,923,88,98,970,1068,237,-715,813',
'1084,82,1086,89,103,104,1091,708,46,47,330,77,78,26,11,65,712,1092,1097',
'71,72,1098,1099,-294,75,1112,73,74,76,35,36,79,80,253,1113,1114,237',
'237,81,33,32,111,110,112,113,237,237,23,126,127,128,129,130,10,53,332',
'12,115,114,116,105,64,107,106,108,237,109,117,118,237,101,102,49,50',
'48,261,265,266,267,268,278,279,273,274,269,270,923,254,255,1121,237',
'271,272,1127,45,1128,252,334,1130,701,66,67,1133,1136,68,1138,40,258',
'1140,264,52,260,259,237,256,257,277,276,262,24,263,1142,1152,1163,99',
'87,90,91,1164,92,94,93,95,1025,1025,1025,1171,88,98,1184,275,1187,1192',
'1193,692,82,1113,89,103,104,1203,1203,46,47,330,77,78,26,11,65,701,1206',
'1208,71,72,1210,1212,1212,75,237,73,74,76,35,36,79,80,126,127,128,129',
'130,81,33,32,111,110,112,113,1025,1203,23,-712,-711,1229,1212,675,10',
'53,332,12,115,114,116,105,64,107,106,108,1212,109,117,118,1212,101,102',
'49,50,48,261,265,266,267,268,278,279,273,274,269,270,3,254,255,,,271',
'272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262',
'24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,-264,,,82,,89,103',
'104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80',
',,,,,81,33,32,111,110,112,113,,,23,,,,,916,10,53,332,12,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268',
'278,279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40',
'258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,',
',,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,',
'23,,,,,887,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255',
',,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277',
'276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89',
'103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79',
'80,,,,,,81,33,32,111,110,112,113,,,23,,,,,675,10,53,332,12,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268',
'278,279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40',
'258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,',
',,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,',
'23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,',
'271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276',
'262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103',
'104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80',
',,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278',
'279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258',
',264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,',
',,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271',
'272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262',
'24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104',
',,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,',
',81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279',
'273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264',
'52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72',
',,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,',
'10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49',
'50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271,272',
',45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24',
'263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,',
'46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273',
'274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52',
'260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,',
'88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,',
',75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10',
'53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271,272,,45',
',,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47',
'330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32',
'111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273,274,269',
'270,,254,255,,,271,272,,45,,,334,,,66,67,,,68,,40,258,,264,52,260,259',
',256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,237',
'275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73',
'74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332',
'12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261',
'265,266,267,268,278,279,273,274,269,270,,254,255,,,271,272,,45,,,38',
',,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330',
'77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,261,488,23,485,484,483,,486,10,53,332,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,261,,258,,,,260,259,708',
'256,257,,,,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,',
'256,257,,,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,488,,485',
'484,483,82,486,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75',
',73,74,76,35,36,79,80,708,,,,,81,33,32,111,110,112,113,,488,23,485,484',
'483,,486,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,261,265,266,267,268,278,279,273,708,269,270,,,,,,271,272',
',45,,,334,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262',
'24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,',
'46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273',
'274,269,270,,-737,-737,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264',
'52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,',
',75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10',
'53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,261,-737,-737,-737,-737,278,279,,,-737,-737,,,,,,271,272,,45,,,38',
',,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330',
'77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,261,265,266,267,268,278,279,,,269,270,,,,',
',271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277',
'276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103',
'104,,,46,47,7,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,',
',,,81,33,32,111,110,112,113,,,23,,,,,,10,53,9,12,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,261,-737,-737,-737,-737,278',
'279,,,-737,-737,,,,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260',
'259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
',,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,-737',
'-737,-737,-737,278,279,,,-737,-737,,,,,,271,272,,45,,,38,,,66,67,,,68',
',40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65',
',,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,',
',23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,261,-737,-737,-737,-737,278,279,,,-737,-737,,,,,,271,272',
',45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24',
'263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46',
'47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33',
'32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273,274',
'269,270,,-737,-737,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260',
'259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
',,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265',
'266,267,268,278,279,273,274,269,270,,-737,-737,,,271,272,,45,,,38,,',
'66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,7,77,78',
'26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110',
'112,113,,,23,,,,,,10,53,9,12,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,261,-737,-737,-737,-737,278,279,,,-737,-737,,',
',,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277',
'276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103',
'104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80',
',,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278',
'279,273,274,269,270,,-737,-737,,,271,272,,45,,,38,,,66,67,,,68,,40,258',
',264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,-737,-737',
'-737,-737,278,279,,,-737,-737,,,,,,271,272,,242,,,250,,,66,67,,,68,',
',258,,264,52,260,259,,256,257,277,276,262,247,263,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,',
',115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,',
',,,,,,,,,,,,,,271,272,,242,,,250,,,66,67,,,68,,,258,,264,52,260,259',
',256,257,,,262,247,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,261,,,,,,,,,,,,,,,,271,272,,242,',
',250,,,66,67,,,68,,,258,,264,52,260,259,,256,257,,,,247,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
'261,,,,,,,,,,,,,,,,271,272,,242,,,250,,,66,67,,,68,,,258,,264,52,260',
'259,,256,257,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82',
',89,103,104,-433,,46,47,,,,-433,-433,-433,,,-433,-433,-433,261,-433',
',,,,,,,-433,-433,-433,-433,,,,271,272,,,,-433,-433,,-433,-433,-433,-433',
'-433,,,,258,,,,260,259,,256,257,,,,,,,,,,,-433,-433,-433,-433,-433,-433',
'-433,-433,-433,-433,-433,-433,-433,-433,,,-433,-433,-433,,,-433,,303',
'-433,,,-433,-433,,-433,,-433,,-433,,-433,-433,,-433,-433,-433,-433,-433',
',-433,-433,-433,,,,,,,,,,,,,,-433,,,-433,-433,,-433,,-433,77,78,26,',
'65,,-433,,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103',
'104,-325,,46,47,,,,-325,-325,-325,,,-325,-325,-325,,-325,,,,,,,,-325',
',-325,-325,,,,,,,,,-325,-325,,-325,-325,-325,-325,-325,,,,,,,,,,,,,',
',,,,,,,,,-325,-325,-325,-325,-325,-325,-325,-325,-325,-325,-325,-325',
'-325,-325,,,-325,-325,-325,,,-325,,312,-325,,,-325,-325,,-325,,-325',
',-325,,-325,-325,,-325,-325,-325,-325,-325,,-325,,-325,,,,,,,,,,,,,',
'-325,,,-325,-325,,-325,,-325,77,78,26,,65,,-325,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74',
'76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,',
',,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75',
',73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,',
',115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,',
',,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247',
',,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113',
',,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98',
',,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80',
',,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,796,,,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74',
'76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,',
',,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75',
',73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,',
'53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,',
',,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,',
',,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,237,,,77,78,26,82,65,89,103,104,71,72',
'46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,',
',,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72',
'46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49',
'50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325',
',,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89',
'103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103',
'104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,',
',81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38',
',,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88',
'98,,,,,,417,82,,89,103,104,,,46,47,77,78,26,,65,,,,71,72,,,,75,,73,74',
'76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,',
',,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75',
',73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,',
'53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,319,,52,,,325,,,,,,247',
',,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,796,,319',
',52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,,,,82',
',89,103,104,-274,,46,47,,,,-274,-274,-274,,,-274,-274,-274,488,-274',
'485,484,483,493,486,,,-274,-274,-274,,,,496,,,,,,-274,-274,,-274,-274',
'-274,-274,-274,488,,485,484,483,493,486,488,491,485,484,483,493,486',
',496,,501,500,504,503,,496,,497,,488,,485,484,483,493,486,-274,,,,491',
',,-274,496,,,491,303,-274,,504,503,237,,,497,,504,503,,,,497,,,491,',
',,,-274,-274,,,501,500,504,503,,,,497,,,,-274,,,-274,,77,78,26,-274',
'65,,,,71,72,-274,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321',
',319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,558,,75,,73,74,76,351,352,79,80,,,,',
',81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250',
',,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88',
'98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79',
'80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,',
',,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53',
',,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,',
',,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247',
',,,,99,322,90,91,,92,94,93,95,,,,,88,98,237,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,,,,82,,89,103,104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76',
'35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,,12,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74',
'76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,',
',,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75',
',73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,',
'53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,',
',,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,',
',,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80',
',,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,',
'250,,,66,67,,,68,,796,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,',
',,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,',
',,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,796',
',319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,558,,75,,73,74,76,351,352,79,80,,,,',
',81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107',
'106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250',
',,66,67,,,68,,,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,',
',,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,',
'73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,',
',,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47',
',75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,',
',,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,',
',,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,604,,66,67,,',
'68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,',
'81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80',
',,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,',
'250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352',
'79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,',
',115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,',
',,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72',
'46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,',
'251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,',
',,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,433,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
',,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80',
',,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,',
'250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36',
'79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,',
',,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47',
'77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,23,,,,,,10,53,9,12,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40',
',,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33',
'32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346',
'354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,',
'81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,',
',66,67,,,68,,,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,',
',,,,242,,,250,,,66,67,,,68,,796,,319,,52,,,325,,,,,,247,,,,,99,322,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26',
'11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112',
'113,,,23,,,,,,10,53,,12,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52',
',,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321',
',319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,',
'81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,865,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
',,,,,,82,,89,103,104,-310,,46,47,,,,-310,-310,-310,,,-310,-310,-310',
',-310,,,,,,,,-310,,-310,-310,-310,,,,111,110,112,113,-310,-310,,-310',
'-310,-310,-310,-310,,,,,115,114,116,,,,,,,,,,,101,102,,,355,-310,-310',
'-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,,,-310,-310',
'-310,,,-310,,,-310,,,-310,-310,,-310,,-310,,-310,,-310,-310,,-310,-310',
'-310,-310,-310,,-310,,-310,,99,87,90,91,,92,94,93,95,,,,-310,88,98,-310',
'-310,-310,-310,,-310,82,-310,89,103,104,,-310,77,78,26,11,65,,,,71,72',
',,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,',
'10,53,,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72',
'46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,',
'251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,,,52,,,325',
',,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89',
'103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,',
'81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,',
',,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,',
',77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,',
',,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,',
',77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,',
',,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,123',
',,,,122,82,,89,103,104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,,12,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,',
',,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,-274,,46,47,,,,-274,-274',
'-274,,,-274,-274,-274,,-274,,,,,,,,-274,-274,-274,-274,,,,,,,,,-274',
'-274,,-274,-274,-274,-274,-274,,,,,,,,,,,,,,,,,,,,,,,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,,,-274,-274,-274',
',,-274,,303,-274,,,-274,-274,,-274,,-274,,-274,,-274,-274,,-274,-274',
'-274,-274,-274,,-274,-274,-274,488,,485,484,483,493,486,,,,,,,-274,',
'496,-274,-274,-716,-274,,-274,,,,-716,-716,-716,-274,,-716,-716,-716',
',-716,,,491,,,,,-716,-716,-716,-716,-716,,504,503,,,,497,-716,-716,',
'-716,-716,-716,-716,-716,,,,,,,,,,,,,,,,,,,,,,,-716,-716,-716,-716,-716',
'-716,-716,-716,-716,-716,-716,-716,-716,-716,,,-716,-716,-716,,,-716',
',,-716,,,-716,-716,,-716,,-716,,-716,,-716,-716,,-716,-716,-716,-716',
'-716,,-716,-716,-716,,,,,,,,,,,,,,-716,,,-716,-716,-716,-716,,-716,-717',
'-716,,,,,-716,-717,-717,-717,,,-717,-717,-717,,-717,,,,,,,,-717,-717',
'-717,-717,-717,,,,,,,,-717,-717,,-717,-717,-717,-717,-717,,,,,,,,,,',
',,,,,,,,,,,,-717,-717,-717,-717,-717,-717,-717,-717,-717,-717,-717,-717',
'-717,-717,,,-717,-717,-717,,,-717,,,-717,,,-717,-717,,-717,,-717,,-717',
',-717,-717,,-717,-717,-717,-717,-717,,-717,-717,-717,,,,,,,,,,,,,,-717',
',,-717,-717,-717,-717,,-717,,-717,,77,78,26,-717,65,,,,71,72,,,,75,',
'73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,',
',,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26,11,65',
',,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,',
',23,,,,,,10,53,9,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,',
',,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,417,82,,89,103,104',
',,46,47,77,78,26,,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33',
'32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32',
'111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32',
'111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32',
'111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,',
'89,103,104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79',
'80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45',
',,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115',
'114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,',
',,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,',
'99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,433,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,433,,,,52,,,,,,',
',,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319',
',52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33',
'32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324',
'109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,',
',68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88',
'98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79',
'80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,321,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,',
',115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,',
',,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,',
',,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,',
',,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,355',
',,,,,,,,,,,,,,,,,,,343,,,250,,,66,67,,,68,,,488,,485,484,483,493,486',
',,,,,,,,496,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,357,,491,82,,89,103',
'104,77,78,26,,65,504,503,,71,72,497,,,75,,73,74,76,351,352,79,80,,,',
',,81,346,354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66',
'67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346',
'354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68',
',,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,392,,,38,,,66,67,,,68,,40,,,,',
',,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89',
'103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,,,,,,,,,,',
',,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,,,355,,,,,,,,,,,,,,,,,,,,1105,,,250,,,66,67,,,68,,,,,,,,,,,,,,,',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,347,,,115,114,116,397,64,107,106,398,,109,117,118,,101,102',
',,355,,,,,,,,,,,,,,,,,404,,,399,,,250,,,66,67,,,68,,,,,,,,,,,,,,,,,',
',,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,355',
',,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,',
'73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,',
',,,,,,,,,,,,343,,,250,,,66,67,,,68,,,488,,485,484,483,493,486,,,,,,',
',,496,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,586,,491,82,,89,103,104',
'77,78,26,,65,504,503,,71,72,497,,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,397,64,107,106',
'398,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,399,,,250,,,66,67',
',,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346',
'354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,1144,,,250,,,66,67,,',
'68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,,',
',,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,338,,,,,,',
',,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,,,355,,,,,,,,,,,,,,,,,,,,1144,,,250,,,66,67,,,68,,,,,,,,,,,,,,,',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,182,193',
'183,206,179,199,189,188,209,210,204,187,186,181,207,211,212,191,180',
'194,198,200,192,185,,,,201,208,203,202,195,205,190,178,197,196,,,,,',
'177,184,175,176,172,173,174,135,137,,,136,,,,,,,,166,167,,163,145,146',
'147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160,159,,144',
'165,162,161,170,157,158,152,150,142,164,143,,,171,99,,,,,,,,,,,,,,98',
'182,193,183,206,179,199,189,188,209,210,204,187,186,181,207,211,212',
'191,180,194,198,200,192,185,,,,201,208,203,202,195,205,190,178,197,196',
',,,,,177,184,175,176,172,173,174,135,137,134,,136,,,,,,,,166,167,,163',
'145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160',
'159,,144,165,162,161,170,157,158,152,150,142,164,143,,,171,99,,,,,,',
',,,,,,,98,182,193,183,206,179,199,189,188,209,210,204,187,186,181,207',
'211,212,191,180,194,198,200,192,185,,,,201,208,203,202,195,205,190,178',
'197,196,,,,,,177,184,175,176,172,173,174,135,137,,,136,,,,,,,,166,167',
',163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,',
',,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,,,171,99',
',,,,,,,,,,,,,98,182,193,183,206,179,199,189,188,209,210,204,187,186',
'181,207,211,212,191,180,194,198,200,192,185,,,,201,208,203,202,195,205',
'190,178,197,196,,,,,,177,184,175,176,172,173,174,135,137,,,136,,,,,',
',,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156',
',,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143',
',,171,99,111,110,112,113,,,,,,,,,,98,,,115,114,116,773,,,488,776,485',
'484,483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,775,,,746,,,491',
'744,,,745,,,,,501,500,504,503,,,,497,,,,774,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,761,762,,115,114,116',
'773,,,488,776,485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,',
',,775,,,746,,,491,744,,,745,,1052,,,,,504,503,,,,497,,,,774,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,761',
'762,,115,114,116,773,,,,776,753,,,,,101,102,,,355,496,,,,,,,,,,,,,,',
',,,,775,,,746,,,,744,,,745,,748,,,,,,,497,,,,,,,774,,,,99,754,90,91',
',92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,761,762,,115',
'114,116,773,,,488,776,485,484,483,493,486,101,102,,,355,,,,496,,,,,',
',,,,,,,,,,775,,,746,,,491,744,,,745,,,,,501,500,504,503,,,,497,,,,774',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104',
',,761,762,,115,114,116,773,,,,776,753,,,,,101,102,,,355,496,,,,,,,,',
',,,,,,,,,,775,,,746,,,,744,,,745,,748,,,,,,,497,,,,,,,774,,,,99,754',
'90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,761',
'762,,115,114,116,773,,,488,776,485,484,483,493,486,101,102,,,355,,,',
'496,,,,,,,,,,,,,,,,775,,,746,,,491,744,,,745,,,,,501,500,504,503,,,',
'497,,,,774,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82',
',89,103,104,,,761,762,,115,114,116,773,,,,776,753,,,,,101,102,,,355',
'496,,,,,,,,,,,,,,,,,,,775,,,746,,,,744,,,745,,748,,,,,,,497,,,,,,,774',
',,,99,754,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103',
'104,,,761,762,,115,114,116,773,,,488,776,485,484,483,493,486,101,102',
',,355,,,,496,,,,,,,,,,,,,,,,775,,,746,,,491,744,,,745,,748,,,,,504,503',
',,,497,,,,774,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113',
',,82,,89,103,104,,,761,762,,115,114,116,773,,,488,776,485,484,483,493',
'486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,775,,,746,,,491,744,,,745,,748',
',,501,500,504,503,,,,497,,,,774,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
',,,,,,82,,89,103,104,,,761,762,182,193,183,206,179,199,189,188,209,210',
'204,187,186,181,207,211,212,191,180,194,198,200,192,185,,,,201,208,203',
'291,290,292,289,178,197,196,,,,,,177,184,175,176,286,287,288,284,137',
'107,106,285,,109,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149',
',,,168,169,155,156,,,,,,296,,,,,,,,160,159,,144,165,162,161,170,157',
'158,152,150,142,164,143,,,171,182,193,183,206,179,199,189,188,209,210',
'204,187,186,181,207,211,212,191,180,194,198,200,192,185,,,,201,208,203',
'202,195,205,190,178,197,196,,,,,,177,184,175,176,172,173,174,135,137',
',,136,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169',
'155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142',
'164,143,,,171,111,110,112,113,,,,,,,,,,,,,115,114,116,773,,,488,776',
'485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,775,,,746,,',
'491,744,,,745,,,,,501,500,504,503,,,,497,,,,774,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,761,762,,115,114',
'116,773,,,488,776,485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,',
',,,,,,775,,,746,,,491,744,,,745,,,,,,,504,503,,,,497,,,,774,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,761',
'762,,115,114,116,773,,,488,776,485,484,483,493,486,101,102,,,355,,,',
'496,,,,,,,,,,,,,,,,775,,,746,,,491,744,,,745,,,,,,,504,503,,,,497,,',
',774,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89',
'103,104,,,761,762,,115,114,116,773,,,488,776,485,484,483,493,486,101',
'102,,,355,,,,496,,,,,,,,,,,,,,,,775,,,746,,,491,744,,,745,,,,,,,504',
'503,,,,497,,,,774,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112',
'113,,,82,,89,103,104,,,761,762,,115,114,116,773,,,488,776,485,484,483',
'493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,775,,,746,,,491,744,,,745',
',748,,,501,500,504,503,,,,497,,,,774,,,,99,87,90,91,,92,94,93,95,,,',
',88,98,237,111,110,112,113,,82,,89,103,104,,,761,762,,,115,114,116,773',
',,,776,753,,,,,101,102,,,355,496,,,,,,,,,,,,,,,,,,,775,,,746,,,,744',
',,745,,748,,,,,,,497,,,,,,,774,,,,99,754,90,91,,92,94,93,95,,,,,88,98',
'111,110,112,113,,,82,,89,103,104,,,761,762,,115,114,116,773,,,,776,753',
',,,,101,102,,,355,496,,,,,,,,,,,,,,,,,,,775,,,746,,,,744,,,745,,748',
',,,,,,497,,,,,,,774,,,,99,754,90,91,,92,94,93,95,,,,,88,98,111,110,112',
'113,,,82,,89,103,104,,,761,762,,115,114,116,773,,,,776,,,,,,101,102',
',,355,,,,,,,,111,110,112,113,,,,,,,,,775,,,746,115,114,116,744,,,745',
',,,,,,101,102,,,355,,,,,774,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,',
',,,,82,,89,103,104,,,761,762,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,',
',88,98,111,110,112,113,,,82,,89,103,104,,,,,,115,114,116,809,466,,,810',
',,,,,101,102,166,167,355,163,145,146,147,154,151,153,,,148,149,,,,168',
'169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152',
'150,142,164,143,,,171,99,87,90,91,,92,94,93,95,,,,,88,98,806,459,,,807',
',82,,89,103,104,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168',
'169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152',
'150,142,164,143,1198,459,171,,1199,,,,,,,,166,167,,163,145,146,147,154',
'151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165',
'162,161,170,157,158,152,150,142,164,143,728,466,171,,729,,,,,,,,166',
'167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303',
',,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,867',
'459,171,,868,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,',
',,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158',
'152,150,142,164,143,870,466,171,,869,,,,,,,,166,167,,163,145,146,147',
'154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144',
'165,162,161,170,157,158,152,150,142,164,143,1200,466,171,,1201,,,,,',
',,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156',
',,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164',
'143,554,459,171,,555,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148',
'149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170',
'157,158,152,150,142,164,143,462,466,171,,461,,,,,,,,166,167,,163,145',
'146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160',
'159,,144,165,162,161,170,157,158,152,150,142,164,143,728,466,171,,729',
',,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155',
'156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142',
'164,143,835,459,171,,836,,,,,,,,166,167,,163,145,146,147,154,151,153',
',,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161',
'170,157,158,152,150,142,164,143,837,466,171,,838,,,,,,,,166,167,,163',
'145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,',
',160,159,,144,165,162,161,170,157,158,152,150,142,164,143,726,459,171',
',727,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169',
'155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150',
'142,164,143,1216,466,171,,1215,,,,,,,,166,167,,163,145,146,147,154,151',
'153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162',
'161,170,157,158,152,150,142,164,143,840,466,171,,841,,,,,,,,166,167',
',163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,',
',,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,554,459',
'171,,555,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168',
'169,155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150',
'142,164,143,726,459,171,,727,,,,,,,,166,167,,163,145,146,147,154,151',
'153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162',
'161,170,157,158,152,150,142,164,143,455,459,171,,456,,,,,,,,166,167',
',163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,',
',,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,,488',
'171,485,484,483,493,486,,488,,485,484,483,493,486,496,,,,,,,,496,,,',
',,,,,,,,,,491,642,,,,,,,491,501,500,504,503,,,,497,501,500,504,503,',
',,497' ]
        racc_action_table = arr = ::Array.new(28646, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'105,868,1198,836,1234,629,249,105,105,105,513,513,105,105,105,1052,105',
'23,1106,990,1199,381,816,816,105,926,105,105,105,413,867,835,821,821',
'734,31,105,105,1200,105,105,105,105,105,1201,382,1102,1087,1085,390',
'393,620,5,377,994,930,377,5,23,994,868,926,249,389,837,848,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,734,833,105,105,105,3,105',
'105,1103,867,105,1220,838,105,105,413,105,1052,105,31,105,930,105,105',
'513,105,105,105,105,105,461,105,836,105,629,1200,816,461,461,461,1198',
'1201,31,461,461,1198,461,105,990,837,105,105,105,105,461,105,1106,105',
'1199,381,835,1106,105,1199,381,105,461,461,1014,461,461,461,461,461',
'1163,620,1200,838,390,393,620,1200,1201,382,1102,1087,1085,1201,382',
'1102,1087,1085,389,837,848,9,461,461,461,461,461,461,461,461,461,461',
'461,461,461,461,551,551,461,461,461,784,461,461,69,833,461,838,833,461',
'833,1125,1103,12,461,1220,461,1103,461,461,1220,461,461,461,461,461',
'248,461,728,461,355,355,14,639,639,728,728,728,48,48,728,728,728,461',
'728,745,461,461,15,461,1057,461,728,728,728,728,728,414,461,17,921,461',
'745,807,728,728,1004,728,728,728,728,728,1014,758,758,1125,1125,1014',
'1163,809,806,977,248,1163,348,574,20,19,784,27,551,69,1125,1057,728',
'728,728,728,728,728,728,728,728,728,728,728,728,728,355,355,728,728',
'728,945,728,728,48,48,728,921,42,728,728,414,728,1004,728,639,728,807',
'728,728,639,728,728,728,728,728,240,728,728,728,20,19,809,809,806,977',
'348,574,574,574,21,241,727,728,801,288,728,728,728,728,410,728,288,728',
'574,870,801,807,728,348,807,728,870,870,870,945,945,945,870,870,45,870',
'807,809,806,977,809,806,977,870,870,53,945,1218,726,240,755,21,809,806',
'977,870,870,1218,870,870,870,870,870,21,241,727,498,695,755,695,695',
'695,695,695,288,409,243,775,410,410,410,775,695,654,498,870,870,870',
'870,870,870,870,870,870,870,870,870,870,870,519,440,870,870,870,695',
'870,870,726,43,870,656,290,870,695,695,695,695,870,290,870,695,870,870',
'408,870,870,870,870,870,869,870,870,870,925,213,243,869,869,869,409',
'409,409,869,869,291,869,870,654,654,870,870,291,870,869,870,43,292,654',
'519,440,695,870,226,292,870,869,869,43,869,869,869,869,869,925,656,656',
'290,230,841,230,230,230,230,230,656,841,386,408,408,408,841,386,230',
'228,841,869,869,869,869,869,869,869,869,869,869,869,869,869,869,291',
'359,869,869,869,230,869,869,1088,1088,869,412,292,869,230,230,230,230',
'869,411,869,230,869,869,415,869,869,869,869,869,729,869,623,869,841',
'44,506,729,729,729,623,506,729,729,729,29,729,869,359,232,869,869,29',
'869,729,869,729,729,729,743,359,230,869,242,743,869,729,729,743,729',
'729,729,729,729,399,412,412,412,399,340,283,244,44,411,411,411,340,283',
'415,415,415,701,701,676,44,340,729,729,729,729,729,729,729,729,729,729',
'729,729,729,729,29,341,729,729,729,342,729,729,341,245,729,929,342,729',
'729,929,729,341,729,328,729,342,729,729,328,729,729,729,729,729,676',
'729,108,729,340,283,1090,251,1090,108,108,108,676,302,108,108,108,729',
'108,316,729,729,729,729,317,729,108,729,108,108,108,374,729,320,374',
'729,341,332,108,108,342,108,108,108,108,108,333,344,335,360,336,1104',
'284,285,344,337,360,286,1104,284,285,380,380,344,286,360,343,1104,108',
'108,108,108,108,108,108,108,108,108,108,108,108,108,346,937,108,108',
'108,1143,108,108,1188,1188,108,937,1143,108,108,347,108,287,108,349',
'108,1143,108,108,287,108,108,108,108,108,344,108,360,108,1104,284,285',
'350,391,289,286,51,51,16,16,391,289,108,354,937,108,108,108,108,391',
'108,356,108,455,462,363,937,108,456,85,108,462,462,462,365,1143,371',
'462,462,401,462,85,51,51,544,375,401,287,462,462,820,85,376,820,378',
'401,762,762,762,762,462,462,387,462,462,462,462,462,391,289,455,388',
'762,762,762,456,544,392,394,403,544,544,455,544,544,762,762,456,423',
'762,462,462,462,462,462,462,462,462,462,462,462,462,462,462,401,429',
'462,462,462,431,462,462,54,1155,462,134,1155,462,1185,54,134,134,462',
'432,462,1185,462,462,54,462,462,462,462,462,1185,462,462,462,434,762',
'762,762,762,437,762,762,762,762,943,441,451,462,762,762,462,462,453',
'462,943,462,762,454,762,762,762,373,462,463,373,462,839,839,839,839',
'839,839,469,54,470,839,839,473,474,1185,839,397,839,839,839,839,839',
'839,839,475,476,477,943,479,839,839,839,839,839,839,839,480,490,839',
'943,502,505,529,507,839,839,839,839,839,839,839,839,839,839,839,839',
'509,839,839,839,439,839,839,839,839,839,18,439,397,515,591,523,524,18',
'529,397,439,591,529,529,397,531,18,532,397,839,591,533,839,534,559,839',
'839,239,560,839,561,839,565,581,239,839,582,397,585,530,587,647,647',
'239,839,647,647,647,592,839,839,839,839,596,839,839,839,839,605,439',
'606,607,839,839,617,18,621,397,622,591,839,530,839,839,839,530,530,839',
'839,1101,1101,1101,1101,1101,1101,624,651,659,1101,1101,661,668,239',
'1101,398,1101,1101,1101,1101,1101,1101,1101,677,682,698,687,689,1101',
'1101,1101,1101,1101,1101,1101,698,1195,1101,1195,1195,1195,691,1195',
'1101,1101,1101,1101,1101,1101,1101,1101,1101,1101,1101,1101,710,1101',
'1101,1101,632,1101,1101,1101,1101,1101,810,632,398,698,698,711,713,810',
'698,398,632,721,810,730,398,739,810,747,398,1101,748,774,1101,774,774',
'1101,1101,774,749,1101,712,1101,712,712,712,1101,712,398,331,331,331',
'331,331,1130,1101,778,781,783,789,1101,1101,1101,1101,1130,1101,1101',
'1101,1101,774,632,790,791,1101,1101,793,810,795,398,803,805,1101,808',
'1101,1101,1101,811,812,1101,1101,1096,1096,1096,1096,1096,1096,815,1130',
'1130,1096,1096,823,1130,829,1096,840,1096,1096,1096,1096,1096,1096,1096',
'370,370,370,370,370,1096,1096,1096,1096,1096,1096,1096,830,491,1096',
'491,491,491,834,491,1096,1096,1096,1096,1096,1096,1096,1096,1096,1096',
'1096,1096,843,1096,1096,1096,847,1096,1096,1096,1096,1096,849,708,840',
'708,708,708,864,708,491,840,866,875,888,891,840,892,895,491,840,1096',
'897,898,1096,900,902,1096,1096,904,905,1096,1097,1096,1097,1097,1097',
'1096,1097,840,708,911,907,911,911,911,1096,911,910,708,923,1096,1096',
'1096,1096,931,1096,1096,1096,1096,932,936,939,944,1096,1096,963,966',
'967,840,976,981,1096,984,1096,1096,1096,991,911,1096,1096,334,334,334',
'334,334,334,911,993,1000,334,334,1001,1002,1003,334,1030,334,334,334',
'334,334,334,334,25,1031,1036,1041,1042,334,334,334,334,334,334,334,1043',
'1044,334,8,8,8,8,8,334,334,334,334,334,334,334,334,334,334,334,334,1045',
'334,334,334,1046,334,334,334,334,334,25,25,25,25,25,25,25,25,25,25,25',
'1050,25,25,1051,1054,25,25,1058,334,1065,25,334,1070,1071,334,334,1073',
'1074,334,1075,334,25,1077,25,334,25,25,1078,25,25,25,25,25,334,25,1079',
'1094,1105,334,334,334,334,1108,334,334,334,334,1109,1110,1111,1122,334',
'334,1141,25,1144,1153,1154,1159,334,1169,334,334,334,1170,1172,334,334',
'250,250,250,250,250,250,1175,1178,1179,250,250,1180,1181,1183,250,1197',
'250,250,250,250,250,250,250,579,579,579,579,579,250,250,250,250,250',
'250,250,1202,1204,250,1215,1216,1222,1223,444,250,250,250,250,250,250',
'250,250,250,250,250,250,1224,250,250,250,1225,250,250,250,250,250,444',
'444,444,444,444,444,444,444,444,444,444,1,444,444,,,444,444,,250,,,250',
',,250,250,,,250,,250,444,,444,250,444,444,,444,444,444,444,444,250,444',
',,,250,250,250,250,,250,250,250,250,,,,,250,250,,444,,444,,,250,,250',
'250,250,,,250,250,215,215,215,215,215,215,,,,215,215,,,,215,,215,215',
'215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,722,215',
'215,215,215,215,215,215,215,215,215,215,215,,215,215,215,,215,215,215',
'215,215,722,722,722,722,722,722,722,722,722,722,722,,722,722,,,722,722',
',215,,,215,,,215,215,,,215,,215,722,,722,215,722,722,,722,722,722,722',
'722,215,722,,,,215,215,215,215,,215,215,215,215,,,,,215,215,,722,,,',
',215,,215,215,215,,,215,215,1095,1095,1095,1095,1095,1095,,,,1095,1095',
',,,1095,,1095,1095,1095,1095,1095,1095,1095,,,,,,1095,1095,1095,1095',
'1095,1095,1095,,,1095,,,,,690,1095,1095,1095,1095,1095,1095,1095,1095',
'1095,1095,1095,1095,,1095,1095,1095,,1095,1095,1095,1095,1095,690,690',
'690,690,690,690,690,690,690,690,690,,690,690,,,690,690,,1095,,,1095',
',,1095,1095,,,1095,,1095,690,,690,1095,690,690,,690,690,690,690,690',
'1095,690,,,,1095,1095,1095,1095,,1095,1095,1095,1095,,,,,1095,1095,',
'690,,,,,1095,,1095,1095,1095,,,1095,1095,1189,1189,1189,1189,1189,1189',
',,,1189,1189,,,,1189,,1189,1189,1189,1189,1189,1189,1189,,,,,,1189,1189',
'1189,1189,1189,1189,1189,,,1189,,,,,450,1189,1189,1189,1189,1189,1189',
'1189,1189,1189,1189,1189,1189,,1189,1189,1189,,1189,1189,1189,1189,1189',
'450,450,450,450,450,450,450,450,450,450,450,,450,450,,,450,450,,1189',
',,1189,,,1189,1189,,,1189,,1189,450,,450,1189,450,450,,450,450,450,450',
'450,1189,450,,,,1189,1189,1189,1189,,1189,1189,1189,1189,,,,,1189,1189',
',450,,,,,1189,,1189,1189,1189,,,1189,1189,640,640,640,640,640,640,,',
',640,640,,,,640,,640,640,640,640,640,640,640,,,,,,640,640,640,640,640',
'640,640,,,640,,,,,,640,640,640,640,640,640,640,640,640,640,640,640,',
'640,640,640,,640,640,640,640,640,872,872,872,872,872,872,872,872,872',
'872,872,,872,872,,,872,872,,640,,,640,,,640,640,,,640,,640,872,,872',
'640,872,872,,872,872,872,872,872,640,872,,,,640,640,640,640,,640,640',
'640,640,,,,,640,640,,872,,,,,640,,640,640,640,,,640,640,1067,1067,1067',
'1067,1067,1067,,,,1067,1067,,,,1067,,1067,1067,1067,1067,1067,1067,1067',
',,,,,1067,1067,1067,1067,1067,1067,1067,,,1067,,,,,,1067,1067,1067,1067',
'1067,1067,1067,1067,1067,1067,1067,1067,,1067,1067,1067,,1067,1067,1067',
'1067,1067,314,314,314,314,314,314,314,314,314,314,314,,314,314,,,314',
'314,,1067,,,1067,,,1067,1067,,,1067,,1067,314,,314,1067,314,314,,314',
'314,314,314,314,1067,314,,,,1067,1067,1067,1067,,1067,1067,1067,1067',
',,,,1067,1067,,314,,,,,1067,,1067,1067,1067,,,1067,1067,369,369,369',
'369,369,369,,,,369,369,,,,369,,369,369,369,369,369,369,369,,,,,,369',
'369,369,369,369,369,369,,,369,,,,,,369,369,369,369,369,369,369,369,369',
'369,369,369,,369,369,369,,369,369,369,369,369,1008,1008,1008,1008,1008',
'1008,1008,1008,1008,1008,1008,,1008,1008,,,1008,1008,,369,,,369,,,369',
'369,,,369,,369,1008,,1008,369,1008,1008,,1008,1008,1008,1008,1008,369',
'1008,,,,369,369,369,369,,369,369,369,369,,,,,369,369,,1008,,,,,369,',
'369,369,369,,,369,369,619,619,619,619,619,619,,,,619,619,,,,619,,619',
'619,619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,',
'619,619,619,619,619,619,619,619,619,619,619,619,,619,619,619,,619,619',
'619,619,619,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,',
'1009,1009,,,1009,1009,,619,,,619,,,619,619,,,619,,619,1009,,1009,619',
'1009,1009,,1009,1009,1009,1009,1009,619,1009,,,,619,619,619,619,,619',
'619,619,619,,,,,619,619,,1009,,,,,619,,619,619,619,,,619,619,890,890',
'890,890,890,890,,,,890,890,,,,890,,890,890,890,890,890,890,890,,,,,',
'890,890,890,890,890,890,890,,,890,,,,,,890,890,890,890,890,890,890,890',
'890,890,890,890,,890,890,890,,890,890,890,890,890,1032,1032,1032,1032',
'1032,1032,1032,1032,1032,1032,1032,,1032,1032,,,1032,1032,,890,,,890',
',,890,890,,,890,,890,1032,,1032,890,1032,1032,,1032,1032,1032,1032,1032',
'890,1032,,,,890,890,890,890,,890,890,890,890,,,,,890,890,,1032,,,,,890',
',890,890,890,,,890,890,233,233,233,233,233,233,,,,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
'233,233,233,233,233,233,233,233,233,233,233,233,,233,233,233,,233,233',
'233,233,233,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,',
'1033,1033,,,1033,1033,,233,,,233,,,233,233,,,233,,233,1033,,1033,233',
'1033,1033,,1033,1033,1033,1033,1033,233,1033,,,,233,233,233,233,,233',
'233,233,233,,,,,233,233,,1033,,,,,233,,233,233,233,,,233,233,855,855',
'855,855,855,855,,,,855,855,,,,855,,855,855,855,855,855,855,855,,,,,',
'855,855,855,855,855,855,855,,,855,,,,,,855,855,855,855,855,855,855,855',
'855,855,855,855,,855,855,855,,855,855,855,855,855,1066,1066,1066,1066',
'1066,1066,1066,1066,1066,1066,1066,,1066,1066,,,1066,1066,,855,,,855',
',,855,855,,,855,,855,1066,,1066,855,1066,1066,,1066,1066,1066,1066,1066',
'855,1066,,,,855,855,855,855,,855,855,855,855,,,,,855,855,,1066,,,,,855',
',855,855,855,,,855,855,339,339,339,339,339,339,,,,339,339,,,,339,,339',
'339,339,339,339,339,339,,,,,,339,339,339,339,339,339,339,,,339,,,,,',
'339,339,339,339,339,339,339,339,339,339,339,339,,339,339,339,,339,339',
'339,339,339,548,548,548,548,548,548,548,548,548,548,548,,548,548,,,548',
'548,,339,,,339,,,339,339,,,339,,339,548,,548,339,548,548,,548,548,548',
'548,548,339,548,,,,339,339,339,339,,339,339,339,339,,,,,339,339,548',
'548,,,,,339,,339,339,339,,,339,339,1011,1011,1011,1011,1011,1011,,,',
'1011,1011,,,,1011,,1011,1011,1011,1011,1011,1011,1011,,,,,,1011,1011',
'1011,1011,1011,1011,1011,,,1011,,,,,,1011,1011,1011,1011,1011,1011,1011',
'1011,1011,1011,1011,1011,,1011,1011,1011,,1011,1011,1011,1011,1011,603',
'603,603,603,603,603,603,603,603,603,603,,603,603,,,603,603,,1011,,,1011',
',,1011,1011,,,1011,,1011,603,,603,1011,603,603,,603,603,603,603,603',
'1011,603,,,,1011,1011,1011,1011,,1011,1011,1011,1011,,,,,1011,1011,',
'603,,,,,1011,,1011,1011,1011,,,1011,1011,971,971,971,971,971,971,,,',
'971,971,,,,971,,971,971,971,971,971,971,971,,,,,,971,971,971,971,971',
'971,971,545,1113,971,1113,1113,1113,,1113,971,971,971,971,971,971,971',
'971,971,971,971,971,,971,971,971,,971,971,971,971,971,602,,545,,,,545',
'545,1113,545,545,,,,,,602,602,,971,,,971,,,971,971,,,971,,971,602,,602',
'971,602,602,,602,602,,,602,971,602,,,,971,971,971,971,,971,971,971,971',
',,,,971,971,,1112,,1112,1112,1112,971,1112,971,971,971,,,971,971,38',
'38,38,38,38,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,1112,,,,,38,38,38',
'38,38,38,38,,912,38,912,912,912,,912,38,38,38,38,38,38,38,38,38,38,38',
'38,,38,38,38,,38,38,38,38,38,547,547,547,547,547,547,547,547,912,547',
'547,,,,,,547,547,,38,,,38,,,38,38,,,38,,38,547,,547,38,547,547,,547',
'547,547,547,547,38,547,,,,38,38,38,38,,38,38,38,38,,,,,38,38,,,,,,,38',
',38,38,38,,,38,38,995,995,995,995,995,995,,,,995,995,,,,995,,995,995',
'995,995,995,995,995,,,,,,995,995,995,995,995,995,995,,,995,,,,,,995',
'995,995,995,995,995,995,995,995,995,995,995,,995,995,995,,995,995,995',
'995,995,362,362,362,362,362,362,362,362,362,362,362,,362,362,,,362,362',
',995,,,995,,,995,995,,,995,,995,362,,362,995,362,362,,362,362,362,362',
'362,995,362,,,,995,995,995,995,,995,995,995,995,,,,,995,995,,,,,,,995',
',995,995,995,,,995,995,844,844,844,844,844,844,,,,844,844,,,,844,,844',
'844,844,844,844,844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,',
'844,844,844,844,844,844,844,844,844,844,844,844,,844,844,844,,844,844',
'844,844,844,543,543,543,543,543,543,543,,,543,543,,,,,,543,543,,844',
',,844,,,844,844,,,844,,844,543,,543,844,543,543,,543,543,543,543,543',
'844,543,,,,844,844,844,844,,844,844,844,844,,,,,844,844,,,,,,,844,,844',
'844,844,,,844,844,989,989,989,989,989,989,,,,989,989,,,,989,,989,989',
'989,989,989,989,989,,,,,,989,989,989,989,989,989,989,,,989,,,,,,989',
'989,989,989,989,989,989,989,989,989,989,989,,989,989,989,,989,989,989',
'989,989,546,546,546,546,546,546,546,,,546,546,,,,,,546,546,,989,,,989',
',,989,989,,,989,,989,546,,546,989,546,546,,546,546,546,546,546,989,546',
',,,989,989,989,989,,989,989,989,989,,,,,989,989,,,,,,,989,,989,989,989',
',,989,989,132,132,132,132,132,132,,,,132,132,,,,132,,132,132,132,132',
'132,132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,132,132,132',
'132,132,132,132,132,132,132,132,132,,132,132,132,,132,132,132,132,132',
'540,540,540,540,540,540,540,,,540,540,,,,,,540,540,,132,,,132,,,132',
'132,,,132,,132,540,,540,132,540,540,,540,540,540,540,540,132,540,,,',
'132,132,132,132,,132,132,132,132,,,,,132,132,,,,,,,132,,132,132,132',
',,132,132,1145,1145,1145,1145,1145,1145,,,,1145,1145,,,,1145,,1145,1145',
'1145,1145,1145,1145,1145,,,,,,1145,1145,1145,1145,1145,1145,1145,,,1145',
',,,,,1145,1145,1145,1145,1145,1145,1145,1145,1145,1145,1145,1145,,1145',
'1145,1145,,1145,1145,1145,1145,1145,538,538,538,538,538,538,538,,,538',
'538,,,,,,538,538,,1145,,,1145,,,1145,1145,,,1145,,1145,538,,538,1145',
'538,538,,538,538,538,538,538,1145,538,,,,1145,1145,1145,1145,,1145,1145',
'1145,1145,,,,,1145,1145,,,,,,,1145,,1145,1145,1145,,,1145,1145,227,227',
'227,227,227,227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,',
'227,227,227,227,227,227,227,,,227,,,,,,227,227,227,227,227,227,227,227',
'227,227,227,227,,227,227,227,,227,227,227,227,227,539,539,539,539,539',
'539,539,,,539,539,,,,,,539,539,,227,,,227,,,227,227,,,227,,227,539,',
'539,227,539,539,,539,539,539,539,539,227,539,,,,227,227,227,227,,227',
'227,227,227,,,,,227,227,,,,,,,227,,227,227,227,,,227,227,385,385,385',
'385,385,385,,,,385,385,,,,385,,385,385,385,385,385,385,385,,,,,,385',
'385,385,385,385,385,385,,,385,,,,,,385,385,385,385,385,385,385,385,385',
'385,385,385,,385,385,385,,385,385,385,385,385,361,361,361,361,361,361',
'361,361,361,361,361,,361,361,,,361,361,,385,,,385,,,385,385,,,385,,385',
'361,,361,385,361,361,,361,361,361,361,361,385,361,,,,385,385,385,385',
',385,385,385,385,,,,,385,385,,,,,,,385,,385,385,385,,,385,385,384,384',
'384,384,384,384,,,,384,384,,,,384,,384,384,384,384,384,384,384,,,,,',
'384,384,384,384,384,384,384,,,384,,,,,,384,384,384,384,384,384,384,384',
'384,384,384,384,,384,384,384,,384,384,384,384,384,527,527,527,527,527',
'527,527,527,527,527,527,,527,527,,,527,527,,384,,,384,,,384,384,,,384',
',384,527,,527,384,527,527,,527,527,527,527,527,384,527,,,,384,384,384',
'384,,384,384,384,384,,,,,384,384,,,,,,,384,,384,384,384,,,384,384,2',
'2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2',
'2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,2,2,2,541,541,541,541,541,541,541,,',
'541,541,,,,,,541,541,,2,,,2,,,2,2,,,2,,2,541,,541,2,541,541,,541,541',
'541,541,541,2,541,,,,2,2,2,2,,2,2,2,2,,,,,2,2,,,,,,,2,,2,2,2,,,2,2,616',
'616,616,616,616,616,,,,616,616,,,,616,,616,616,616,616,616,616,616,',
',,,,616,616,616,616,616,616,616,,,616,,,,,,616,616,616,616,616,616,616',
'616,616,616,616,616,,616,616,616,,616,616,616,616,616,528,528,528,528',
'528,528,528,528,528,528,528,,528,528,,,528,528,,616,,,616,,,616,616',
',,616,,616,528,,528,616,528,528,,528,528,528,528,528,616,528,,,,616',
'616,616,616,,616,616,616,616,,,,,616,616,,,,796,796,796,616,796,616',
'616,616,796,796,616,616,,796,,796,796,796,796,796,796,796,,,,,,796,796',
'796,796,796,796,796,,,796,,,,,,,796,,,796,796,796,796,796,796,796,796',
',796,796,796,,796,796,796,796,796,542,542,542,542,542,542,542,,,542',
'542,,,,,,542,542,,796,,,796,,,796,796,,,796,,,542,,542,796,542,542,',
'542,542,542,542,542,796,542,,,,796,796,796,796,,796,796,796,796,,,,',
'796,796,,,,274,274,274,796,274,796,796,796,274,274,796,796,,274,,274',
'274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,',
',274,,,274,274,274,274,274,274,274,274,,274,274,274,,274,274,274,274',
'274,549,,,,,,,,,,,,,,,,549,549,,274,,,274,,,274,274,,,274,,,549,,549',
'274,549,549,,549,549,,,549,274,549,,,,274,274,274,274,,274,274,274,274',
',,,,274,274,,,,273,273,273,274,273,274,274,274,273,273,274,274,,273',
',273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273',
',,,,,,273,,,273,273,273,273,273,273,273,273,,273,273,273,,273,273,273',
'273,273,535,,,,,,,,,,,,,,,,535,535,,273,,,273,,,273,273,,,273,,,535',
',535,273,535,535,,535,535,,,,273,,,,,273,273,273,273,,273,273,273,273',
',,,,273,273,,,,272,272,272,273,272,273,273,273,272,272,273,273,,272',
',272,272,272,272,272,272,272,,,,,,272,272,272,272,272,272,272,,,272',
',,,,,,272,,,272,272,272,272,272,272,272,272,,272,272,272,,272,272,272',
'272,272,536,,,,,,,,,,,,,,,,536,536,,272,,,272,,,272,272,,,272,,,536',
',536,272,536,536,,536,536,,,,272,,,,,272,272,272,272,,272,272,272,272',
',,,,272,272,,,,,,,272,,272,272,272,32,,272,272,,,,32,32,32,,,32,32,32',
'537,32,,,,,,,,32,32,32,32,,,,537,537,,,,32,32,,32,32,32,32,32,,,,537',
',,,537,537,,537,537,,,,,,,,,,,32,32,32,32,32,32,32,32,32,32,32,32,32',
'32,,,32,32,32,,,32,,32,32,,,32,32,,32,,32,,32,,32,32,,32,32,32,32,32',
',32,32,32,,,,,,,,,,,,,,32,,,32,32,,32,,32,271,271,271,,271,,32,,271',
'271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271,271,271,271',
'271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271,,271,271,271,',
'271,271,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,,',
',,271,,,,,,,,,271,,,,,271,271,271,271,,271,271,271,271,,,,,271,271,',
',,,,,271,,271,271,271,33,,271,271,,,,33,33,33,,,33,33,33,,33,,,,,,,',
'33,,33,33,,,,,,,,,33,33,,33,33,33,33,33,,,,,,,,,,,,,,,,,,,,,,,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,,,33,33,33,,,33,,33,33,,,33,33,',
'33,,33,,33,,33,33,,33,33,33,33,33,,33,,33,,,,,,,,,,,,,,33,,,33,33,,33',
',33,954,954,954,,954,,33,,954,954,,,,954,,954,954,954,954,954,954,954',
',,,,,954,954,954,954,954,954,954,,,954,,,,,,,954,,,954,954,954,954,954',
'954,954,954,,954,954,954,,954,954,954,954,954,,,,,,,,,,,,,,,,,,,,954',
',,954,,,954,954,,,954,,,,,,954,,,,,,,,,954,,,,,954,954,954,954,,954',
'954,954,954,,,,,954,954,,,,960,960,960,954,960,954,954,954,960,960,954',
'954,,960,,960,960,960,960,960,960,960,,,,,,960,960,960,960,960,960,960',
',,960,,,,,,,960,,,960,960,960,960,960,960,960,960,,960,960,960,,960',
'960,960,960,960,,,,,,,,,,,,,,,,,,,,960,,,960,,,960,960,,,960,,,,,,960',
',,,,,,,,960,,,,,960,960,960,960,,960,960,960,960,,,,,960,960,,,,34,34',
'34,960,34,960,960,960,34,34,960,960,,34,,34,34,34,34,34,34,34,,,,,,34',
'34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34',
',34,34,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34',
',,34,,,,,,34,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,983,983,983,34',
'983,34,34,34,983,983,34,34,,983,,983,983,983,983,983,983,983,,,,,,983',
'983,983,983,983,983,983,,,983,,,,,,,983,,,983,983,983,983,983,983,983',
'983,,983,983,983,,983,983,983,983,983,,,,,,,,,,,,,,,,,,,,983,,,983,',
',983,983,,,983,,,,,,983,,,,,,,,,983,,,,,983,983,983,983,,983,983,983',
'983,,,,,983,983,,,,612,612,612,983,612,983,983,983,612,612,983,983,',
'612,,612,612,612,612,612,612,612,,,,,,612,612,612,612,612,612,612,,',
'612,,,,,,,612,,,612,612,612,612,612,612,612,612,612,612,612,612,,612',
'612,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,,612,612,,,612,,,,,,612',
',,612,,,,,,612,,,,,612,612,612,612,,612,612,612,612,,,,,612,612,,,,220',
'220,220,612,220,612,612,612,220,220,612,612,,220,,220,220,220,220,220',
'220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220',
'220,220,220,220,220,,220,220,220,,220,220,220,220,220,,,,,,,,,,,,,,',
',,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,,220,,,,,220,220,220',
'220,,220,220,220,220,,,,,220,220,,,,221,221,221,220,221,220,220,220',
'221,221,220,220,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221',
'221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221,221,221',
'221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221',
',,221,,221,,221,,221,,,221,,,,,,221,,,,,221,221,221,221,,221,221,221',
'221,,,,,221,221,,,,609,609,609,221,609,221,221,221,609,609,221,221,',
'609,,609,609,609,609,609,609,609,,,,,,609,609,609,609,609,609,609,,',
'609,,,,,,,609,,,609,609,609,609,609,609,609,609,609,609,609,609,,609',
'609,609,609,609,,,,,,,,,,,,,,,,,,,,609,,,609,,,609,609,,,609,,609,,',
',609,,,609,,,,,,609,,,,,609,609,609,609,,609,609,609,609,,,,,609,609',
',,,604,604,604,609,604,609,609,609,604,604,609,609,,604,,604,604,604',
'604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604,,,,,,,604,,,604',
'604,604,604,604,604,604,604,,604,604,604,,604,604,604,604,604,,,,,,',
',,,,,,,,,,,,,604,,,604,,,604,604,,,604,,,,,,604,,,,,,,,,604,,,,,604',
'604,604,604,,604,604,604,604,,,,,604,604,,,,601,601,601,604,601,604',
'604,604,601,601,604,604,,601,,601,601,601,601,601,601,601,,,,,,601,601',
'601,601,601,601,601,,,601,,,,,,,601,,,601,601,601,601,601,601,601,601',
',601,601,601,,601,601,601,601,601,,,,,,,,,,,,,,,,,,,,601,,,601,,,601',
'601,,,601,,,,,,601,,,,,,,,,601,,,,,601,601,601,601,,601,601,601,601',
',,,,601,601,,,,598,598,598,601,598,601,601,601,598,598,601,601,,598',
',598,598,598,598,598,598,598,,,,,,598,598,598,598,598,598,598,,,598',
',,,,,,598,,,598,598,598,598,598,598,598,598,,598,598,598,,598,598,598',
'598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,,,,,598,,,,,,',
',,598,,,,,598,598,598,598,,598,598,598,598,,,,,598,598,,,,236,236,236',
'598,236,598,598,598,236,236,598,598,,236,,236,236,236,236,236,236,236',
',,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236',
'236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236',
',,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236,,236',
'236,236,236,,,,,236,236,236,,,235,235,235,236,235,236,236,236,235,235',
'236,236,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235',
'235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,',
'235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,',
',,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235,',
',,588,588,588,235,588,235,235,235,588,588,235,235,,588,,588,588,588',
'588,588,588,588,,,,,,588,588,588,588,588,588,588,,,588,,,,,,,588,,,588',
'588,588,588,588,588,588,588,588,588,588,588,,588,588,588,588,588,,,',
',,,,,,,,,,,,,,,,588,,,588,,,588,588,,,588,,588,,588,,588,,,588,,,,,',
'588,,,,,588,588,588,588,,588,588,588,588,,,,,588,588,,,,234,234,234',
'588,234,588,588,588,234,234,588,588,,234,,234,234,234,234,234,234,234',
',,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234',
'234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234,234,,234',
'234,234,234,,,,,234,234,,,,,,,234,,234,234,234,,,234,234,578,578,578',
'578,578,,,,578,578,,,,578,,578,578,578,578,578,578,578,,,,,,578,578',
'578,578,578,578,578,,,578,,,,,,578,578,578,578,578,578,578,578,578,578',
'578,578,,578,578,578,,578,578,578,578,578,,,,,,,,,,,,,,,,,,,,578,,,578',
',,578,578,,,578,,578,,,,578,,,,,,,,,578,,,,,578,578,578,578,,578,578',
'578,578,,,,,578,578,,,,,,578,578,,578,578,578,,,578,578,572,572,572',
',572,,,,572,572,,,,572,,572,572,572,572,572,572,572,,,,,,572,572,572',
'572,572,572,572,,,572,,,,,,,572,,,572,572,572,572,572,572,572,572,,572',
'572,572,,572,572,572,572,572,,,,,,,,,,,,,,,,,,,,572,,,572,,,572,572',
',,572,,,,,,572,,,,,,,,,572,,,,,572,572,572,572,,572,572,572,572,,,,',
'572,572,,,,570,570,570,572,570,572,572,572,570,570,572,572,,570,,570',
'570,570,570,570,570,570,,,,,,570,570,570,570,570,570,570,,,570,,,,,',
',570,,,570,570,570,570,570,570,570,570,570,570,570,570,,570,570,570',
'570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,570,,570,,,570',
',,,,,570,,,,,570,570,570,570,,570,570,570,570,,,,,570,570,,,,873,873',
'873,570,873,570,570,570,873,873,570,570,,873,,873,873,873,873,873,873',
'873,,,,,,873,873,873,873,873,873,873,,,873,,,,,,,873,,,873,873,873,873',
'873,873,873,873,,873,873,873,,873,873,873,873,873,,,,,,,,,,,,,,,,,,',
',873,,,873,,,873,873,,,873,,,,,,873,,,,,,,,,873,,,,,873,873,873,873',
',873,873,873,873,,,,,873,873,,,,568,568,568,873,568,873,873,873,568',
'568,873,873,,568,,568,568,568,568,568,568,568,,,,,,568,568,568,568,568',
'568,568,,,568,,,,,,,568,,,568,568,568,568,568,568,568,568,568,568,568',
'568,,568,568,568,568,568,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,568,,,568',
',568,,568,,568,,,568,,,,,,568,,,,,568,568,568,568,,568,568,568,568,',
',,,568,568,,,,,,,568,,568,568,568,553,,568,568,,,,553,553,553,,,553',
'553,553,970,553,970,970,970,970,970,,,553,553,553,,,,970,,,,,,553,553',
',553,553,553,553,553,1138,,1138,1138,1138,1138,1138,1229,970,1229,1229',
'1229,1229,1229,,1138,,970,970,970,970,,1229,,970,,642,,642,642,642,642',
'642,553,,,,1138,,,553,642,,,1229,553,553,,1138,1138,970,,,1138,,1229',
'1229,,,,1229,,,642,,,,,553,553,,,642,642,642,642,,,,642,,,,553,,,553',
',558,558,558,553,558,,,,558,558,553,,,558,,558,558,558,558,558,558,558',
',,,,,558,558,558,558,558,558,558,,,558,,,,,,,558,,,558,558,558,558,558',
'558,558,558,,558,558,558,,558,558,558,558,558,,,,,,,,,,,,,,,,,,,,558',
',,558,,,558,558,,,558,,,,,,558,,,,,,,,,558,,,,,558,558,558,558,,558',
'558,558,558,,,,,558,558,,,,303,303,303,558,303,558,558,558,303,303,558',
'558,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303,303,303,303',
',,303,,,,,,,303,,,303,303,303,303,303,303,303,303,303,303,303,303,,303',
'303,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303,,303,,303',
',303,,,303,,,,,,303,,,,,303,303,303,303,,303,303,303,303,,,,,303,303',
',,,886,886,886,303,886,303,303,303,886,886,303,303,,886,,886,886,886',
'886,886,886,886,,,,,,886,886,886,886,886,886,886,,,886,,,,,,,886,,,886',
'886,886,886,886,886,886,886,,886,886,886,,886,886,886,886,886,,,,,,',
',,,,,,,,,,,,,886,,,886,,,886,886,,,886,,,,,,886,,,,,,,,,886,,,,,886',
'886,886,886,,886,886,886,886,,,,,886,886,,,,887,887,887,886,887,886',
'886,886,887,887,886,886,,887,,887,887,887,887,887,887,887,,,,,,887,887',
'887,887,887,887,887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887',
',887,887,887,,887,887,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887',
'887,,,887,,,,,,887,,,,,,,,,887,,,,,887,887,887,887,,887,887,887,887',
',,,,887,887,,,,304,304,304,887,304,887,887,887,304,304,887,887,,304',
',304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304',
',,,,,,304,,,304,304,304,304,304,304,304,304,304,304,304,304,,304,304',
'304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,304,,304,',
'304,,,304,,,,,,304,,,,,304,304,304,304,,304,304,304,304,,,,,304,304',
',,,312,312,312,304,312,304,304,304,312,312,304,304,,312,,312,312,312',
'312,312,312,312,,,,,,312,312,312,312,312,312,312,,,312,,,,,,,312,,,312',
'312,312,312,312,312,312,312,312,312,312,312,,312,312,312,312,312,,,',
',,,,,,,,,,,,,,,,312,,,312,,,312,312,,,312,,312,,312,,312,,,312,,,,,',
'312,,,,,312,312,312,312,,312,312,312,312,,,,,312,312,312,,,319,319,319',
'312,319,312,312,312,319,319,312,312,,319,,319,319,319,319,319,319,319',
',,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319,319,319,319,319',
'319,319,319,,319,319,319,,319,319,319,319,319,,,,,,,,,,,,,,,,,,,,319',
',,319,,,319,319,,,319,,,,,,319,,,,,,,,,319,,,,,319,319,319,319,,319',
'319,319,319,,,,,319,319,,,,321,321,321,319,321,319,319,319,321,321,319',
'319,,321,,321,321,321,321,321,321,321,,,,,,321,321,321,321,321,321,321',
',,321,,,,,,,321,,,321,321,321,321,321,321,321,321,,321,321,321,,321',
'321,321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,,,,,321',
',,,,,,,,321,,,,,321,321,321,321,,321,321,321,321,,,,,321,321,,,,324',
'324,324,321,324,321,321,321,324,324,321,321,,324,,324,324,324,324,324',
'324,324,,,,,,324,324,324,324,324,324,324,,,324,,,,,,,324,,,324,324,324',
'324,324,324,324,324,,324,324,324,,324,324,324,324,324,,,,,,,,,,,,,,',
',,,,,324,,,324,,,324,324,,,324,,,,,,324,,,,,,,,,324,,,,,324,324,324',
'324,,324,324,324,324,,,,,324,324,,,,325,325,325,324,325,324,324,324',
'325,325,324,324,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325',
'325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,,325,325',
'325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,,,325,325,,,325',
',,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325,325,,,,,325,325',
',,,,,,325,,325,325,325,,,325,325,330,330,330,330,330,,,,330,330,,,,330',
',330,330,330,330,330,330,330,,,,,,330,330,330,330,330,330,330,,,330',
',,,,,330,330,,330,330,330,330,330,330,330,330,330,,330,330,330,,330',
'330,330,330,330,,,,,,,,,,,,,,,,,,,,330,,,330,,,330,330,,,330,,330,,',
',330,,,,,,,,,330,,,,,330,330,330,330,,330,330,330,330,,,,,330,330,,',
',280,280,280,330,280,330,330,330,280,280,330,330,,280,,280,280,280,280',
'280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,,,280,,,280,280',
'280,280,280,280,280,280,,280,280,280,,280,280,280,280,280,,,,,,,,,,',
',,,,,,,,,280,,,280,,,280,280,,,280,,,,,,280,,,,,,,,,280,,,,,280,280',
'280,280,,280,280,280,280,,,,,280,280,,,,915,915,915,280,915,280,280',
'280,915,915,280,280,,915,,915,915,915,915,915,915,915,,,,,,915,915,915',
'915,915,915,915,,,915,,,,,,,915,,,915,915,915,915,915,915,915,915,,915',
'915,915,,915,915,915,915,915,,,,,,,,,,,,,,,,,,,,915,,,915,,,915,915',
',,915,,,,,,915,,,,,,,,,915,,,,,915,915,915,915,,915,915,915,915,,,,',
'915,915,,,,916,916,916,915,916,915,915,915,916,916,915,915,,916,,916',
'916,916,916,916,916,916,,,,,,916,916,916,916,916,916,916,,,916,,,,,',
',916,,,916,916,916,916,916,916,916,916,,916,916,916,,916,916,916,916',
'916,,,,,,,,,,,,,,,,,,,,916,,,916,,,916,916,,,916,,,,,,916,,,,,,,,,916',
',,,,916,916,916,916,,916,916,916,916,,,,,916,916,,,,917,917,917,916',
'917,916,916,916,917,917,916,916,,917,,917,917,917,917,917,917,917,,',
',,,917,917,917,917,917,917,917,,,917,,,,,,,917,,,917,917,917,917,917',
'917,917,917,,917,917,917,,917,917,917,917,917,,,,,,,,,,,,,,,,,,,,917',
',,917,,,917,917,,,917,,,,,,917,,,,,,,,,917,,,,,917,917,917,917,,917',
'917,917,917,,,,,917,917,,,,918,918,918,917,918,917,917,917,918,918,917',
'917,,918,,918,918,918,918,918,918,918,,,,,,918,918,918,918,918,918,918',
',,918,,,,,,,918,,,918,918,918,918,918,918,918,918,,918,918,918,,918',
'918,918,918,918,,,,,,,,,,,,,,,,,,,,918,,,918,,,918,918,,,918,,,,,,918',
',,,,,,,,918,,,,,918,918,918,918,,918,918,918,918,,,,,918,918,,,,919',
'919,919,918,919,918,918,918,919,919,918,918,,919,,919,919,919,919,919',
'919,919,,,,,,919,919,919,919,919,919,919,,,919,,,,,,,919,,,919,919,919',
'919,919,919,919,919,,919,919,919,,919,919,919,919,919,,,,,,,,,,,,,,',
',,,,,919,,,919,,,919,919,,,919,,,,,,919,,,,,,,,,919,,,,,919,919,919',
'919,,919,919,919,919,,,,,919,919,,,,920,920,920,919,920,919,919,919',
'920,920,919,919,,920,,920,920,920,920,920,920,920,,,,,,920,920,920,920',
'920,920,920,,,920,,,,,,,920,,,920,920,920,920,920,920,920,920,,920,920',
'920,,920,920,920,920,920,,,,,,,,,,,,,,,,,,,,920,,,920,,,920,920,,,920',
',,,,,920,,,,,,,,,920,,,,,920,920,920,920,,920,920,920,920,,,,,920,920',
',,,275,275,275,920,275,920,920,920,275,275,920,920,,275,,275,275,275',
'275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275',
'275,275,275,275,275,275,275,,275,275,275,,275,275,275,275,275,,,,,,',
',,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,,275,,,,,275',
'275,275,275,,275,275,275,275,,,,,275,275,,,,799,799,799,275,799,275',
'275,275,799,799,275,275,,799,,799,799,799,799,799,799,799,,,,,,799,799',
'799,799,799,799,799,,,799,,,,,,,799,,,799,799,799,799,799,799,799,799',
',799,799,799,,799,799,799,799,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799',
'799,,,799,,,,,,799,,,,,,,,,799,,,,,799,799,799,799,,799,799,799,799',
',,,,799,799,,,,988,988,988,799,988,799,799,799,988,988,799,799,,988',
',988,988,988,988,988,988,988,,,,,,988,988,988,988,988,988,988,,,988',
',,,,,,988,,,988,988,988,988,988,988,988,988,,988,988,988,,988,988,988',
'988,988,,,,,,,,,,,,,,,,,,,,988,,,988,,,988,988,,,988,,988,,,,988,,,',
',,,,,988,,,,,988,988,988,988,,988,988,988,988,,,,,988,988,,,,35,35,35',
'988,35,988,988,988,35,35,988,988,,35,,35,35,35,35,35,35,35,,,,,,35,35',
'35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,',
'35,35,35,35,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,35,,35,,35,',
',35,,,,,,35,,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,270,270,270,35',
'270,35,35,35,270,270,35,35,,270,,270,270,270,270,270,270,270,,,,,,270',
'270,270,270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270',
'270,,270,270,270,,270,270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,',
',270,270,,,270,,,,,,270,,,,,,,,,270,,,,,270,270,270,270,,270,270,270',
'270,,,,,270,270,,,,36,36,36,270,36,270,270,270,36,36,270,270,,36,,36',
'36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36',
'36,36,36,36,36,36,36,36,36,,36,36,36,36,36,,,,,,,,,,,,,,,,,,,,36,,,36',
',,36,36,,,36,,36,,36,,36,,,36,,,,,,36,,,,,36,36,36,36,,36,36,36,36,',
',,,36,36,,,,787,787,787,36,787,36,36,36,787,787,36,36,,787,,787,787',
'787,787,787,787,787,,,,,,787,787,787,787,787,787,787,,,787,,,,,,,787',
',,787,787,787,787,787,787,787,787,787,787,787,787,,787,787,787,787,787',
',,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,787,,787,,787,,,787,,',
',,,787,,,,,787,787,787,787,,787,787,787,787,,,,,787,787,,,,1007,1007',
'1007,787,1007,787,787,787,1007,1007,787,787,,1007,,1007,1007,1007,1007',
'1007,1007,1007,,,,,,1007,1007,1007,1007,1007,1007,1007,,,1007,,,,,,',
'1007,,,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,',
'1007,1007,1007,1007,1007,,,,,,,,,,,,,,,,,,,,1007,,,1007,,,1007,1007',
',,1007,,,,1007,,1007,,,1007,,,,,,1007,,,,,1007,1007,1007,1007,,1007',
'1007,1007,1007,,,,,1007,1007,,,,845,845,845,1007,845,1007,1007,1007',
'845,845,1007,1007,,845,,845,845,845,845,845,845,845,,,,,,845,845,845',
'845,845,845,845,,,845,,,,,,,845,,,845,845,845,845,845,845,845,845,,845',
'845,845,,845,845,845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845,845',
',,845,,,,,,845,,,,,,,,,845,,,,,845,845,845,845,,845,845,845,845,,,,',
'845,845,,,,269,269,269,845,269,845,845,845,269,269,845,845,,269,,269',
'269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,',
',269,,,269,269,269,269,269,269,269,269,,269,269,269,,269,269,269,269',
'269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,,269',
',,,,269,269,269,269,,269,269,269,269,,,,,269,269,,,,268,268,268,269',
'268,269,269,269,268,268,269,269,,268,,268,268,268,268,268,268,268,,',
',,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268',
'268,268,268,,268,268,268,,268,268,268,268,268,,,,,,,,,,,,,,,,,,,,268',
',,268,,,268,268,,,268,,,,,,268,,,,,,,,,268,,,,,268,268,268,268,,268',
'268,268,268,,,,,268,268,,,,296,296,296,268,296,268,268,268,296,296,268',
'268,,296,,296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296',
',,296,,,,,,,296,,,296,296,296,296,296,296,296,296,,296,296,296,,296',
'296,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,,,,,296',
',,,,,,,,296,,,,,296,296,296,296,,296,296,296,296,,,,,296,296,,,,1034',
'1034,1034,296,1034,296,296,296,1034,1034,296,296,,1034,,1034,1034,1034',
'1034,1034,1034,1034,,,,,,1034,1034,1034,1034,1034,1034,1034,,,1034,',
',,,,,1034,,,1034,1034,1034,1034,1034,1034,1034,1034,,1034,1034,1034',
',1034,1034,1034,1034,1034,,,,,,,,,,,,,,,,,,,,1034,,,1034,,,1034,1034',
',,1034,,,,,,1034,,,,,,,,,1034,,,,,1034,1034,1034,1034,,1034,1034,1034',
'1034,,,,,1034,1034,,,,267,267,267,1034,267,1034,1034,1034,267,267,1034',
'1034,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,',
'267,267,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,',
',,267,,,,,,,,,267,,,,,267,267,267,267,,267,267,267,267,,,,,267,267,',
',,266,266,266,267,266,267,267,267,266,266,267,267,,266,,266,266,266',
'266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266',
'266,266,266,266,266,266,266,,266,266,266,,266,266,266,266,266,,,,,,',
',,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,,266,,,,,266',
'266,266,266,,266,266,266,266,,,,,266,266,,,,265,265,265,266,265,266',
'266,266,265,265,266,266,,265,,265,265,265,265,265,265,265,,,,,,265,265',
'265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265',
',265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265',
'265,,,265,,,,,,265,,,,,,,,,265,,,,,265,265,265,265,,265,265,265,265',
',,,,265,265,,,,366,366,366,265,366,265,265,265,366,366,265,265,,366',
',366,366,366,366,366,366,366,,,,,,366,366,366,366,366,366,366,,,366',
',,,,,,366,,,366,366,366,366,366,366,366,366,,366,366,366,,366,366,366',
'366,366,,,,,,,,,,,,,,,,,,,,366,,,366,,,366,366,,,366,,,,,,366,,,,,,',
',,366,,,,,366,366,366,366,,366,366,366,366,,,,,366,366,,,,264,264,264',
'366,264,366,366,366,264,264,366,366,,264,,264,264,264,264,264,264,264',
',,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264',
'264,264,264,,264,264,264,,264,264,264,264,264,,,,,,,,,,,,,,,,,,,,264',
',,264,,,264,264,,,264,,,,,,264,,,,,,,,,264,,,,,264,264,264,264,,264',
'264,264,264,,,,,264,264,,,,368,368,368,264,368,264,264,264,368,368,264',
'264,,368,,368,368,368,368,368,368,368,,,,,,368,368,368,368,368,368,368',
',,368,,,,,,,368,,,368,368,368,368,368,368,368,368,,368,368,368,,368',
'368,368,368,368,,,,,,,,,,,,,,,,,,,,368,,,368,368,,368,368,,,368,,,,',
',368,,,,,,,,,368,,,,,368,368,368,368,,368,368,368,368,,,,,368,368,,',
',46,46,46,368,46,368,368,368,46,46,368,368,,46,,46,46,46,46,46,46,46',
',,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46',
'46,46,,46,46,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46',
',,,,,,,,46,,,,,46,46,46,46,,46,46,46,46,,,,,46,46,,,,263,263,263,46',
'263,46,46,46,263,263,46,46,,263,,263,263,263,263,263,263,263,,,,,,263',
'263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263',
'263,,263,263,263,,263,263,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,',
',263,263,,,263,,,,,,263,,,,,,,,,263,,,,,263,263,263,263,,263,263,263',
'263,,,,,263,263,,,,732,732,732,263,732,263,263,263,732,732,263,263,',
'732,,732,732,732,732,732,732,732,,,,,,732,732,732,732,732,732,732,,',
'732,,,,,,,732,,,732,732,732,732,732,732,732,732,,732,732,732,,732,732',
'732,732,732,,,,,,,,,,,,,,,,,,,,732,,,732,,,732,732,,,732,,,,,,732,,',
',,,,,,732,,,,,732,732,732,732,,732,732,732,732,,,,,732,732,,,,47,47',
'47,732,47,732,732,732,47,47,732,732,,47,,47,47,47,47,47,47,47,,,,,,47',
'47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47',
',47,47,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,',
',,,,47,,,,,47,47,47,47,,47,47,47,47,,,,,47,47,,,,731,731,731,47,731',
'47,47,47,731,731,47,47,,731,,731,731,731,731,731,731,731,,,,,,731,731',
'731,731,731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731,731',
',731,731,731,,731,731,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731',
'731,,,731,,,,,,731,,,,,,,,,731,,,,,731,731,731,731,,731,731,731,731',
',,,,731,731,,,,49,49,49,731,49,731,731,731,49,49,731,731,,49,,49,49',
'49,49,49,49,49,,,,,,49,49,49,49,49,49,49,,,49,,,,,,,49,,,49,49,49,49',
'49,49,49,49,,49,49,49,,49,49,49,49,49,,,,,,,,,,,,,,,,,,,,49,,,49,,,49',
'49,,,49,,,,,,49,,,,,,,,,49,,,,,49,49,49,49,,49,49,49,49,,,,,49,49,,',
',262,262,262,49,262,49,49,49,262,262,49,49,,262,,262,262,262,262,262',
'262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262',
'262,262,262,262,262,,262,262,262,,262,262,262,262,262,,,,,,,,,,,,,,',
',,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,,262,,,,,262,262,262',
'262,,262,262,262,262,,,,,262,262,,,,865,865,865,262,865,262,262,262',
'865,865,262,262,,865,,865,865,865,865,865,865,865,,,,,,865,865,865,865',
'865,865,865,,,865,,,,,,,865,,,865,865,865,865,865,865,865,865,,865,865',
'865,,865,865,865,865,865,,,,,,,,,,,,,,,,,,,,865,,,865,,,865,865,,,865',
',,,,,865,,,,,,,,,865,,,,,865,865,865,865,,865,865,865,865,,,,,865,865',
',,,383,383,383,865,383,865,865,865,383,383,865,865,,383,,383,383,383',
'383,383,383,383,,,,,,383,383,383,383,383,383,383,,,383,,,,,,,383,,,383',
'383,383,383,383,383,383,383,,383,383,383,,383,383,383,383,383,,,,,,',
',,,,,,,,,,,,,383,,,383,,,383,383,,,383,,,,,,383,,,,,,,,,383,,,,,383',
'383,383,383,,383,383,383,383,,,,,383,383,,,,261,261,261,383,261,383',
'383,383,261,261,383,383,,261,,261,261,261,261,261,261,261,,,,,,261,261',
'261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261',
',261,261,261,,261,261,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261',
'261,,,261,,,,,,261,,,,,,,,,261,,,,,261,261,261,261,,261,261,261,261',
',,,,261,261,,,,260,260,260,261,260,261,261,261,260,260,261,261,,260',
',260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260',
',,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,260',
'260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,',
',,260,,,,,260,260,260,260,,260,260,260,260,,,,,260,260,,,,259,259,259',
'260,259,260,260,260,259,259,260,260,,259,,259,259,259,259,259,259,259',
',,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259',
'259,259,259,,259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,,,,,,,259',
',,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259,259,259,259,,259',
'259,259,259,,,,,259,259,,,,258,258,258,259,258,259,259,259,258,258,259',
'259,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258',
',,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258',
'258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258',
',,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,706',
'706,706,258,706,258,258,258,706,706,258,258,,706,,706,706,706,706,706',
'706,706,,,,,,706,706,706,706,706,706,706,,,706,,,,,,,706,,,706,706,706',
'706,706,706,706,706,,706,706,706,,706,706,706,706,706,,,,,,,,,,,,,,',
',,,,,706,,,706,,,706,706,,,706,,,,,,706,,,,,,,,,706,,,,,706,706,706',
'706,,706,706,706,706,,,,,706,706,,,,692,692,692,706,692,706,706,706',
'692,692,706,706,,692,,692,692,692,692,692,692,692,,,,,,692,692,692,692',
'692,692,692,,,692,,,,,,,692,,,692,692,692,692,692,692,692,692,,692,692',
'692,,692,692,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692,692,,,692',
',692,,,,692,,,,,,,,,692,,,,,692,692,692,692,,692,692,692,692,,,,,692',
'692,,,,50,50,50,692,50,692,692,692,50,50,692,692,,50,,50,50,50,50,50',
'50,50,,,,,,50,50,50,50,50,50,50,,,50,,,,,,,50,,,50,50,50,50,50,50,50',
'50,,50,50,50,,50,50,50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,,50,50,,,50',
',,,,,50,,,,,,,,,50,,,,,50,50,50,50,,50,50,50,50,,,,,50,50,,,,24,24,24',
'50,24,50,50,50,24,24,50,50,,24,,24,24,24,24,24,24,24,,,,,,24,24,24,24',
'24,24,24,,,24,,,,,,,24,,,24,24,24,24,24,24,24,24,,24,24,24,,24,24,24',
'24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24,24,,,24,,,,,,24,,,,,,,,,24,,,',
',24,24,24,24,,24,24,24,24,,,,,24,24,,,,257,257,257,24,257,24,24,24,257',
'257,24,24,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257',
',257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,1147,1147,1147,257,1147,257,257,257,1147,1147,257,257,,1147,,1147',
'1147,1147,1147,1147,1147,1147,,,,,,1147,1147,1147,1147,1147,1147,1147',
',,1147,,,,,,,1147,,,1147,1147,1147,1147,1147,1147,1147,1147,,1147,1147',
'1147,,1147,1147,1147,1147,1147,,,,,,,,,,,,,,,,,,,,1147,,,1147,,,1147',
'1147,,,1147,,,,,,1147,,,,,,,,,1147,,,,,1147,1147,1147,1147,,1147,1147',
'1147,1147,,,,,1147,1147,,,,1148,1148,1148,1147,1148,1147,1147,1147,1148',
'1148,1147,1147,,1148,,1148,1148,1148,1148,1148,1148,1148,,,,,,1148,1148',
'1148,1148,1148,1148,1148,,,1148,,,,,,,1148,,,1148,1148,1148,1148,1148',
'1148,1148,1148,,1148,1148,1148,,1148,1148,1148,1148,1148,,,,,,,,,,,',
',,,,,,,,1148,,,1148,,,1148,1148,,,1148,,,,,,1148,,,,,,,,,1148,,,,,1148',
'1148,1148,1148,,1148,1148,1148,1148,,,,,1148,1148,,,,1160,1160,1160',
'1148,1160,1148,1148,1148,1160,1160,1148,1148,,1160,,1160,1160,1160,1160',
'1160,1160,1160,,,,,,1160,1160,1160,1160,1160,1160,1160,,,1160,,,,,,',
'1160,,,1160,1160,1160,1160,1160,1160,1160,1160,1160,1160,1160,1160,',
'1160,1160,1160,1160,1160,,,,,,,,,,,,,,,,,,,,1160,,,1160,,,1160,1160',
',,1160,,1160,,1160,,1160,,,1160,,,,,,1160,,,,,1160,1160,1160,1160,,1160',
'1160,1160,1160,,,,,1160,1160,,,,256,256,256,1160,256,1160,1160,1160',
'256,256,1160,1160,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256,256,,,,',
'256,256,,,,255,255,255,256,255,256,256,256,255,255,256,256,,255,,255',
'255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,',
',255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255,255,255',
'255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255',
',,,,255,255,255,255,,255,255,255,255,,,,,255,255,,,,686,686,686,255',
'686,255,255,255,686,686,255,255,,686,,686,686,686,686,686,686,686,,',
',,,686,686,686,686,686,686,686,,,686,,,,,,,686,,,686,686,686,686,686',
'686,686,686,,686,686,686,,686,686,686,686,686,,,,,,,,,,,,,,,,,,,,686',
',,686,,,686,686,,,686,,,,,,686,,,,,,,,,686,,,,,686,686,686,686,,686',
'686,686,686,,,,,686,686,,,,52,52,52,686,52,686,686,686,52,52,686,686',
',52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52,52,,,52,,,,,,,52,,',
'52,52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52,,,,,,,,,,,,,,,,,,',
',52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,,52,,,,,52,52,52,52,,52,52,52,52',
',,,,52,52,,,,,,,52,,52,52,52,,,52,52,7,7,7,7,7,,,,7,7,,,,7,,7,7,7,7',
'7,7,7,,,,,,7,7,7,7,7,7,7,,,7,,,,,,7,7,7,7,7,7,7,7,7,7,7,7,,7,7,7,,7',
'7,7,7,7,,,,,,,,,,,,,,,,,,,,7,,,7,,,7,7,,,7,,7,,,,7,,,,,,,,,7,,,,,7,7',
'7,7,,7,7,7,7,,,,,7,7,,,,685,685,685,7,685,7,7,7,685,685,7,7,,685,,685',
'685,685,685,685,685,685,,,,,,685,685,685,685,685,685,685,,,685,,,,,',
',685,,,685,685,685,685,685,685,685,685,,685,685,685,,685,685,685,685',
'685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,685,,,685,,,,,,685,,,,,,,,,685',
',,,,685,685,685,685,,685,685,685,685,,,,,685,685,,,,404,404,404,685',
'404,685,685,685,404,404,685,685,,404,,404,404,404,404,404,404,404,,',
',,,404,404,404,404,404,404,404,,,404,,,,,,,404,,,404,404,404,404,404',
'404,404,404,,404,404,404,,404,404,404,404,404,,,,,,,,,,,,,,,,,,,,404',
',,404,,,404,404,,,404,,,,,,404,,,,,,,,,404,,,,,404,404,404,404,,404',
'404,404,404,,,,,404,404,,,,254,254,254,404,254,404,404,404,254,254,404',
'404,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254',
',,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254',
'254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254',
',,,,,,,,254,,,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,681',
'681,681,254,681,254,254,254,681,681,254,254,,681,,681,681,681,681,681',
'681,681,,,,,,681,681,681,681,681,681,681,,,681,,,,,,,681,,,681,681,681',
'681,681,681,681,681,,681,681,681,,681,681,681,681,681,,,,,,,,,,,,,,',
',,,,,681,,,681,,,681,681,,,681,,,,,,681,,,,,,,,,681,,,,,681,681,681',
'681,,681,681,681,681,,,,,681,681,,,,680,680,680,681,680,681,681,681',
'680,680,681,681,,680,,680,680,680,680,680,680,680,,,,,,680,680,680,680',
'680,680,680,,,680,,,,,,,680,,,680,680,680,680,680,680,680,680,,680,680',
'680,,680,680,680,680,680,,,,,,,,,,,,,,,,,,,,680,,,680,,,680,680,,,680',
',,,,,680,,,,,,,,,680,,,,,680,680,680,680,,680,680,680,680,,,,,680,680',
',,,679,679,679,680,679,680,680,680,679,679,680,680,,679,,679,679,679',
'679,679,679,679,,,,,,679,679,679,679,679,679,679,,,679,,,,,,,679,,,679',
'679,679,679,679,679,679,679,679,679,679,679,,679,679,679,679,679,,,',
',,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679,,,,679,,679,,,679,,,,,,679',
',,,,679,679,679,679,,679,679,679,679,,,,,679,679,,,,678,678,678,679',
'678,679,679,679,678,678,679,679,,678,,678,678,678,678,678,678,678,,',
',,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678',
'678,678,678,678,678,678,678,,678,678,678,678,678,,,,,,,,,,,,,,,,,,,',
'678,,,678,,,678,678,,,678,,678,,678,,678,,,678,,,,,,678,,,,,678,678',
'678,678,,678,678,678,678,,,,,678,678,,,,675,675,675,678,675,678,678',
'678,675,675,678,678,,675,,675,675,675,675,675,675,675,,,,,,675,675,675',
'675,675,675,675,,,675,,,,,,,675,,,675,675,675,675,675,675,675,675,,675',
'675,675,,675,675,675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675',
',,675,,,,,,675,,,,,,,,,675,,,,,675,675,675,675,,675,675,675,675,,,,',
'675,675,,,,,,,675,,675,675,675,,,675,675,674,674,674,674,674,,,,674',
'674,,,,674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674',
'674,,,674,,,,,,674,674,,674,674,674,674,674,674,674,674,674,,674,674',
'674,,674,674,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674',
',674,,,,674,,,,,,,,,674,,,,,674,674,674,674,,674,674,674,674,,,,,674',
'674,,,,671,671,671,674,671,674,674,674,671,671,674,674,,671,,671,671',
'671,671,671,671,671,,,,,,671,671,671,671,671,671,671,,,671,,,,,,,671',
',,671,671,671,671,671,671,671,671,671,671,671,671,,671,671,671,671,671',
',,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,671,,671,,671,,,671,,',
',,,671,,,,,671,671,671,671,,671,671,671,671,,,,,671,671,,,,670,670,670',
'671,670,671,671,671,670,670,671,671,,670,,670,670,670,670,670,670,670',
',,,,,670,670,670,670,670,670,670,,,670,,,,,,,670,,,670,670,670,670,670',
'670,670,670,,670,670,670,,670,670,670,670,670,,,,,,,,,,,,,,,,,,,,670',
',,670,,,670,670,,,670,,,,,,670,,,,,,,,,670,,,,,670,670,670,670,,670',
'670,670,670,,,,,670,670,,,,669,669,669,670,669,670,670,670,669,669,670',
'670,,669,,669,669,669,669,669,669,669,,,,,,669,669,669,669,669,669,669',
',,669,,,,,,,669,,,669,669,669,669,669,669,669,669,,669,669,669,,669',
'669,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669,,,669,,669,,',
',669,,,,,,,,,669,,,,,669,669,669,669,,669,669,669,669,,,,,669,669,,',
',,,,669,,669,669,669,64,,669,669,,,,64,64,64,,,64,64,64,,64,,,,,,,,64',
',64,64,64,,,,948,948,948,948,64,64,,64,64,64,64,64,,,,,948,948,948,',
',,,,,,,,,948,948,,,948,64,64,64,64,64,64,64,64,64,64,64,64,64,64,,,64',
'64,64,,,64,,,64,,,64,64,,64,,64,,64,,64,64,,64,64,64,64,64,,64,,64,',
'948,948,948,948,,948,948,948,948,,,,64,948,948,64,64,64,64,,64,948,64',
'948,948,948,,64,66,66,66,66,66,,,,66,66,,,,66,,66,66,66,66,66,66,66',
',,,,,66,66,66,66,66,66,66,,,66,,,,,,66,66,,66,66,66,66,66,66,66,66,66',
',66,66,66,,66,66,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,66',
',,,66,,,,,,,,,66,,,,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,67,67,67',
'66,67,66,66,66,67,67,66,66,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67',
'67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,67,67,67,67,,67,67',
'67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,67,,,,67,,,67,,,,',
',67,,,,,67,67,67,67,,67,67,67,67,,,,,67,67,,,,68,68,68,67,68,67,67,67',
'68,68,67,67,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68',
',,,,,,68,,,68,68,68,68,68,68,68,68,68,68,68,68,,68,68,68,68,68,,,,,',
',,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,68,,,,,,68,,,,,68,68,68',
'68,,68,68,68,68,,,,,68,68,,,,433,433,433,68,433,68,68,68,433,433,68',
'68,,433,,433,433,433,433,433,433,433,,,,,,433,433,433,433,433,433,433',
',,433,,,,,,,433,,,433,433,433,433,433,433,433,433,,433,433,433,,433',
'433,433,433,433,,,,,,,,,,,,,,,,,,,,433,,,433,,,433,433,,,433,,,,,,433',
',,,,,,,,433,,,,,433,433,433,433,,433,433,433,433,,,,,433,433,,,,71,71',
'71,433,71,433,433,433,71,71,433,433,,71,,71,71,71,71,71,71,71,,,,,,71',
'71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71',
',71,71,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,',
',,,,71,,,,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,72,72,72,71,72,71,71',
'71,72,72,71,71,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,',
',72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,72,72,72,,,',
',,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,,,,,72,,,,,,,,,72,,,,,72,72,72',
'72,,72,72,72,72,,,,,72,72,,,,75,75,75,72,75,72,72,72,75,75,72,72,,75',
',75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75,75,,,75,,,,,,,75,,,75,75',
'75,75,75,75,75,75,,75,75,75,,75,75,75,75,75,,,,,,,,,,,,,,,,,,,,75,,',
'75,,,75,75,,,75,,,,,,75,,,,,,,,,75,,,,,75,75,75,75,,75,75,75,75,,,,',
'75,75,75,,,,,75,75,,75,75,75,,,75,75,667,667,667,667,667,,,,667,667',
',,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667,667',
',,667,,,,,,667,667,,667,667,667,667,667,667,667,667,667,,667,667,667',
',667,667,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,667',
',,,667,,,,,,,,,667,,,,,667,667,667,667,,667,667,667,667,,,,,667,667',
',,,,,,667,,667,667,667,457,,667,667,,,,457,457,457,,,457,457,457,,457',
',,,,,,,457,457,457,457,,,,,,,,,457,457,,457,457,457,457,457,,,,,,,,',
',,,,,,,,,,,,,,457,457,457,457,457,457,457,457,457,457,457,457,457,457',
',,457,457,457,,,457,,457,457,,,457,457,,457,,457,,457,,457,457,,457',
'457,457,457,457,,457,457,457,1212,,1212,1212,1212,1212,1212,,,,,,,457',
',1212,457,457,466,457,,457,,,,466,466,466,457,,466,466,466,,466,,,1212',
',,,,466,466,466,466,466,,1212,1212,,,,1212,466,466,,466,466,466,466',
'466,,,,,,,,,,,,,,,,,,,,,,,466,466,466,466,466,466,466,466,466,466,466',
'466,466,466,,,466,466,466,,,466,,,466,,,466,466,,466,,466,,466,,466',
'466,,466,466,466,466,466,,466,466,466,,,,,,,,,,,,,,466,,,466,466,466',
'466,,466,467,466,,,,,466,467,467,467,,,467,467,467,,467,,,,,,,,467,467',
'467,467,467,,,,,,,,467,467,,467,467,467,467,467,,,,,,,,,,,,,,,,,,,,',
',,467,467,467,467,467,467,467,467,467,467,467,467,467,467,,,467,467',
'467,,,467,,,467,,,467,467,,467,,467,,467,,467,467,,467,467,467,467,467',
',467,467,467,,,,,,,,,,,,,,467,,,467,467,467,467,,467,,467,,468,468,468',
'467,468,,,,468,468,,,,468,,468,468,468,468,468,468,468,,,,,,468,468',
'468,468,468,468,468,,,468,,,,,,,468,,,468,468,468,468,468,468,468,468',
',468,468,468,,468,468,468,468,468,,,,,,,,,,,,,,,,,,,,468,,,468,,,468',
'468,,,468,,,,,,468,,,,,,,,,468,,,,,468,468,468,468,,468,468,468,468',
',,,,468,468,,,,,,,468,,468,468,468,,,468,468,121,121,121,121,121,,,',
'121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121',
'121,121,,,121,,,,,,121,121,121,121,121,121,121,121,121,121,121,121,',
'121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121',
'121,,,121,,121,,,,121,,,,,,,,,121,,,,,121,121,121,121,,121,121,121,121',
',,,,121,121,,,,,,121,121,,121,121,121,,,121,121,126,126,126,,126,,,',
'126,126,,,,126,,126,126,126,126,126,126,126,,,,,,126,126,126,126,126',
'126,126,,,126,,,,,,,126,,,126,126,126,126,126,126,126,126,,126,126,126',
',126,126,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,',
',,,126,,,,,,,,,126,,,,,126,126,126,126,,126,126,126,126,,,,,126,126',
',,,127,127,127,126,127,126,126,126,127,127,126,126,,127,,127,127,127',
'127,127,127,127,,,,,,127,127,127,127,127,127,127,,,127,,,,,,,127,,,127',
'127,127,127,127,127,127,127,,127,127,127,,127,127,127,127,127,,,,,,',
',,,,,,,,,,,,,127,,,127,,,127,127,,,127,,,,,,127,,,,,,,,,127,,,,,127',
'127,127,127,,127,127,127,127,,,,,127,127,,,,128,128,128,127,128,127',
'127,127,128,128,127,127,,128,,128,128,128,128,128,128,128,,,,,,128,128',
'128,128,128,128,128,,,128,,,,,,,128,,,128,128,128,128,128,128,128,128',
',128,128,128,,128,128,128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128',
'128,,,128,,,,,,128,,,,,,,,,128,,,,,128,128,128,128,,128,128,128,128',
',,,,128,128,,,,129,129,129,128,129,128,128,128,129,129,128,128,,129',
',129,129,129,129,129,129,129,,,,,,129,129,129,129,129,129,129,,,129',
',,,,,,129,,,129,129,129,129,129,129,129,129,,129,129,129,,129,129,129',
'129,129,,,,,,,,,,,,,,,,,,,,129,,,129,,,129,129,,,129,,,,,,129,,,,,,',
',,129,,,,,129,129,129,129,,129,129,129,129,,,,,129,129,,,,,,,129,,129',
'129,129,,,129,129,130,130,130,130,130,,,,130,130,,,,130,,130,130,130',
'130,130,130,130,,,,,,130,130,130,130,130,130,130,,,130,,,,,,130,130',
',130,130,130,130,130,130,130,130,130,,130,130,130,,130,130,130,130,130',
',,,,,,,,,,,,,,,,,,,130,,,130,,,130,130,,,130,,130,,,,130,,,,,,,,,130',
',,,,130,130,130,130,,130,130,130,130,,,,,130,130,,,,494,494,494,130',
'494,130,130,130,494,494,130,130,,494,,494,494,494,494,494,494,494,,',
',,,494,494,494,494,494,494,494,,,494,,,,,,,494,,,494,494,494,494,494',
'494,494,494,,494,494,494,,494,494,494,494,494,,,,,,,,,,,,,,,,,,,,494',
',,494,,,494,494,,,494,,,,,,494,,,,,,,,,494,,,,,494,494,494,494,,494',
'494,494,494,,,,,494,494,,,,247,247,247,494,247,494,494,494,247,247,494',
'494,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247',
',,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247',
'247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247',
',,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,636',
'636,636,247,636,247,247,247,636,636,247,247,,636,,636,636,636,636,636',
'636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636',
'636,636,636,636,636,636,636,636,636,,636,636,636,636,636,,,,,,,,,,,',
',,,,,,,,636,,,636,,,636,636,,,636,,636,,636,,636,,,636,,,,,,636,,,,',
'636,636,636,636,,636,636,636,636,,,,,636,636,,,,508,508,508,636,508',
'636,636,636,508,508,636,636,,508,,508,508,508,508,508,508,508,,,,,,508',
'508,508,508,508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508,508',
'508,,508,508,508,,508,508,508,508,508,,,,,,,,,,,,,,,,,,,,508,,,508,',
',508,508,,,508,,,,,,508,,,,,,,,,508,,,,,508,508,508,508,,508,508,508',
'508,,,,,508,508,,,,216,216,216,508,216,508,508,508,216,216,508,508,',
'216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,',
'216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216',
'216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,216,,,,216',
',,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216,,,,217',
'217,217,216,217,216,216,216,217,217,216,216,,217,,217,217,217,217,217',
'217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217',
'217,217,217,217,217,,217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,',
',,,,,217,,,217,,,217,217,,,217,,217,,,,217,,,,,,,,,217,,,,,217,217,217',
'217,,217,217,217,217,,,,,217,217,,,,626,626,626,217,626,217,217,217',
'626,626,217,217,,626,,626,626,626,626,626,626,626,,,,,,626,626,626,626',
'626,626,626,,,626,,,,,,,626,,,626,626,626,626,626,626,626,626,626,626',
'626,626,,626,626,626,626,626,,,,,,,,,,,,,,,,,,,,626,,,626,,,626,626',
',,626,,626,,626,,626,,,626,,,,,,626,,,,,626,626,626,626,,626,626,626',
'626,,,,,626,626,,,,518,518,518,626,518,626,626,626,518,518,626,626,',
'518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518,518,518,,',
'518,,,,,,,518,,,518,518,518,518,518,518,518,518,518,518,518,518,,518',
'518,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,518,,518',
',518,,,518,,,,,,518,,,,,518,518,518,518,,518,518,518,518,,,,,518,518',
',,,625,625,625,518,625,518,518,518,625,625,518,518,,625,,625,625,625',
'625,625,625,625,,,,,,625,625,625,625,625,625,625,,,625,,,,,,,625,,,625',
'625,625,625,625,625,625,625,,625,625,625,,625,625,625,625,625,,,,,,',
',,,,,,,,,,,,,625,,,625,,,625,625,,,625,,625,,,,625,,,,,,,,,625,,,,,625',
'625,625,625,,625,625,625,625,,,,,625,625,,,,520,520,520,625,520,625',
'625,625,520,520,625,625,,520,,520,520,520,520,520,520,520,,,,,,520,520',
'520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520,520,520,520',
',520,520,520,,520,520,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520',
'520,,,520,,,,,,520,,,,,,,,,520,,,,,520,520,520,520,,520,520,520,520',
',,,,520,520,,,,521,521,521,520,521,520,520,520,521,521,520,520,,521',
',521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521',
',,,,,,521,,,521,521,521,521,521,521,521,521,,521,521,521,,521,521,521',
'521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,,,521,,,,,,',
',,521,,,,,521,521,521,521,,521,521,521,521,,,,,521,521,,,,522,522,522',
'521,522,521,521,521,522,522,521,521,,522,,522,522,522,522,522,522,522',
',,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522',
'522,522,522,,522,522,522,,522,522,522,522,522,,,,,,,,,,,,,,,,,,,,522',
',,522,,,522,522,,,522,,,,,,522,,,,,,,,,522,,,,,522,522,522,522,,522',
'522,522,522,,,,,522,522,,,,218,218,218,522,218,522,522,522,218,218,522',
'522,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218',
',,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,,218',
'218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218',
',,,,,,,,218,,,,,218,218,218,218,,218,218,218,218,,,,,218,218,,,,219',
'219,219,218,219,218,218,218,219,219,218,218,,219,,219,219,219,219,219',
'219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219',
'219,219,219,219,219,,219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,',
',,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219',
'219,,219,219,219,219,,,,,219,219,,,,40,40,40,219,40,219,219,219,40,40',
'219,219,,40,,40,40,40,40,40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,',
',,,40,,,40,40,40,40,40,40,40,40,,40,40,40,,40,40,,,40,,,,,,,,,,,,,,',
',,,,,40,,,40,,,40,40,,,40,,,1210,,1210,1210,1210,1210,1210,,,,,,,,,1210',
',40,40,40,40,,40,40,40,40,,,,,40,40,,,,40,,1210,40,,40,40,40,802,802',
'802,,802,1210,1210,,802,802,1210,,,802,,802,802,802,802,802,802,802',
',,,,,802,802,802,802,802,802,802,,,802,,,,,,,802,,,802,802,802,802,802',
'802,802,802,,802,802,802,,802,802,,,802,,,,,,,,,,,,,,,,,,,,802,,,802',
',,802,802,,,802,,,,,,,,,,,,,,,,,,,,802,802,802,802,,802,802,802,802',
',,,,802,802,,,,357,357,357,802,357,802,802,802,357,357,,,,357,,357,357',
'357,357,357,357,357,,,,,,357,357,357,357,357,357,357,,,357,,,,,,,357',
',,357,357,357,357,357,357,357,357,,357,357,357,,357,357,,,357,,,,,,',
',,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,,,,,,,,,,,,,357,357,357',
'357,,357,357,357,357,,,,,357,357,,,,76,76,76,357,76,357,357,357,76,76',
',,,76,,76,76,76,76,76,76,76,,,,,,76,76,76,76,76,76,76,,,76,,,,,,,76',
',,76,76,76,76,76,76,76,76,,76,76,76,,76,76,,,76,,,,,,,,,,,,,,,,,,,,76',
',,76,,,76,76,,,76,,76,,,,,,,,,,,,,,,,,,76,76,76,76,,76,76,76,76,,,,',
'76,76,,,,813,813,813,76,813,76,76,76,813,813,,,,813,,813,813,813,813',
'813,813,813,,,,,,813,813,813,813,813,813,813,,,813,,,,,,,813,,,813,813',
'813,813,813,813,813,813,,813,813,813,,813,813,,,813,,,,,,,,,,,,,,,,',
',,,813,,,813,,,813,813,,,813,,,,,,,,,,,,,,,,,,,,813,813,813,813,,813',
'813,813,813,,,,,813,813,,,,1015,1015,1015,813,1015,813,813,813,1015',
'1015,,,,1015,,1015,1015,1015,1015,1015,1015,1015,,,,,,1015,1015,1015',
'1015,1015,1015,1015,,,1015,,,,,,,1015,,,1015,1015,1015,1015,1015,1015',
'1015,1015,,1015,1015,1015,,1015,1015,,,1015,,,,,,,,,,,,,,,,,,,,1015',
',,1015,,,1015,1015,,,1015,,,,,,,,,,,,,,,,,,,,1015,1015,1015,1015,,1015',
'1015,1015,1015,,,,,1015,1015,,,,77,77,77,1015,77,1015,1015,1015,77,77',
',,,77,,77,77,77,77,77,77,77,,,,,,77,77,77,77,77,77,77,,,77,,,,,,,77',
',,77,77,77,77,77,77,77,77,,77,77,77,,77,77,,,77,,,,,,,,,,,,,,,,,77,',
',77,,,77,,,77,77,,,77,,,,,,,,,,,,,,,,,,,,77,77,77,77,,77,77,77,77,,',
',,77,77,,,,595,595,595,77,595,77,77,77,595,595,,,,595,,595,595,595,595',
'595,595,595,,,,,,595,595,595,595,595,595,595,,,595,,,,,,,595,,,595,595',
'595,595,595,595,595,595,,595,595,595,,595,595,,,595,,,,,,,,,,,,,,,,',
',,,595,,,595,,,595,595,,,595,,,,,,,,,,,,,,,,,,,,595,595,595,595,,595',
'595,595,595,,,,,595,595,,,,338,338,338,595,338,595,595,595,338,338,',
',,338,,338,338,338,338,338,338,338,,,,,,338,338,338,338,338,338,338',
',,338,,,,,,,338,,,338,338,338,338,338,338,338,338,,338,338,338,,338',
'338,,,338,,,,,,,,,,,,,,,,,,,,338,,,338,,,338,338,,,338,,,1208,,1208',
'1208,1208,1208,1208,,,,,,,,,1208,,338,338,338,338,,338,338,338,338,',
',,,338,338,,,,338,,1208,338,,338,338,338,78,78,78,,78,1208,1208,,78',
'78,1208,,,78,,78,78,78,78,78,78,78,,,,,,78,78,78,78,78,78,78,,,78,,',
',,,,78,,,78,78,78,78,78,78,78,78,,78,78,78,,78,78,,,78,,,,,,,,,,,,,',
',,,,,,78,,,78,,,78,78,,,78,,,,,,,,,,,,,,,,,,,,78,78,78,78,,78,78,78',
'78,,,,,78,78,,,,1080,1080,1080,78,1080,78,78,78,1080,1080,,,,1080,,1080',
'1080,1080,1080,1080,1080,1080,,,,,,1080,1080,1080,1080,1080,1080,1080',
',,1080,,,,,,,1080,,,1080,1080,1080,1080,1080,1080,1080,1080,,1080,1080',
'1080,,1080,1080,,,1080,,,,,,,,,,,,,,,,,,,,1080,,,1080,,,1080,1080,,',
'1080,,,,,,,,,,,,,,,,,,,,1080,1080,1080,1080,,1080,1080,1080,1080,,,',
',1080,1080,,,,586,586,586,1080,586,1080,1080,1080,586,586,,,,586,,586',
'586,586,586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,',
',586,,,586,586,586,586,586,586,586,586,,586,586,586,,586,586,,,586,',
',,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,,,,,,,,,,,,,,,,,,,586,586',
'586,586,,586,586,586,586,,,,,586,586,,,,39,39,39,586,39,586,586,586',
'39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39,39,39,39,39,39,,,39,,,',
',,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39,39,,,39,,,,,,,,,,,,,,',
',,,,,39,,,39,,,39,39,,,39,,39,,,,,,,,,,,,,,,,,,39,39,39,39,,39,39,39',
'39,,,,,39,39,,,,1142,1142,1142,39,1142,39,39,39,1142,1142,,,,1142,,1142',
'1142,1142,1142,1142,1142,1142,,,,,,1142,1142,1142,1142,1142,1142,1142',
',,1142,,,,,,,1142,,,1142,1142,1142,1142,1142,1142,1142,1142,,1142,1142',
'1142,,1142,1142,,,1142,,,,,,,,,,,,,,,,,,,,1142,,,1142,,,1142,1142,,',
'1142,,,,,,,,,,,,,,,,,,,,1142,1142,1142,1142,,1142,1142,1142,1142,,,',
',1142,1142,,,,,,,1142,,1142,1142,1142,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11',
'11,11,,,,,,11,11,11,11,11,11,11,11,11,,,11,,,,,,,,11,11,,11,11,11,11',
'11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11',
'11,11,11,11,11,11,,,11,11,,,,,,,,,,,,,,11,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,,,,10,10,10,10,10,10,10',
'10,10,10,,,,,,10,10,10,10,10,10,10,10,10,10,,10,,,,,,,,10,10,,10,10',
'10,10,10,10,10,,,10,10,,,,10,10,10,10,,,,,,,,,,,,,,10,10,,10,10,10,10',
'10,10,10,10,10,10,10,10,,,10,10,,,,,,,,,,,,,,10,665,665,665,665,665',
'665,665,665,665,665,665,665,665,665,665,665,665,665,665,665,665,665',
'665,665,,,,665,665,665,665,665,665,665,665,665,665,,,,,,665,665,665',
'665,665,665,665,665,665,,,665,,,,,,,,665,665,,665,665,665,665,665,665',
'665,,,665,665,,,,665,665,665,665,,,,,,,,,,,,,,665,665,,665,665,665,665',
'665,665,665,665,665,665,665,665,,,665,665,,,,,,,,,,,,,,665,424,424,424',
'424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424',
'424,424,424,424,,,,424,424,424,424,424,424,424,424,424,424,,,,,,424',
'424,424,424,424,424,424,424,424,,,424,,,,,,,,424,424,,424,424,424,424',
'424,424,424,,,424,424,,,,424,424,424,424,,,,,,,,,,,,,,424,424,,424,424',
'424,424,424,424,424,424,424,424,424,424,,,424,424,941,941,941,941,,',
',,,,,,,424,,,941,941,941,941,,,1206,941,1206,1206,1206,1206,1206,941',
'941,,,941,,,,1206,,,,,,,,,,,,,,,,941,,,941,,,1206,941,,,941,,,,,1206',
'1206,1206,1206,,,,1206,,,,941,,,,941,941,941,941,,941,941,941,941,,',
',,941,941,934,934,934,934,,,941,,941,941,941,,,941,941,,934,934,934',
'934,,,1164,934,1164,1164,1164,1164,1164,934,934,,,934,,,,1164,,,,,,',
',,,,,,,,,934,,,934,,,1164,934,,,934,,934,,,,,1164,1164,,,,1164,,,,934',
',,,934,934,934,934,,934,934,934,934,,,,,934,934,526,526,526,526,,,934',
',934,934,934,,,934,934,,526,526,526,526,,,,526,526,,,,,526,526,,,526',
'526,,,,,,,,,,,,,,,,,,,526,,,526,,,,526,,,526,,526,,,,,,,526,,,,,,,526',
',,,526,526,526,526,,526,526,526,526,,,,,526,526,924,924,924,924,,,526',
',526,526,526,,,526,526,,924,924,924,924,,,1136,924,1136,1136,1136,1136',
'1136,924,924,,,924,,,,1136,,,,,,,,,,,,,,,,924,,,924,,,1136,924,,,924',
',,,,1136,1136,1136,1136,,,,1136,,,,924,,,,924,924,924,924,,924,924,924',
'924,,,,,924,924,525,525,525,525,,,924,,924,924,924,,,924,924,,525,525',
'525,525,,,,525,525,,,,,525,525,,,525,525,,,,,,,,,,,,,,,,,,,525,,,525',
',,,525,,,525,,525,,,,,,,525,,,,,,,525,,,,525,525,525,525,,525,525,525',
'525,,,,,525,525,1171,1171,1171,1171,,,525,,525,525,525,,,525,525,,1171',
'1171,1171,1171,,,702,1171,702,702,702,702,702,1171,1171,,,1171,,,,702',
',,,,,,,,,,,,,,,1171,,,1171,,,702,1171,,,1171,,,,,702,702,702,702,,,',
'702,,,,1171,,,,1171,1171,1171,1171,,1171,1171,1171,1171,,,,,1171,1171',
'987,987,987,987,,,1171,,1171,1171,1171,,,1171,1171,,987,987,987,987',
',,,987,987,,,,,987,987,,,987,987,,,,,,,,,,,,,,,,,,,987,,,987,,,,987',
',,987,,987,,,,,,,987,,,,,,,987,,,,987,987,987,987,,987,987,987,987,',
',,,987,987,922,922,922,922,,,987,,987,987,987,,,987,987,,922,922,922',
'922,,,704,922,704,704,704,704,704,922,922,,,922,,,,704,,,,,,,,,,,,,',
',,922,,,922,,,704,922,,,922,,922,,,,,704,704,,,,704,,,,922,,,,922,922',
'922,922,,922,922,922,922,,,,,922,922,1127,1127,1127,1127,,,922,,922',
'922,922,,,922,922,,1127,1127,1127,1127,,,1133,1127,1133,1133,1133,1133',
'1133,1127,1127,,,1127,,,,1133,,,,,,,,,,,,,,,,1127,,,1127,,,1133,1127',
',,1127,,1127,,,1133,1133,1133,1133,,,,1133,,,,1127,,,,1127,1127,1127',
'1127,,1127,1127,1127,1127,,,,,1127,1127,,,,,,,1127,,1127,1127,1127,',
',1127,1127,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,,,,,,26,26,26,26,26',
'26,26,26,26,26,26,26,,26,,,,,,26,26,,26,26,26,26,26,26,26,,,26,26,,',
',26,26,26,26,,,,,,26,,,,,,,,26,26,,26,26,26,26,26,26,26,26,26,26,26',
'26,,,26,779,779,779,779,779,779,779,779,779,779,779,779,779,779,779',
'779,779,779,779,779,779,779,779,779,,,,779,779,779,779,779,779,779,779',
'779,779,,,,,,779,779,779,779,779,779,779,779,779,,,779,,,,,,,,779,779',
',779,779,779,779,779,779,779,,,779,779,,,,779,779,779,779,,,,,,,,,,',
',,,779,779,,779,779,779,779,779,779,779,779,779,779,779,779,,,779,1123',
'1123,1123,1123,,,,,,,,,,,,,1123,1123,1123,1123,,,720,1123,720,720,720',
'720,720,1123,1123,,,1123,,,,720,,,,,,,,,,,,,,,,1123,,,1123,,,720,1123',
',,1123,,,,,720,720,720,720,,,,720,,,,1123,,,,1123,1123,1123,1123,,1123',
'1123,1123,1123,,,,,1123,1123,752,752,752,752,,,1123,,1123,1123,1123',
',,1123,1123,,752,752,752,752,,,1025,752,1025,1025,1025,1025,1025,752',
'752,,,752,,,,1025,,,,,,,,,,,,,,,,752,,,752,,,1025,752,,,752,,,,,,,1025',
'1025,,,,1025,,,,752,,,,752,752,752,752,,752,752,752,752,,,,,752,752',
'1203,1203,1203,1203,,,752,,752,752,752,,,752,752,,1203,1203,1203,1203',
',,1023,1203,1023,1023,1023,1023,1023,1203,1203,,,1203,,,,1023,,,,,,',
',,,,,,,,,1203,,,1203,,,1023,1203,,,1203,,,,,,,1023,1023,,,,1023,,,,1203',
',,,1203,1203,1203,1203,,1203,1203,1203,1203,,,,,1203,1203,1114,1114',
'1114,1114,,,1203,,1203,1203,1203,,,1203,1203,,1114,1114,1114,1114,,',
'1020,1114,1020,1020,1020,1020,1020,1114,1114,,,1114,,,,1020,,,,,,,,',
',,,,,,,1114,,,1114,,,1020,1114,,,1114,,,,,,,1020,1020,,,,1020,,,,1114',
',,,1114,1114,1114,1114,,1114,1114,1114,1114,,,,,1114,1114,744,744,744',
'744,,,1114,,1114,1114,1114,,,1114,1114,,744,744,744,744,,,1018,744,1018',
'1018,1018,1018,1018,744,744,,,744,,,,1018,,,,,,,,,,,,,,,,744,,,744,',
',1018,744,,,744,,744,,,1018,1018,1018,1018,,,,1018,,,,744,,,,744,744',
'744,744,,744,744,744,744,,,,,744,744,744,927,927,927,927,,744,,744,744',
'744,,,744,744,,,927,927,927,927,,,,927,927,,,,,927,927,,,927,927,,,',
',,,,,,,,,,,,,,,927,,,927,,,,927,,,927,,927,,,,,,,927,,,,,,,927,,,,927',
'927,927,927,,927,927,927,927,,,,,927,927,928,928,928,928,,,927,,927',
'927,927,,,927,927,,928,928,928,928,,,,928,928,,,,,928,928,,,928,928',
',,,,,,,,,,,,,,,,,,928,,,928,,,,928,,,928,,928,,,,,,,928,,,,,,,928,,',
',928,928,928,928,,928,928,928,928,,,,,928,928,940,940,940,940,,,928',
',928,928,928,,,928,928,,940,940,940,940,,,,940,,,,,,940,940,,,940,,',
',,,,,949,949,949,949,,,,,,,,,940,,,940,949,949,949,940,,,940,,,,,,,949',
'949,,,949,,,,,940,,,,940,940,940,940,,940,940,940,940,,,,,940,940,,',
',,,,940,,940,940,940,,,940,940,,,,,,,,,,,,949,949,949,949,,949,949,949',
'949,,,,,949,949,761,761,761,761,,,949,,949,949,949,,,,,,761,761,761',
'590,590,,,590,,,,,,761,761,590,590,761,590,590,590,590,590,590,590,',
',590,590,,,,590,590,590,590,,,,,,590,,,,,,,,590,590,,590,590,590,590',
'590,590,590,590,590,590,590,590,,,590,761,761,761,761,,761,761,761,761',
',,,,761,761,589,589,,,589,,761,,761,761,761,,589,589,,589,589,589,589',
'589,589,589,,,589,589,,,,589,589,589,589,,,,,,589,,,,,,,,589,589,,589',
'589,589,589,589,589,589,589,589,589,589,589,1161,1161,589,,1161,,,,',
',,,1161,1161,,1161,1161,1161,1161,1161,1161,1161,,,1161,1161,,,,1161',
'1161,1161,1161,,,,,,1161,,,,,,,,1161,1161,,1161,1161,1161,1161,1161',
'1161,1161,1161,1161,1161,1161,1161,600,600,1161,,600,,,,,,,,600,600',
',600,600,600,600,600,600,600,,,600,600,,,,600,600,600,600,,,,,,600,',
',,,,,,600,600,,600,600,600,600,600,600,600,600,600,600,600,600,672,672',
'600,,672,,,,,,,,672,672,,672,672,672,672,672,672,672,,,672,672,,,,672',
'672,672,672,,,,,,672,,,,,,,,672,672,,672,672,672,672,672,672,672,672',
'672,672,672,672,673,673,672,,673,,,,,,,,673,673,,673,673,673,673,673',
'673,673,,,673,673,,,,673,673,673,673,,,,,,673,,,,,,,,673,673,,673,673',
'673,673,673,673,673,673,673,673,673,673,1162,1162,673,,1162,,,,,,,,1162',
'1162,,1162,1162,1162,1162,1162,1162,1162,,,1162,1162,,,,1162,1162,1162',
'1162,,,,,,1162,,,,,,,,1162,1162,,1162,1162,1162,1162,1162,1162,1162',
'1162,1162,1162,1162,1162,635,635,1162,,635,,,,,,,,635,635,,635,635,635',
'635,635,635,635,,,635,635,,,,635,635,635,635,,,,,,635,,,,,,,,635,635',
',635,635,635,635,635,635,635,635,635,635,635,635,223,223,635,,223,,',
',,,,,223,223,,223,223,223,223,223,223,223,,,223,223,,,,223,223,223,223',
',,,,,223,,,,,,,,223,223,,223,223,223,223,223,223,223,223,223,223,223',
'223,517,517,223,,517,,,,,,,,517,517,,517,517,517,517,517,517,517,,,517',
'517,,,,517,517,517,517,,,,,,517,,,,,,,,517,517,,517,517,517,517,517',
'517,517,517,517,517,517,517,627,627,517,,627,,,,,,,,627,627,,627,627',
'627,627,627,627,627,,,627,627,,,,627,627,627,627,,,,,,627,,,,,,,,627',
'627,,627,627,627,627,627,627,627,627,627,627,627,627,628,628,627,,628',
',,,,,,,628,628,,628,628,628,628,628,628,628,,,628,628,,,,628,628,628',
'628,,,,,,628,,,,,,,,628,628,,628,628,628,628,628,628,628,628,628,628',
'628,628,516,516,628,,516,,,,,,,,516,516,,516,516,516,516,516,516,516',
',,516,516,,,,516,516,516,516,,,,,,516,,,,,,,,516,516,,516,516,516,516',
'516,516,516,516,516,516,516,516,1186,1186,516,,1186,,,,,,,,1186,1186',
',1186,1186,1186,1186,1186,1186,1186,,,1186,1186,,,,1186,1186,1186,1186',
',,,,,1186,,,,,,,,1186,1186,,1186,1186,1186,1186,1186,1186,1186,1186',
'1186,1186,1186,1186,634,634,1186,,634,,,,,,,,634,634,,634,634,634,634',
'634,634,634,,,634,634,,,,634,634,634,634,,,,,,634,,,,,,,,634,634,,634',
'634,634,634,634,634,634,634,634,634,634,634,299,299,634,,299,,,,,,,',
'299,299,,299,299,299,299,299,299,299,,,299,299,,,,299,299,299,299,,',
',,,,,,,,,,,299,299,,299,299,299,299,299,299,299,299,299,299,299,299',
'599,599,299,,599,,,,,,,,599,599,,599,599,599,599,599,599,599,,,599,599',
',,,599,599,599,599,,,,,,599,,,,,,,,599,599,,599,599,599,599,599,599',
'599,599,599,599,599,599,222,222,599,,222,,,,,,,,222,222,,222,222,222',
'222,222,222,222,,,222,222,,,,222,222,222,222,,,,,,222,,,,,,,,222,222',
',222,222,222,222,222,222,222,222,222,222,222,222,,406,222,406,406,406',
'406,406,,231,,231,231,231,231,231,406,,,,,,,,231,,,,,,,,,,,,,,406,406',
',,,,,,231,406,406,406,406,,,,406,231,231,231,231,,,,231' ]
        racc_action_check = arr = ::Array.new(28646, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1630,  4865,    85,   nil,   -78,   nil, 17013,  1409,    63,
 25127, 24999,    95,   nil,    81,    97,   780,   167,   966,   192,
   191,   260,   nil,   -72, 15822,  1409, 26394,   256,   nil,   519,
   nil,    10,  5674,  5949,  6345, 11630, 11892,   nil,  3569, 24729,
 23141,   nil,   181,   364,   500,   321, 13726, 14119,   171, 14381,
 15691,   743, 16870,   257,   843,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 18738,   nil, 18879, 19010, 19141,   173,
   nil, 19403, 19534,   nil,   nil, 19665, 23542, 23935, 24336,   nil,
   nil,   nil,   nil,   nil,   nil,   721,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     0,   nil,   nil,   693,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 20497,   nil,   nil,   nil,   nil, 20640, 20771, 20902, 21033,
 21176,   nil,  4145,   nil,   870,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   343,   nil,  1697, 21831, 21962, 22879, 23010,
  6738,  6869, 28471, 27922,   nil,   nil,   359,  4433,   390,   nil,
   468, 28541,   455,  2849,  7917,  7655,  7524,   nil,   nil,   993,
   246,   261,   559,   332,   487,   584,   nil, 21438,   131,   -83,
  1553,   609,   nil,   nil, 17406, 16608, 16477, 15953, 15298, 15167,
 15036, 14905, 14512, 13857, 13464, 13202, 13071, 12940, 12547, 12416,
 11761,  5808,  5533,  5402,  5271, 11237,   nil,   nil,   nil,   nil,
 10320,   nil,   nil,   554,   666,   667,   671,   713,   274,   735,
   376,   409,   421,   nil,   nil,   nil, 12678,   nil,   nil, 28349,
   nil,   nil,   608,  8998,  9391,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  9522,   nil,  2273,   nil,   577,   582,   nil,  9653,
   637,  9784,   nil,   nil,  9915, 10046,   nil,   nil,   550,   nil,
 10189,  1186,   616,   592,  1409,   609,   651,   613, 24197,  3137,
   553,   585,   589,   702,   661,   nil,   684,   658,   253,   703,
   721,   nil,   nil,   nil,   732,   163,   696, 23411,   nil,   466,
   663,  4577,  3713,   767,   nil,   776, 13333,   nil, 13595,  2417,
  1250,   714,   nil,   843,   592,   759,   747,   -77,   775,   nil,
   716,     9,    33, 14774,  4721,  4577,   398,   854,   744,    39,
    25,   734,   830,    26,   862,   nil,   nil,   968,  1112,   574,
   nil,   770,   nil,   780, 17275,   nil, 28533,   nil,   405,   357,
   296,   510,   502,   -31,   191,   515,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   783, 25383,   nil,   nil,   nil,   nil,   800,
   nil,   874,   798, 19272,   813,   nil,   nil,   806,   nil,   960,
   356,   914,   nil,   nil,  1553,   nil,   nil,   nil,   nil,   nil,
  1985,   828,   nil,   831,   836,   745,   750, 19949,   nil,   nil,
   nil,   110,   832,   886,   nil,   nil, 20081, 20217, 20354,   977,
   977,   nil,   nil,   859,   857,   871,   869,   870,   nil,   872,
   880,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   869,  1251,   nil,   nil, 21307,   nil,   nil,   nil,   375,   nil,
   nil,   nil,   966,   nil,   nil,   967,   457,   887, 21700,  1024,
   nil,   nil,   nil,   -26,   nil,   956, 28166, 27983, 22224,   355,
 22486, 22617, 22748,   903,   904, 25859, 25663,  4721,  5009,   953,
  1016,   992,   994,   998,  1000,  5402,  5533,  5623,  4289,  4433,
  4145,  4865,  5140,  3857,   786,  3395,  4001,  3569,  3137,  5271,
   nil,   154,   nil,  8737,   nil,   nil,   nil,   nil,  8867,   937,
   938,   943,   nil,   nil,   nil,   945,   nil,   nil,  8596,   nil,
  8334,   nil,  8203,   nil,   219,   nil,   nil,   nil,  8060,  1538,
   nil,   946,   946,   nil,   nil,   948, 24598,   953,  7786, 27495,
 27416,   970,  1002,   nil,   nil, 24066,   963,   nil,  7393, 28410,
 27617,  7262,  3425,  3281,  7131,  1092,   973,  1014,   nil,  7000,
   nil,   nil,  6607,   nil,   nil,   nil,  5009,  1095,   nil,  2561,
    25,  1100,  1102,   567,  1119, 22355, 22093, 28044, 28105,   -19,
   nil,   nil,  1104,   nil, 28288, 27861, 21569,   nil,   nil,   191,
  2129,   nil,  8756,   nil,   nil,   nil,   nil,  1031,   nil,   nil,
   nil,  1010,   nil,   nil,   365,   nil,   392,   nil,   nil,   996,
   nil,   999,   nil,   nil,   nil, 25255,   nil, 19808,  1001, 18597,
 18466, 18335, 27678, 27739, 18204, 18061,   558,  1051, 17930, 17799,
 17668, 17537,  1050,   nil,   nil, 17144, 16739,  1052,   nil,  1106,
  1841,  1149, 15560,   nil,   nil,   358,   nil,   nil,  1091,   nil,
   nil,   543, 25960,   nil, 26156,   nil, 15429,   nil,  1281,   nil,
  1044,  1059,  1166,  1063,   nil,   nil,   nil,   nil,   nil,   nil,
 26593,  1155,  1697,   nil,   nil,   nil,   304,   262,   222,   581,
  1070, 14250, 13988,   nil,   -53,   nil,   nil,   nil,   nil,  1093,
   nil,   nil,   nil,   526, 26982,   126,   nil,  1071,  1156,  1082,
   nil,   nil, 26688,   nil,   nil,   359,   nil,   nil,   189,   nil,
   nil, 27416,   832,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1157,   368,   nil,   nil,  1100, 26507,
   nil,  1224,   nil,  1207,   170,   nil,   nil, 12023,   nil,  1122,
  1138,  1239,   nil,  1118,   nil,  1166,  5140,   nil,   nil, 11368,
   nil,   217, 23280,  1122,   nil,  1126,   250,   233,  1169,   249,
  1110,  1173,  1130, 23673,   nil,  1206,   -14,   nil,   nil,   nil,
   728,    19,   nil,  1263,   nil,   nil,   nil,   nil,   nil,  1270,
  1292,   nil,   nil,    69,  1177,     7,   -21,    40,    68,   977,
  1256,   443,   nil,  1191,  3857, 12285,   nil,  1316,    37,  1201,
   nil,   nil,   nil,   nil,   nil,  2993,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1204, 14643,  1211,   -56,   -85,   471,
   361,   nil,  2129,  8465,   nil,  1209,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  9129,  9260,  1335,   nil,
  2705,  1211,  1259,   nil,   nil,  1217,   nil,  1218,  1219,   nil,
  1221,   nil,  1304,   nil,  1225,  1226,   nil,  1238,   nil,   nil,
  1247,  1319,  3555,   nil,   nil, 10451, 10582, 10713, 10844, 10975,
 11106,   168, 26153,  1328, 25761,   385,   -69, 27081, 27179,   621,
   -32,  1254,  1259,   nil, 25565,   nil,  1257,   718,   nil,  1278,
 27277, 25467,   nil,   900,  1305,   247,   nil,   nil, 18738, 27318,
   nil,   nil,   nil,   nil,  6083,   nil,   nil,   nil,   nil,   nil,
  6214,   nil,   nil,  1286,   nil,   nil,  1283,  1267,   nil,   nil,
  8701,  3425,   nil,   nil,   nil,   nil,  1266,   251,   nil,   nil,
   nil,  1391,   nil,  6476,  1393,   nil,   nil, 26055, 11499,  4001,
    -5,  1397,   nil,  1408,   -76,  3713,   nil,   nil,   nil,   nil,
  1283,  1331,  1295,  1290,   174,   nil,   nil, 12154,  2417,  2561,
   nil,  3281,   nil,   nil,   136, 23804,   nil,   nil, 26985,   nil,
 26887,   nil,   nil, 26789,   nil, 26691,   nil,   nil,   nil,   nil,
  1292,  1301,  2705,  2849, 12809,   nil,  1302,   nil,   nil,   nil,
   nil,  1306,  1307,  1315,  1316,  1335,  1339,   nil,   nil,   nil,
  1399,  1356,   -36,   nil,  1360,   nil,   nil,   157,  1360,   nil,
   nil,   nil,   nil,   nil,   nil,  1405,  2993,  2273,   nil,   nil,
  1365,  1366,   nil,  1369,  1370,  1372,   nil,  1399,  1383,  1376,
 24467,   nil,   nil,   nil,   nil,    36,   nil,    35,   520,   nil,
   683,   nil,   nil,   nil,  1513,  1841,  1265,  1310,   nil,   nil,
   nil,  1121,    34,    76,   665,  1468,     6,   nil,  1395,  1400,
  1401,  1402,  3505,  3411, 26884,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1403, 26590,   nil,   145,   nil, 26251,   nil,   nil,
  1174,   nil,   nil, 26254,   nil,   nil, 25764,   nil,  8730,   nil,
   nil,  1430, 24860,   701,  1486,  4289,   nil, 16084, 16215,   nil,
   nil,   nil,   nil,  1429,  1534,   791,   nil,   nil,   nil,  1537,
 16346, 27556, 27800,   142, 25568,   nil,   nil,   nil,   nil,  1413,
  1417, 25957,  1418,   nil,   nil,  1427,   nil,   nil,  1428,  1429,
  1432,  1433,   nil,  1434,   nil,   849, 28227,   nil,   768,  1985,
   nil,   nil,   nil,   nil,   nil,  1107,   nil,  1439,   -10,     8,
    26,    32,  1456, 26786,  1457,   nil, 25470,   nil, 24244,   nil,
 23188,   nil, 20012,   nil,   nil,  1503,  1504,   nil,   375,   nil,
    79,   nil,  1461,  1462,  1476,  1480,   nil,   nil,   nil,  8737,
   nil,   nil,   nil,   nil,  -129,   nil ]

racc_action_default = [
    -1,  -737,    -4,  -737,    -2,  -722,    -5,  -737,    -8,  -737,
  -737,  -737,  -737,   -31,  -737,  -737,   -36,  -737,  -737,  -633,
  -633,  -309,   -52,  -724,  -737,   -61,  -737,   -69,   -70,   -71,
   -75,  -286,  -286,  -286,  -322,  -349,  -350,   -87,   -13,   -91,
   -99,  -101,  -737,  -618,  -619,  -737,  -737,  -737,  -737,  -737,
  -737,  -239,  -737,  -724,  -257,  -300,  -301,  -302,  -303,  -304,
  -305,  -306,  -307,  -308,  -710,  -311,  -315,  -736,  -699,  -330,
  -332,  -737,  -737,   -63,   -63,  -722,  -737,  -737,  -737,  -351,
  -352,  -354,  -411,  -555,  -556,  -557,  -558,  -579,  -561,  -562,
  -581,  -583,  -566,  -571,  -575,  -577,  -593,  -594,  -595,  -579,
  -597,  -599,  -600,  -601,  -602,  -708,  -607,  -608,  -709,  -610,
  -611,  -612,  -613,  -614,  -615,  -616,  -617,  -622,  -623,  1236,
    -3,  -723,  -732,  -733,  -734,    -7,  -737,  -737,  -737,  -737,
  -737,    -9,    -4,   -19,  -737,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,
  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,  -207,
  -208,  -209,  -210,   -24,  -137,   -13,  -737,  -737,  -737,  -737,
  -737,  -276,  -737,  -737,  -720,  -721,  -737,   -13,  -632,  -628,
  -655,  -655,  -737,   -13,  -737,  -737,  -724,  -725,   -56,  -737,
  -618,  -619,  -737,  -309,  -737,  -737,  -245,  -737,  -633,  -633,
   -13,  -737,   -57,   -59,  -222,  -223,  -737,  -737,  -737,  -737,
  -737,  -737,  -737,  -737,  -737,  -737,  -737,  -737,  -737,  -737,
  -737,  -737,  -737,  -737,  -737,  -737,  -258,  -259,  -260,  -261,
  -737,   -65,   -66,  -737,  -130,  -131,  -170,  -171,  -172,  -188,
  -193,  -200,  -203,  -618,  -619,  -697,  -737,  -420,  -422,  -737,
  -718,  -719,   -76,  -276,  -737,  -329,  -426,  -435,  -437,   -82,
  -432,   -83,  -724,   -84,  -264,  -281,  -290,  -290,  -285,  -737,
  -291,  -737,  -579,  -701,  -705,  -737,   -85,   -86,  -722,   -14,
  -737,   -17,  -737,   -89,   -13,  -724,  -737,   -92,   -95,   -13,
  -107,  -108,  -737,  -737,  -115,  -322,  -325,  -724,  -737,  -633,
  -633,  -349,  -350,  -353,  -433,  -737,   -97,  -737,  -103,  -319,
  -737,  -224,  -225,  -598,  -233,  -234,  -737,  -246,  -737,   -13,
  -313,  -724,  -265,  -729,  -729,  -737,  -737,  -729,  -737,  -331,
   -62,  -737,  -737,  -737,   -13,   -13,  -722,  -737,  -723,  -618,
  -619,  -737,  -737,  -309,  -737,  -364,  -365,  -125,  -126,  -737,
  -128,  -737,  -309,  -626,  -737,  -345,  -655,  -559,  -737,  -737,
  -737,  -737,  -737,  -737,  -737,  -737,    -6,  -735,   -25,   -26,
   -27,   -28,   -29,  -737,  -737,   -21,   -22,   -23,  -138,  -737,
   -32,   -35,  -296,  -737,  -737,  -295,   -33,  -737,   -37,  -737,
  -309,   -49,   -51,  -211,  -269,  -291,   -53,   -54,   -38,  -212,
  -269,  -724,  -277,  -290,  -290,  -711,  -712,  -286,  -430,  -713,
  -714,  -712,  -711,  -286,  -429,  -431,  -713,  -714,  -737,  -547,
  -737,  -377,  -378,  -724,  -640,  -724,  -696,  -696,  -638,  -640,
  -640,  -654,  -656,  -657,  -658,  -659,  -660,  -661,  -662,  -663,
  -664,  -737,  -666,  -668,  -670,  -675,  -677,  -678,  -681,  -686,
  -688,  -689,  -691,  -692,  -693,  -737,  -737,  -640,  -737,  -737,
   -48,  -219,   -55,  -724,  -328,  -737,  -737,  -737,  -276,  -319,
  -737,  -737,  -737,  -737,  -737,  -737,  -737,  -220,  -221,  -226,
  -227,  -228,  -229,  -230,  -231,  -235,  -236,  -237,  -238,  -240,
  -241,  -242,  -243,  -244,  -247,  -248,  -249,  -250,  -724,  -262,
   -67,  -724,  -441,  -286,  -711,  -712,   -73,   -77,  -656,  -724,
  -290,  -724,  -287,  -439,  -441,  -724,  -324,  -282,  -737,  -283,
  -737,  -288,  -737,  -292,  -737,  -704,  -707,   -12,  -723,   -16,
   -18,  -724,   -88,  -317,  -104,   -93,  -737,  -724,  -276,  -737,
  -737,  -114,  -737,  -632,  -598,  -737,  -100,  -105,  -737,  -737,
  -737,  -737,  -263,  -251,  -737,  -737,  -724,  -737,  -266,  -731,
  -730,  -268,  -731,  -320,  -321,  -700,   -13,  -355,  -356,   -13,
  -737,  -737,  -737,  -737,  -737,  -737,  -276,  -737,  -737,  -319,
   -63,  -125,  -126,  -127,  -737,  -737,  -276,  -341,  -624,  -737,
   -13,  -412,  -655,  -415,  -560,  -580,  -585,  -737,  -587,  -563,
  -582,  -737,  -584,  -565,  -737,  -568,  -737,  -570,  -573,  -737,
  -574,  -737,  -596,   -10,   -20,  -737,   -30,  -737,  -299,  -737,
  -737,  -276,  -737,  -737,  -737,  -737,  -434,  -737,  -278,  -280,
  -737,  -737,   -78,  -275,  -427,  -737,  -737,   -80,  -428,   -44,
  -253,  -736,  -736,  -347,  -629,  -737,  -647,  -631,  -737,  -636,
  -637,  -737,  -737,  -650,  -737,  -652,  -737,  -366,  -737,  -368,
  -370,  -373,  -376,  -724,  -669,  -679,  -680,  -690,  -694,  -634,
  -737,   -46,  -255,  -348,  -327,  -726,  -711,  -712,  -711,  -712,
  -724,  -737,  -737,   -58,  -455,  -458,  -459,  -460,  -461,  -463,
  -465,  -468,  -469,  -526,  -724,  -481,  -484,  -496,  -500,  -505,
  -507,  -508,  -511,  -512,  -579,  -515,  -517,  -518,  -519,  -524,
  -525,  -737,  -737,  -529,  -530,  -531,  -532,  -533,  -534,  -535,
  -536,  -537,  -538,  -539,  -737,  -737,  -545,   -60,  -737,  -737,
  -698,  -737,  -442,   -72,  -423,  -439,  -271,  -278,  -273,  -737,
  -401,  -737,  -323,  -290,  -289,  -293,  -737,  -702,  -703,  -737,
   -15,   -90,  -737,   -96,  -102,  -724,  -711,  -712,  -274,  -715,
  -113,  -737,   -98,  -737,  -218,  -232,  -724,  -312,  -314,  -316,
  -729,  -736,  -357,  -736,   -64,  -358,  -359,  -335,  -336,  -737,
  -737,  -447,  -338,  -737,  -724,  -711,  -712,  -715,  -318,   -13,
  -125,  -126,  -129,  -724,   -13,  -737,  -343,  -737,  -737,  -724,
  -586,  -589,  -590,  -591,  -592,   -13,  -564,  -567,  -569,  -572,
  -576,  -578,  -139,   -34,  -297,  -737,  -724,  -711,  -712,  -712,
  -711,   -50,  -270,  -737,  -727,  -290,   -40,  -214,   -41,  -215,
   -79,   -42,  -217,   -43,  -216,   -81,  -737,  -737,  -736,  -362,
   -13,  -548,  -736,  -549,  -550,  -724,  -639,  -640,  -640,  -667,
  -696,  -676,  -681,  -695,  -640,  -640,  -687,  -640,  -664,  -682,
  -724,  -737,  -737,  -375,  -665,  -737,  -737,  -737,  -737,  -737,
  -737,  -434,  -456,  -737,  -737,  -466,  -467,  -737,  -737,  -737,
  -486,  -724,  -724,  -480,  -487,  -493,  -737,  -737,  -483,  -737,
  -737,  -737,  -499,  -506,  -510,  -737,  -514,  -516,  -522,  -523,
  -527,  -528,  -540,  -541,  -737,  -603,  -604,  -605,  -126,  -543,
  -737,   -68,  -421,  -401,  -425,  -424,  -737,  -724,  -436,  -402,
  -724,   -13,  -438,  -284,  -294,  -706,   -94,  -434,  -106,  -326,
  -267,  -737,  -360,  -737,  -737,  -337,  -339,  -737,  -737,   -13,
  -434,  -737,  -434,  -737,  -737,   -13,  -346,  -413,  -416,  -418,
  -405,  -737,  -737,  -298,  -434,   -39,  -213,  -279,   -45,  -254,
   -11,   -13,  -554,  -363,  -737,  -737,  -552,  -630,  -737,  -643,
  -737,  -645,  -635,  -737,  -648,  -737,  -651,  -653,  -367,  -369,
  -371,  -374,   -47,  -256,  -737,  -457,  -496,  -462,  -464,  -473,
  -477,  -724,  -724,  -724,  -724,  -724,  -724,  -544,  -478,  -479,
  -503,  -488,  -491,  -494,  -724,  -579,  -728,  -724,  -497,  -501,
  -504,  -509,  -513,  -520,  -521,  -737,  -252,   -13,   -74,  -272,
  -696,  -696,  -382,  -384,  -384,  -384,  -400,  -737,  -724,  -664,
  -672,  -673,  -684,  -440,  -333,  -737,  -334,  -737,  -452,  -293,
  -736,  -340,  -342,  -625,  -737,   -13,   -13,  -737,  -414,  -588,
  -553,   -13,  -618,  -619,  -737,  -737,  -309,  -551,  -640,  -640,
  -640,  -640,  -737,  -737,  -737,  -470,  -471,  -472,  -474,  -475,
  -476,  -495,  -489,  -737,  -482,  -737,  -485,  -737,  -542,  -443,
  -737,  -380,  -381,  -385,  -391,  -393,  -737,  -396,  -737,  -398,
  -403,  -737,  -737,  -671,  -737,   -13,  -448,  -737,  -737,  -444,
  -445,  -446,  -344,  -737,  -737,  -724,  -407,  -409,  -410,  -547,
  -276,  -737,  -737,  -319,  -737,  -641,  -644,  -646,  -649,  -372,
  -497,  -737,  -492,  -498,  -502,  -696,  -674,  -383,  -384,  -384,
  -384,  -384,  -685,  -384,  -404,  -683,  -737,  -319,  -736,   -13,
  -453,  -454,  -417,  -419,  -406,  -737,  -546,  -724,  -711,  -712,
  -715,  -318,  -640,  -737,  -490,  -379,  -737,  -388,  -737,  -390,
  -737,  -394,  -737,  -397,  -399,  -318,  -715,  -361,  -736,  -408,
  -434,  -642,  -384,  -384,  -384,  -384,  -449,  -450,  -451,  -737,
  -386,  -389,  -392,  -395,  -384,  -387 ]

clist = [
'44,451,353,353,470,44,138,138,474,408,509,298,306,310,457,463,337,281',
'282,379,691,415,138,624,294,17,475,830,124,336,17,384,385,315,315,315',
'44,341,341,353,353,353,596,141,141,222,490,490,888,900,703,705,633,699',
'700,120,300,19,797,238,899,17,19,442,44,569,442,981,557,133,214,435',
'436,131,390,294,294,121,448,707,442,616,619,559,789,899,906,299,938',
'17,356,553,510,19,349,349,363,1001,124,561,797,1058,317,317,317,733',
'777,235,608,611,229,229,615,380,380,233,713,380,1071,44,1182,19,302',
'309,311,387,971,1031,44,1014,44,349,349,349,335,374,377,368,736,736',
'1029,333,1036,2,17,781,605,1156,1158,1074,755,755,794,17,794,17,1010',
'791,372,800,4,897,125,316,316,316,213,797,380,380,380,380,396,481,481',
'431,19,381,382,424,984,386,932,473,506,19,897,19,1043,1046,1182,525',
'226,232,8,526,373,824,1054,8,403,405,569,458,654,656,429,650,652,655',
'655,676,283,44,593,593,779,898,1077,467,315,931,490,785,904,44,950,951',
'665,366,375,44,418,419,420,421,784,295,17,376,17,336,898,17,574,1219',
'1158,394,44,637,17,430,441,369,606,441,17,17,370,829,446,447,794,794',
'371,844,516,995,640,441,19,803,19,17,1170,19,416,512,513,1030,812,1071',
'19,1172,1071,1076,1071,842,19,19,423,313,326,327,1134,1078,707,1155',
'730,1067,913,353,315,315,641,19,966,997,457,463,300,315,1178,8,406,848',
'1095,1096,552,563,353,564,422,902,8,336,1141,1169,44,306,336,1204,44',
'910,597,310,341,44,551,229,229,550,1029,963,233,434,434,1173,1149,481',
'1087,124,1226,17,1071,341,1071,17,1071,643,1071,987,17,1189,1037,1042',
'1045,44,805,589,1038,794,317,927,928,621,622,1071,577,937,317,808,44',
'44,940,19,1060,599,585,19,899,808,17,349,19,1061,580,1124,953,1035,578',
'892,906,594,1041,1044,834,17,17,124,734,734,349,1063,1064,1,843,847',
'627,808,138,523,524,407,19,380,409,808,959,410,581,592,560,316,1217',
'587,623,333,683,19,19,316,333,411,688,233,639,1150,880,412,413,866,858',
'885,858,607,414,141,490,850,903,855,845,903,457,463,672,689,1019,1021',
'901,1176,,,,1024,1026,1022,1027,,905,1175,907,664,,,,976,,620,921,895',
'1075,,,797,,458,899,707,707,,,,933,,,721,,,,490,,467,,,442,315,490,',
',,579,771,771,,442,442,,719,,442,442,989,683,677,490,,876,878,1108,973',
',881,883,,,893,682,353,,,755,755,687,980,,,353,,,562,755,597,,977,,1088',
'755,565,458,,597,,,1227,44,899,,,458,,1047,967,341,481,467,315,839,',
',794,,341,990,849,467,,,,736,17,,992,,,,821,458,,823,,755,,44,,458,44',
',,,993,1228,973,467,315,1004,,,930,467,,778,19,,315,793,944,44,17,,349',
'17,825,783,,816,1131,1132,,349,,,458,,1179,,,1180,,,138,846,17,,44,',
',,467,315,19,44,,19,,945,820,,1165,1166,1167,1168,,,,1040,,,,17,1048',
'1049,17,,19,,17,141,,707,707,,17,17,441,,,17,17,1196,,,,1101,441,441',
',,442,441,441,19,,862,19,1151,,1222,19,,1005,1072,,965,19,19,,,,19,19',
'771,,,,875,,1073,,771,,1205,,833,902,,,,771,771,,,,,353,,964,,,281,961',
'1094,1221,,138,353,,,597,,,378,894,,1145,1079,1146,,683,978,,688,,,',
'1109,,1110,,341,1111,,,1118,1119,1120,930,,,1051,341,930,930,677,,,1059',
',,,434,,,,1057,766,766,677,939,991,,,,490,,,44,,,,,44,,1129,,1002,,',
',,,,44,,875,,349,,863,,,17,,1080,,871,17,349,,,,734,1154,,,,,17,,,1013',
',449,,,,380,44,677,,,903,,19,1072,17,511,1072,19,1072,,,,,,,,441,,19',
',,17,1181,,1183,,677,,771,,771,,,771,771,677,19,,432,445,771,1000,,',
',,771,771,1197,,1202,,,19,771,771,,1079,677,994,1079,808,,,,1220,,,',
',1083,,,,,,1072,44,1072,,1072,,1072,,,1125,353,1012,1090,,514,1016,1223',
'771,1224,44,1225,,1059,1072,,44,17,,380,,,1059,,,1100,1174,,,,1234,',
'44,677,,17,1103,,677,677,1093,17,,,,1079,,1080,380,19,1080,,,1080,,1080',
'571,17,573,,,575,576,,,,353,19,766,,1059,,,19,,,766,1000,,,,566,,1065',
',766,766,,44,19,,,,349,,,,,,,,294,1174,,582,,,,,1153,,,1085,17,,1159',
'44,44,,,,,44,1080,,1080,,1080,353,1080,,,,,,771,,,,,,17,17,,771,19,1080',
'17,771,,,677,677,677,1161,,,,349,1188,,939,,294,18,458,44,,,18,668,',
',19,19,,,,,19,,467,315,,,1000,239,,,15,,17,771,,15,,239,239,239,,18',
'342,342,1218,,467,511,,449,,44,,380,380,,,,,,,349,,,19,771,15,,,18,',
',714,,239,239,17,,239,391,401,401,,694,,697,,766,,766,,,766,766,15,',
',,,766,,,,1194,395,766,766,,19,,,,,766,766,,,1190,1191,,,,,724,18,814',
',,,239,239,239,239,18,,18,,,,,,,,,,677,795,,378,15,798,,766,,,,,,15',
',15,780,,,,,,,,786,,788,,,,792,,,,,,,,,,,,795,,,378,801,,,,,,804,,,772',
'772,,445,,,,877,879,,,,882,884,,,818,,18,239,439,239,239,439,239,,,',
',,18,,,,,,18,439,239,239,,,,15,,437,,864,437,,,,,18,,15,795,378,,,,15',
'437,,,,,,,,891,,,1135,1137,1139,,,15,766,,,,,909,,,,766,,,,766,,,,,',
',239,,,,,,,239,239,,,,,,,,239,,,,,,,,914,,,,,,,,,,18,,,766,18,,,,342',
'18,,,,,,,,,,,,,,,,15,,342,,15,,,795,,15,766,,,,18,,974,,,975,1207,1209',
'1211,1213,,1214,,,239,18,18,,,770,770,,,,,15,,,1006,,,,,,,239,,,,,15',
'15,,,,,,772,,,1230,1231,1232,1233,979,772,,,,,,,1235,,772,772,,,,,,1003',
'877,879,884,882,,,,,,,,,,,,,,,,,,,,,,,,239,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,1017,,,,,,239,,,,,,,,,1028,239,,,,,,,,,,,,,,1039,,,,,,,,,,,',
',,,,,,,,,,,,,,1006,,,,,1089,,,,,,,,,,,1069,,,,18,,,,378,,,,342,,239',
',,,,,772,342,772,,,772,772,769,769,15,239,,772,770,,,,,772,772,,770',
'18,,,18,772,772,,,770,770,239,,,,,,,,,,239,,,,18,15,,,15,,,,1115,1116',
'1117,,,,,,,,,772,,,,,1126,15,,18,,,439,239,,,18,,,,,,439,439,,,,439',
'439,,,,,34,15,,,437,34,,,15,,,,,,437,437,,,,437,437,,34,,768,768,,,',
',,,34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,34,34,,,34,,,,,,,',
',,,,,,,,,,,,,770,772,770,,,770,770,,,,772,,770,,772,,,342,770,770,,',
',,,34,770,770,342,,34,34,34,34,34,769,34,,,,,,,769,,,,,,,,,769,769,18',
',767,767,772,18,239,,,,,770,,,,,18,,,,,,,,,15,,,,,15,,765,765,439,,772',
',,,,15,,,,,,,,,,18,,,,,,,,437,,,,,,34,34,34,34,34,34,34,,,,,15,34,,',
',,,34,34,34,34,,,,,,,,,768,,,,,34,,,768,,,,,,,764,764,768,768,,239,',
',,,,,,,,,,,,,,,18,,,,,,770,,,,,,239,,34,770,,,18,770,,34,34,,18,15,',
'769,,769,34,,769,769,,,,,,769,18,,,15,1104,769,769,,34,15,,,34,769,769',
',,34,,,,,,770,,15,,,,1107,,,,,,,,,,,,,,,,,,34,,767,,,769,,,770,18,767',
',,,34,34,34,,,767,767,,1143,,,,,,,,,,765,,15,34,,18,18,,765,43,,18,',
',43,,,765,765,,,,768,,768,,,768,768,,15,15,,293,768,,15,,,,768,768,',
',,43,340,340,768,768,,,1185,,,18,,239,239,,,,,,,,,34,,,239,,,43,,,,',
'764,,15,,,389,293,293,764,768,,,,,,,,764,764,,,18,769,,,,,,,34,,769',
',,,769,,,,34,,,,,,,15,,,,43,,,,,,,,,43,,43,,,,,,,,,767,,767,,,767,767',
',,769,,,767,,,,,,767,767,,,,,,,767,767,,34,765,,765,763,763,765,765',
',,34,,769,765,,,,,,765,765,,,,,,34,765,765,,,,,,,,767,768,34,,,34,,',
',43,768,,34,,768,,,,,,,43,34,,,,34,43,,,765,,,,,,,,,,,,,764,43,764,',
',764,764,,,,34,,764,34,34,768,,34,764,764,,,,34,34,,764,764,34,34,,',
',,,,,20,,,,,20,,,,,768,,,,,,,,,,,,,,,,,,764,,,,,,,,20,350,350,,,,,,43',
',,767,43,,,,340,43,,,767,,,,767,,,,20,,,,,,,340,,,350,350,350,765,,',
',,,43,,,765,,,,765,,,,,,,,43,43,,,,,767,,,763,,,,,,,,763,,,,20,,,,,763',
'763,,,20,,20,,,,765,,767,,,,,,,,,34,,,,,34,34,,,,764,,,,,,34,,,764,',
'765,,764,,,,,,,,,,,34,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,764,20,,20,',
',20,,,,,,,20,,,,,,20,20,,,,,,,,,,,,764,,,,20,,,,,,,,,,,,34,,,,,,,,,',
',,,,,,,34,,,,,,,,763,,763,,34,763,763,43,,,34,,763,,,340,34,,763,763',
',,,,340,,763,763,,,,,34,,,,,,,,,,,20,,43,,20,43,,,350,20,,21,,,,,21',
',,,,,763,,,,43,350,,,,,,,,,,,,20,,,,,,34,,21,344,344,,,,43,20,20,,,',
',43,,,,,,,,,,,,,34,34,21,,,,34,,,,,,393,402,402,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,34,,34,34,,,,21,,,,,,,,34,21,,21,,,,,,,,763,,,,,,,,,763',
',,,763,,,,,34,,,,,,,,,,,,,,,,,,,,,340,,,,,,,,,,,340,,,,,,,763,,,,,,',
',,,,,,,,,,,21,43,440,,,440,43,,,,,,21,,763,,,43,21,440,,,,,20,,,,,,',
',350,,,21,,,,,,350,,,,,,,,,,,43,,,,,,,,,,20,,,20,,,,,,,,,,,,,,,,,,,',
',20,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,21,20,,,21,20,,,344,21,,20,20,,,,20',
'20,43,,,,,,,,,344,,,,,,,,,43,,,21,,,43,,,,,,,,,,,,21,21,,,43,,,,1102',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,43,,,,,,,,,,,,,293',
',,,,,350,,,,,,,,,43,43,350,,,,43,,,,,,,,,,,,,,,,,,,,,,20,,,,,20,,,,',
',,,,,,20,,,293,,,43,,,,,,,,,,,,20,31,,,,,31,,,,,,,,,,,20,,,,,,31,,,',
',,,,,43,31,31,31,,31,,,,,,,21,,,,,,,,344,,,,,,,,,344,,,,31,,,,,31,31',
',,31,,,,,,,,21,,,21,,,,,,,,,,,,,20,,,,,,,,21,,,,,,,854,,,20,,,,31,,20',
',,31,31,31,31,31,,31,,21,,,440,,20,,21,,350,,,,440,440,,,,440,440,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,350,,,,,,,31,31',
'31,31,31,31,31,,20,20,,,31,,20,,,,31,31,31,31,,,,,,,,,,,,,,31,,,,,,',
',,,,,,,,,,,,344,350,,,20,,,,,,,344,,,,,,,,,,,,,,,,31,,,,,,,31,31,,21',
',,,,21,31,,,,,20,,,,,21,,,,,,,,31,,,,31,,,,,31,440,,,,,,,,,,,,,,,,,21',
',,,,,,,,,,,31,,,,,,,,,,,,,,31,31,31,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,,,,,,,,,,,21,,,,,,21,,,,,,31,246,,,',
',,,,,21,314,314,314,1106,,,,,,,,,361,362,,364,365,,367,,,,,,,,,,,31',
',,,314,314,,,,,31,,,,,,,,,,,,,,,,21,,,,,,,,,,,,,402,,,,,,,,,,,,,,,21',
'21,,,,,21,,,,,,,,,,31,,,,,,,,,,31,,,,,,,,,,,,,,,,31,,,,,402,,,21,,,',
'31,,,31,,,,,,,31,,,,,,,,,,31,,,,31,,,,,,,,,,,,,,,,21,,,,,314,444,,,450',
'314,31,,,31,31,,,31,,,,,450,31,31,,,,31,31,,,,,,246,,,,,,,527,528,529',
'530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546',
'547,548,,,,,549,,,,,,,,,,,,,,,,,,,,,,,314,314,,,,,,,,314,,,,,,,314,',
'314,,,314,314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,602,,603,,,,,',
',,,,,,,,,,,,,,,,,,,,31,,,,,31,31,,,,,,,,,,31,,,,,,,,,,,,,,,,,,31,,,',
',314,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,690,,,,,,,,,,,,,,,,,,,,,,,',
',,314,,,,,,,,,,,,,,722,31,,,,,,,,,314,,450,450,450,,,,31,,,,,,,,,,,',
'31,,,,,,31,,,,,,31,,,,,,,,362,,,,,,,,31,,314,,314,,314,,,,,,,,,,,,,',
',,314,,,,,,,,,,450,,,815,,,,,,,,314,,,314,,,,,,,,,,31,,,314,314,,,,',
',,,,,314,,,,,,,,,,,,,,31,31,,,,,31,,,,,,,,,,,,,314,450,314,,,,872,,',
'314,314,450,450,,,,450,450,,,,,,314,,,,,,,,31,,31,31,,,314,,,,,,,,,31',
',,,,,,,,,,,,,,,690,722,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,314,,,,,,,,,314,,,314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,314,,,,,,,,450,,,,,,,,,,,,,1008,1009,',
',,,,,,,,,,,,,,,,,,,,,,,,,,1032,1033,450,450,450,450,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,1066,,,,,,,,,,,,,,,,,,,,,,,,,,,,314,,,,,,,,,',
',,,,,,,,,314,,,,,,,,,,,,,,,,,,,,,,,,,,,450,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,314' ]
        racc_goto_table = arr = ::Array.new(4998, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'71,31,81,81,10,71,74,74,137,191,10,151,89,89,54,54,67,48,46,105,12,191',
'74,110,71,29,90,111,114,11,29,44,44,36,36,36,71,71,71,81,81,81,69,76',
'76,33,223,223,13,128,221,221,72,132,132,5,33,34,232,22,224,29,34,20',
'71,92,20,109,56,17,17,24,24,9,71,71,71,7,28,123,20,108,108,31,57,224',
'228,50,180,29,68,54,28,34,34,34,79,142,114,90,232,185,88,88,88,41,41',
'40,87,87,85,85,87,26,26,115,124,26,127,71,229,34,55,55,55,5,140,125',
'71,200,71,34,34,34,64,88,88,40,170,170,122,63,186,3,29,154,10,144,145',
'138,193,193,93,29,93,29,14,154,85,16,2,222,6,86,86,86,18,232,26,26,26',
'26,21,218,218,25,34,19,19,27,13,19,169,150,150,34,222,34,171,171,229',
'42,35,35,8,43,86,45,171,8,73,73,92,89,207,207,11,208,208,208,208,32',
'49,71,217,217,51,139,142,74,36,168,223,59,139,71,195,195,77,82,84,71',
'19,19,19,19,91,103,29,104,29,11,139,29,191,144,145,112,71,113,29,22',
'22,116,117,22,29,29,8,110,26,26,93,93,118,119,33,120,121,22,34,69,34',
'29,185,34,6,26,26,126,69,127,34,185,127,130,127,72,34,34,2,62,62,62',
'135,136,123,143,31,140,123,81,36,36,146,34,57,147,54,54,33,36,138,8',
'148,149,152,153,155,157,81,158,8,193,8,11,142,125,71,89,11,185,71,124',
'67,89,71,71,26,85,85,50,122,161,115,86,86,186,162,218,163,114,164,29',
'127,71,127,29,127,150,127,165,29,166,173,169,169,71,31,33,175,93,88',
'176,177,11,11,127,5,181,88,54,71,71,182,34,188,33,68,34,224,54,29,34',
'34,189,9,180,198,168,7,199,228,79,168,168,31,29,29,114,167,167,34,195',
'195,1,31,10,33,54,74,35,35,203,34,26,204,54,72,205,64,40,86,86,109,64',
'5,63,89,34,34,86,63,206,89,115,26,13,56,209,210,31,208,56,208,40,211',
'76,223,212,133,213,216,133,54,54,33,36,221,221,226,227,,,,221,221,132',
'221,,137,128,137,17,,,,69,,19,32,90,139,,,232,,89,224,123,123,,,,32',
',,36,,,,223,,74,,,20,36,223,,,,8,71,71,,20,20,,114,,20,20,108,89,40',
'223,,28,28,139,92,,28,28,,,24,55,81,,,193,193,55,87,,,81,,,62,193,67',
',32,,41,193,62,89,,67,,,13,71,224,,,89,,72,90,71,218,74,36,44,,,93,',
'71,32,150,74,,,,170,29,,32,,,,11,89,,11,,193,,71,,89,71,,,,10,111,92',
'74,36,32,,,167,74,,40,34,,36,88,167,71,29,,34,29,114,55,,26,132,132',
',34,,,89,,139,,,139,,,74,114,29,,71,,,,74,36,34,71,,34,,191,88,,221',
'221,221,221,,,,32,,,,29,32,32,29,,34,,29,76,,123,123,,29,29,22,,,29',
'29,12,,,,108,22,22,,,20,22,22,34,,17,34,110,,139,34,,28,133,,105,34',
'34,,,,34,34,71,,,,88,,137,,71,,132,,86,193,,,,71,71,,,,,81,,151,,,48',
'46,10,221,,74,81,,,67,,,83,85,,108,223,108,,89,67,,89,,,,137,,137,,71',
'137,,,32,32,32,167,,,184,71,167,167,40,,,184,,,,86,,,,167,98,98,40,40',
'11,,,,223,,,71,,,,,71,,10,,11,,,,,,,71,,88,,34,,8,,,29,,225,,8,29,34',
',,,167,10,,,,,29,,,11,,78,,,,26,71,40,,,133,,34,133,29,78,133,34,133',
',,,,,,,22,,34,,,29,137,,137,,40,,71,,71,,,71,71,40,34,,83,83,71,40,',
',,,71,71,31,,137,,,34,71,71,,223,40,19,223,54,,,,32,,,,,11,,,,,,133',
'71,133,,133,,133,,,191,81,85,11,,65,85,137,71,137,71,137,,184,133,,71',
'29,,26,,,184,,,11,184,,,,137,,71,40,,29,71,,40,40,114,29,,,,223,,225',
'26,34,225,,,225,,225,83,29,83,,,83,83,,,,81,34,98,,184,,,34,,,98,40',
',,,65,,19,,98,98,,71,34,,,,34,,,,,,,,71,184,,65,,,,,11,,,19,29,,11,71',
'71,,,,,71,225,,225,,225,81,225,,,,,,71,,,,,,29,29,,71,34,225,29,71,',
',40,40,40,33,,,,34,11,,40,,71,30,89,71,,,30,83,,,34,34,,,,,34,,74,36',
',,40,30,,,23,,29,71,,23,,30,30,30,,30,30,30,11,,74,78,,78,,71,,26,26',
',,,,,,34,,,34,71,23,,,30,,,83,,30,30,29,,30,30,30,30,,65,,65,,98,,98',
',,98,98,23,,,,,98,,,,40,23,98,98,,34,,,,,98,98,,,19,19,,,,,65,30,78',
',,,30,30,30,30,30,,30,,,,,,,,,,40,83,,83,23,83,,98,,,,,,23,,23,65,,',
',,,,,65,,65,,,,65,,,,,,,,,,,,83,,,83,65,,,,,,65,,,107,107,,83,,,,78',
'78,,,,78,78,,,65,,30,30,30,30,30,30,30,,,,,,30,,,,,,30,30,30,30,,,,23',
',23,,83,23,,,,,30,,23,83,83,,,,23,23,,,,,,,,83,,,134,134,134,,,23,98',
',,,,83,,,,98,,,,98,,,,,,,30,,,,,,,30,30,,,,,,,,30,,,,,,,,65,,,,,,,,',
',30,,,98,30,,,,30,30,,,,,,,,,,,,,,,,23,,30,,23,,,83,,23,98,,,,30,,83',
',,83,134,134,134,134,,134,,,30,30,30,,,102,102,,,,,23,,,78,,,,,,,30',
',,,,23,23,,,,,,107,,,134,134,134,134,65,107,,,,,,,134,,107,107,,,,,',
'83,78,78,78,78,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,65,,,,,,30,,,,,,,,,65,30,,,,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,',
',,,,78,,,,,83,,,,,,,,,,,65,,,,30,,,,83,,,,30,,30,,,,,,107,30,107,,,107',
'107,101,101,23,30,,107,102,,,,,107,107,,102,30,,,30,107,107,,,102,102',
'30,,,,,,,,,,30,,,,30,23,,,23,,,,65,65,65,,,,,,,,,107,,,,,65,23,,30,',
',30,30,,,30,,,,,,30,30,,,,30,30,,,,,61,23,,,23,61,,,23,,,,,,23,23,,',
',23,23,,61,,100,100,,,,,,,61,61,61,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,61',
',,,,61,61,,,61,,,,,,,,,,,,,,,,,,,,,102,107,102,,,102,102,,,,107,,102',
',107,,,30,102,102,,,,,,61,102,102,30,,61,61,61,61,61,101,61,,,,,,,101',
',,,,,,,,101,101,30,,99,99,107,30,30,,,,,102,,,,,30,,,,,,,,,23,,,,,23',
',97,97,30,,107,,,,,23,,,,,,,,,,30,,,,,,,,23,,,,,,61,61,61,61,61,61,61',
',,,,23,61,,,,,,61,61,61,61,,,,,,,,,100,,,,,61,,,100,,,,,,,96,96,100',
'100,,30,,,,,,,,,,,,,,,,,30,,,,,,102,,,,,,30,,61,102,,,30,102,,61,61',
',30,23,,101,,101,61,,101,101,,,,,,101,30,,,23,30,101,101,,61,23,,,61',
'101,101,,,61,,,,,,102,,23,,,,23,,,,,,,,,,,,,,,,,,61,,99,,,101,,,102',
'30,99,,,,61,61,61,,,99,99,,30,,,,,,,,,,97,,23,61,,30,30,,97,70,,30,',
',70,,,97,97,,,,100,,100,,,100,100,,23,23,,70,100,,23,,,,100,100,,,,70',
'70,70,100,100,,,30,,,30,,30,30,,,,,,,,,61,,,30,,,70,,,,,96,,23,,,70',
'70,70,96,100,,,,,,,,96,96,,,30,101,,,,,,,61,,101,,,,101,,,,61,,,,,,',
'23,,,,70,,,,,,,,,70,,70,,,,,,,,,99,,99,,,99,99,,,101,,,99,,,,,,99,99',
',,,,,,99,99,,61,97,,97,95,95,97,97,,,61,,101,97,,,,,,97,97,,,,,,61,97',
'97,,,,,,,,99,100,61,,,61,,,,70,100,,61,,100,,,,,,,70,61,,,,61,70,,,97',
',,,,,,,,,,,,96,70,96,,,96,96,,,,61,,96,61,61,100,,61,96,96,,,,61,61',
',96,96,61,61,,,,,,,,38,,,,,38,,,,,100,,,,,,,,,,,,,,,,,,96,,,,,,,,38',
'38,38,,,,,,70,,,99,70,,,,70,70,,,99,,,,99,,,,38,,,,,,,70,,,38,38,38',
'97,,,,,,70,,,97,,,,97,,,,,,,,70,70,,,,,99,,,95,,,,,,,,95,,,,38,,,,,95',
'95,,,38,,38,,,,97,,99,,,,,,,,,61,,,,,61,61,,,,96,,,,,,61,,,96,,97,,96',
',,,,,,,,,,61,,,,,,,,,,,,,,,,,61,,,,,,,,,,,,,,,,96,38,,38,,,38,,,,,,',
'38,,,,,,38,38,,,,,,,,,,,,96,,,,38,,,,,,,,,,,,61,,,,,,,,,,,,,,,,,61,',
',,,,,,95,,95,,61,95,95,70,,,61,,95,,,70,61,,95,95,,,,,70,,95,95,,,,',
'61,,,,,,,,,,,38,,70,,38,70,,,38,38,,39,,,,,39,,,,,,95,,,,70,38,,,,,',
',,,,,,38,,,,,,61,,39,39,39,,,,70,38,38,,,,,70,,,,,,,,,,,,,61,61,39,',
',,61,,,,,,39,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,61,,61,61,,,,39',
',,,,,,,61,39,,39,,,,,,,,95,,,,,,,,,95,,,,95,,,,,61,,,,,,,,,,,,,,,,,',
',,,70,,,,,,,,,,,70,,,,,,,95,,,,,,,,,,,,,,,,,,39,70,39,,,39,70,,,,,,39',
',95,,,70,39,39,,,,,38,,,,,,,,38,,,39,,,,,,38,,,,,,,,,,,70,,,,,,,,,,38',
',,38,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,39,38,,,39',
'38,,,39,39,,38,38,,,,38,38,70,,,,,,,,,39,,,,,,,,,70,,,39,,,70,,,,,,',
',,,,,39,39,,,70,,,,70,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,70,,,,,,,,,,,,,70,,,,,,38,,,,,,,,,70,70,38,,,,70,,,,,,,,,,,,,,',
',,,,,,,38,,,,,38,,,,,,,,,,,38,,,70,,,70,,,,,,,,,,,,38,58,,,,,58,,,,',
',,,,,,38,,,,,,58,,,,,,,,,70,58,58,58,,58,,,,,,,39,,,,,,,,39,,,,,,,,',
'39,,,,58,,,,,58,58,,,58,,,,,,,,39,,,39,,,,,,,,,,,,,38,,,,,,,,39,,,,',
',,39,,,38,,,,58,,38,,,58,58,58,58,58,,58,,39,,,39,,38,,39,,38,,,,39',
'39,,,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,',
'38,,,,,,,58,58,58,58,58,58,58,,38,38,,,58,,38,,,,58,58,58,58,,,,,,,',
',,,,,,58,,,,,,,,,,,,,,,,,,,39,38,,,38,,,,,,,39,,,,,,,,,,,,,,,,58,,,',
',,,58,58,,39,,,,,39,58,,,,,38,,,,,39,,,,,,,,58,,,,58,,,,,58,39,,,,,',
',,,,,,,,,,,39,,,,,,,,,,,,58,,,,,,,,,,,,,,58,58,58,,,,,,,,,,,,,,,,,,',
'58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,39,,,,,,39,',
',,,,58,37,,,,,,,,,39,37,37,37,39,,,,,,,,,37,37,,37,37,,37,,,,,,,,,,',
'58,,,,37,37,,,,,58,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,39,,,,,,,,,,,,,,,39',
'39,,,,,39,,,,,,,,,,58,,,,,,,,,,58,,,,,,,,,,,,,,,,58,,,,,39,,,39,,,,58',
',,58,,,,,,,58,,,,,,,,,,58,,,,58,,,,,,,,,,,,,,,,39,,,,,37,37,,,37,37',
'58,,,58,58,,,58,,,,,37,58,58,,,,58,58,,,,,,37,,,,,,,37,37,37,37,37,37',
'37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,,,,,37,,,,,,,,,,,,,',
',,,,,,,,,37,37,,,,,,,,37,,,,,,,37,,37,,,37,37,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,37,,37,,,,,,,,,,,,,,,,,,,,,,,,,,58,,,,,58,58,,,,,',
',,,,58,,,,,,,,,,,,,,,,,,58,,,,,37,,,,,,,,,,,,58,,,,,,,,,,,,,,,,,,,,',
',,37,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,37,58,,,,,,,,,37,,37,37',
'37,,,,58,,,,,,,,,,,,58,,,,,,58,,,,,,58,,,,,,,,37,,,,,,,,58,,37,,37,',
'37,,,,,,,,,,,,,,,,37,,,,,,,,,,37,,,37,,,,,,,,37,,,37,,,,,,,,,,58,,,37',
'37,,,,,,,,,,37,,,,,,,,,,,,,,58,58,,,,,58,,,,,,,,,,,,,37,37,37,,,,37',
',,37,37,37,37,,,,37,37,,,,,,37,,,,,,,,58,,58,58,,,37,,,,,,,,,58,,,,',
',,,,,,,,,,,37,37,,,,,,,,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,37,,,,,,,,,37,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,37,,,,,,,,37,,,,,,,,,,,,,37,37,,,,,,,,,,,,,,,,',
',,,,,,,,,,,37,37,37,37,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,',
',,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,37' ]
        racc_goto_check = arr = ::Array.new(4998, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   415,   158,   143,   nil,    50,   155,    72,   192,    64,
  -223,    -9,  -449,  -643,  -732,   nil,  -419,    59,   155,   106,
  -154,    96,    35,  1164,  -145,   -41,    42,    46,  -142,    23,
  1139,  -220,  -240,    27,    55,   173,    -1,  3837,  2520,  2859,
    84,  -420,   -61,   -58,   -42,  -423,    -8,   nil,    -9,   186,
    58,  -334,   nil,   nil,  -208,    91,  -234,  -479,  3392,  -333,
   nil,  1828,   257,   103,    96,   746,   nil,   -23,    50,  -315,
  2236,    -2,  -347,   123,    -4,   nil,    33,  -200,   663,    48,
   nil,   -37,   178,   714,   163,    91,   129,  -265,    68,   -19,
  -204,  -317,  -252,  -416,   nil,  1885,  1563,  1485,   301,  1455,
  1329,  1215,  1002,   211,   171,   -50,   nil,   811,  -300,  -754,
  -364,  -596,   171,  -154,    23,    95,   188,  -116,   198,  -372,
  -579,  -137,  -771,  -412,  -375,  -785,  -632,  -852,  -649,   nil,
  -685,   nil,  -423,  -238,   336,  -779,  -675,  -222,  -821,  -478,
  -664,   nil,  -752,  -800,  -950,  -949,  -102,  -541,   232,  -326,
   -47,   -16,  -682,  -682,  -407,    21,   nil,    12,    13,   nil,
   nil,  -439,  -742,  -637,  -866,  -470,  -783,  -115,  -523,  -562,
  -387,  -739,   nil,  -559,   nil,  -554,  -370,  -369,   nil,   nil,
  -657,  -366,  -362,   nil,  -124,  -840,  -780,   nil,  -557,  -548,
   nil,   -78,   nil,  -375,   nil,  -535,   nil,   nil,  -376,  -291,
  -763,   nil,   nil,   338,   336,   338,   351,  -207,  -202,   356,
   356,   361,  -188,  -187,   nil,   nil,  -176,  -135,   -57,   nil,
   nil,  -429,  -534,  -184,  -635,  -106,  -228,  -659,  -616, -1016,
   nil,   nil,  -512 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,     6,   388,   331,   nil,
   nil,   469,   nil,   982,   nil,   328,   329,   nil,   nil,   nil,
    13,    14,    22,   244,   nil,   nil,    16,   nil,   438,   245,
   360,   nil,   nil,   635,   248,   nil,    27,    25,   249,   243,
   515,   nil,   nil,   nil,   nil,   nil,   nil,   383,   140,   nil,
   nil,   nil,    28,    29,   811,   nil,   nil,   nil,   348,   nil,
    30,   345,   452,    37,   nil,   nil,    39,    42,    41,   nil,
   240,   241,   400,   nil,   460,   139,    84,   nil,   443,   100,
    51,    54,   280,   320,   nil,   889,   453,   nil,   454,   465,
   nil,   684,   567,   318,   304,    55,    56,    57,    58,    59,
    60,    61,    62,    63,   nil,   305,    69,    70,   nil,   nil,
   nil,   nil,   nil,   nil,   617,   227,   nil,   nil,   nil,   nil,
   nil,   nil,   709,   489,   nil,   710,   711,   477,   471,   472,
  1177,  1070,   nil,   478,   nil,   nil,   nil,   507,   nil,   480,
   nil,   969,   nil,   nil,   nil,   487,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   464,   nil,   nil,   790,
   782,   nil,   nil,   nil,   nil,   nil,   nil,  1050,   nil,   735,
   935,   737,   738,   742,   739,   740,   nil,   nil,   741,   743,
   nil,   nil,   nil,   934,   936,   nil,   747,   749,   750,   751,
   752,   nil,   756,   498,   757,   758,   759,   760,   nil,   nil,
   nil,    83,    85,    86,   nil,   nil,   nil,   nil,   645,   nil,
   nil,   nil,   nil,   nil,    96,    97,   nil,   228,   896,   231,
   476,   696,   479,   908,   492,   494,   495,  1081,   499,  1082,
   502,   505,   323 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  0, 151, :_reduce_4,
  1, 151, :_reduce_5,
  3, 151, :_reduce_6,
  2, 151, :_reduce_7,
  1, 153, :_reduce_none,
  2, 153, :_reduce_9,
  3, 156, :_reduce_10,
  4, 157, :_reduce_11,
  2, 158, :_reduce_12,
  0, 162, :_reduce_13,
  1, 162, :_reduce_14,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  1, 163, :_reduce_none,
  2, 163, :_reduce_18,
  0, 174, :_reduce_19,
  4, 155, :_reduce_20,
  3, 155, :_reduce_21,
  3, 155, :_reduce_22,
  3, 155, :_reduce_23,
  2, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  3, 155, :_reduce_29,
  4, 155, :_reduce_30,
  1, 155, :_reduce_none,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  5, 155, :_reduce_34,
  3, 155, :_reduce_35,
  1, 155, :_reduce_none,
  3, 167, :_reduce_37,
  3, 167, :_reduce_38,
  6, 167, :_reduce_39,
  5, 167, :_reduce_40,
  5, 167, :_reduce_41,
  5, 167, :_reduce_42,
  5, 167, :_reduce_43,
  4, 167, :_reduce_44,
  6, 167, :_reduce_45,
  4, 167, :_reduce_46,
  6, 167, :_reduce_47,
  3, 167, :_reduce_48,
  1, 175, :_reduce_none,
  3, 175, :_reduce_50,
  1, 175, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_53,
  3, 173, :_reduce_54,
  3, 173, :_reduce_55,
  2, 173, :_reduce_56,
  0, 189, :_reduce_57,
  4, 173, :_reduce_58,
  0, 190, :_reduce_59,
  4, 173, :_reduce_60,
  1, 173, :_reduce_none,
  1, 166, :_reduce_none,
  0, 194, :_reduce_63,
  3, 191, :_reduce_64,
  1, 193, :_reduce_65,
  2, 181, :_reduce_66,
  0, 198, :_reduce_67,
  5, 185, :_reduce_68,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 199, :_reduce_none,
  4, 199, :_reduce_72,
  0, 206, :_reduce_73,
  4, 203, :_reduce_74,
  1, 205, :_reduce_none,
  2, 183, :_reduce_76,
  3, 183, :_reduce_77,
  4, 183, :_reduce_78,
  5, 183, :_reduce_79,
  4, 183, :_reduce_80,
  5, 183, :_reduce_81,
  2, 183, :_reduce_82,
  2, 183, :_reduce_83,
  2, 183, :_reduce_84,
  2, 183, :_reduce_85,
  2, 183, :_reduce_86,
  1, 168, :_reduce_87,
  3, 168, :_reduce_88,
  1, 211, :_reduce_89,
  3, 211, :_reduce_90,
  1, 210, :_reduce_none,
  2, 210, :_reduce_92,
  3, 210, :_reduce_93,
  5, 210, :_reduce_94,
  2, 210, :_reduce_95,
  4, 210, :_reduce_96,
  2, 210, :_reduce_97,
  4, 210, :_reduce_98,
  1, 210, :_reduce_99,
  3, 210, :_reduce_100,
  1, 214, :_reduce_none,
  3, 214, :_reduce_102,
  2, 213, :_reduce_103,
  3, 213, :_reduce_104,
  1, 216, :_reduce_105,
  3, 216, :_reduce_106,
  1, 215, :_reduce_107,
  1, 215, :_reduce_108,
  4, 215, :_reduce_109,
  3, 215, :_reduce_110,
  3, 215, :_reduce_111,
  3, 215, :_reduce_112,
  3, 215, :_reduce_113,
  2, 215, :_reduce_114,
  1, 215, :_reduce_115,
  1, 170, :_reduce_116,
  1, 170, :_reduce_117,
  4, 170, :_reduce_118,
  3, 170, :_reduce_119,
  3, 170, :_reduce_120,
  3, 170, :_reduce_121,
  3, 170, :_reduce_122,
  2, 170, :_reduce_123,
  1, 170, :_reduce_124,
  1, 219, :_reduce_125,
  1, 219, :_reduce_none,
  2, 220, :_reduce_127,
  1, 220, :_reduce_128,
  3, 220, :_reduce_129,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 164, :_reduce_135,
  1, 164, :_reduce_none,
  1, 165, :_reduce_137,
  0, 224, :_reduce_138,
  4, 165, :_reduce_139,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  3, 184, :_reduce_211,
  3, 184, :_reduce_212,
  6, 184, :_reduce_213,
  5, 184, :_reduce_214,
  5, 184, :_reduce_215,
  5, 184, :_reduce_216,
  5, 184, :_reduce_217,
  4, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 184, :_reduce_221,
  2, 184, :_reduce_222,
  2, 184, :_reduce_223,
  2, 184, :_reduce_224,
  2, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  3, 184, :_reduce_230,
  3, 184, :_reduce_231,
  4, 184, :_reduce_232,
  2, 184, :_reduce_233,
  2, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  3, 184, :_reduce_237,
  3, 184, :_reduce_238,
  1, 184, :_reduce_none,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  3, 184, :_reduce_243,
  3, 184, :_reduce_244,
  2, 184, :_reduce_245,
  2, 184, :_reduce_246,
  3, 184, :_reduce_247,
  3, 184, :_reduce_248,
  3, 184, :_reduce_249,
  3, 184, :_reduce_250,
  3, 184, :_reduce_251,
  6, 184, :_reduce_252,
  4, 184, :_reduce_253,
  6, 184, :_reduce_254,
  4, 184, :_reduce_255,
  6, 184, :_reduce_256,
  1, 184, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  3, 227, :_reduce_262,
  3, 227, :_reduce_263,
  1, 230, :_reduce_none,
  1, 231, :_reduce_none,
  2, 231, :_reduce_none,
  4, 231, :_reduce_267,
  2, 231, :_reduce_268,
  1, 225, :_reduce_none,
  3, 225, :_reduce_270,
  3, 236, :_reduce_271,
  5, 236, :_reduce_272,
  3, 236, :_reduce_273,
  0, 238, :_reduce_274,
  1, 238, :_reduce_none,
  0, 178, :_reduce_276,
  1, 178, :_reduce_none,
  2, 178, :_reduce_none,
  4, 178, :_reduce_279,
  2, 178, :_reduce_280,
  1, 209, :_reduce_281,
  2, 209, :_reduce_282,
  2, 209, :_reduce_283,
  4, 209, :_reduce_284,
  1, 209, :_reduce_285,
  0, 241, :_reduce_286,
  2, 202, :_reduce_287,
  2, 240, :_reduce_288,
  2, 239, :_reduce_289,
  0, 239, :_reduce_290,
  1, 233, :_reduce_291,
  2, 233, :_reduce_292,
  3, 233, :_reduce_293,
  4, 233, :_reduce_294,
  1, 172, :_reduce_295,
  1, 172, :_reduce_none,
  3, 171, :_reduce_297,
  4, 171, :_reduce_298,
  2, 171, :_reduce_299,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_310,
  0, 263, :_reduce_311,
  4, 228, :_reduce_312,
  0, 264, :_reduce_313,
  4, 228, :_reduce_314,
  0, 265, :_reduce_315,
  4, 228, :_reduce_316,
  3, 228, :_reduce_317,
  3, 228, :_reduce_318,
  2, 228, :_reduce_319,
  3, 228, :_reduce_320,
  3, 228, :_reduce_321,
  1, 228, :_reduce_322,
  4, 228, :_reduce_323,
  3, 228, :_reduce_324,
  1, 228, :_reduce_325,
  5, 228, :_reduce_326,
  4, 228, :_reduce_327,
  3, 228, :_reduce_328,
  2, 228, :_reduce_329,
  1, 228, :_reduce_none,
  2, 228, :_reduce_331,
  1, 228, :_reduce_none,
  6, 228, :_reduce_333,
  6, 228, :_reduce_334,
  4, 228, :_reduce_335,
  4, 228, :_reduce_336,
  5, 228, :_reduce_337,
  4, 228, :_reduce_338,
  5, 228, :_reduce_339,
  6, 228, :_reduce_340,
  0, 266, :_reduce_341,
  6, 228, :_reduce_342,
  0, 267, :_reduce_343,
  7, 228, :_reduce_344,
  0, 268, :_reduce_345,
  5, 228, :_reduce_346,
  4, 228, :_reduce_347,
  4, 228, :_reduce_348,
  1, 228, :_reduce_349,
  1, 228, :_reduce_350,
  1, 228, :_reduce_351,
  1, 228, :_reduce_352,
  1, 177, :_reduce_none,
  1, 208, :_reduce_354,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_357,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 256, :_reduce_none,
  5, 256, :_reduce_361,
  1, 160, :_reduce_none,
  2, 160, :_reduce_363,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 269, :_reduce_366,
  3, 269, :_reduce_367,
  1, 272, :_reduce_368,
  3, 272, :_reduce_369,
  1, 271, :_reduce_none,
  3, 271, :_reduce_371,
  5, 271, :_reduce_372,
  1, 271, :_reduce_373,
  3, 271, :_reduce_374,
  2, 273, :_reduce_375,
  1, 273, :_reduce_376,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  4, 277, :_reduce_379,
  2, 277, :_reduce_380,
  2, 277, :_reduce_381,
  1, 277, :_reduce_382,
  2, 281, :_reduce_383,
  0, 281, :_reduce_384,
  1, 282, :_reduce_none,
  6, 283, :_reduce_386,
  8, 283, :_reduce_387,
  4, 283, :_reduce_388,
  6, 283, :_reduce_389,
  4, 283, :_reduce_390,
  2, 283, :_reduce_none,
  6, 283, :_reduce_392,
  2, 283, :_reduce_393,
  4, 283, :_reduce_394,
  6, 283, :_reduce_395,
  2, 283, :_reduce_396,
  4, 283, :_reduce_397,
  2, 283, :_reduce_398,
  4, 283, :_reduce_399,
  1, 283, :_reduce_none,
  0, 287, :_reduce_401,
  1, 287, :_reduce_402,
  3, 288, :_reduce_403,
  4, 288, :_reduce_404,
  1, 289, :_reduce_405,
  4, 289, :_reduce_406,
  1, 290, :_reduce_407,
  3, 290, :_reduce_408,
  1, 291, :_reduce_409,
  1, 291, :_reduce_none,
  0, 295, :_reduce_411,
  0, 296, :_reduce_412,
  5, 254, :_reduce_413,
  4, 293, :_reduce_414,
  1, 293, :_reduce_415,
  0, 299, :_reduce_416,
  4, 294, :_reduce_417,
  0, 300, :_reduce_418,
  4, 294, :_reduce_419,
  0, 302, :_reduce_420,
  4, 298, :_reduce_421,
  2, 200, :_reduce_422,
  4, 200, :_reduce_423,
  5, 200, :_reduce_424,
  5, 200, :_reduce_425,
  2, 253, :_reduce_426,
  4, 253, :_reduce_427,
  4, 253, :_reduce_428,
  3, 253, :_reduce_429,
  3, 253, :_reduce_430,
  3, 253, :_reduce_431,
  2, 253, :_reduce_432,
  1, 253, :_reduce_433,
  4, 253, :_reduce_434,
  0, 304, :_reduce_435,
  4, 252, :_reduce_436,
  0, 305, :_reduce_437,
  4, 252, :_reduce_438,
  0, 306, :_reduce_439,
  3, 204, :_reduce_440,
  0, 307, :_reduce_441,
  0, 308, :_reduce_442,
  4, 301, :_reduce_443,
  5, 257, :_reduce_444,
  1, 309, :_reduce_445,
  1, 309, :_reduce_none,
  0, 312, :_reduce_447,
  0, 313, :_reduce_448,
  7, 258, :_reduce_449,
  1, 311, :_reduce_450,
  1, 311, :_reduce_none,
  1, 310, :_reduce_452,
  3, 310, :_reduce_453,
  3, 310, :_reduce_454,
  1, 188, :_reduce_none,
  2, 188, :_reduce_456,
  3, 188, :_reduce_457,
  1, 188, :_reduce_458,
  1, 188, :_reduce_459,
  1, 188, :_reduce_460,
  1, 314, :_reduce_none,
  3, 319, :_reduce_462,
  1, 319, :_reduce_none,
  3, 321, :_reduce_464,
  1, 321, :_reduce_none,
  1, 323, :_reduce_466,
  1, 324, :_reduce_467,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  4, 322, :_reduce_470,
  4, 322, :_reduce_471,
  4, 322, :_reduce_472,
  3, 322, :_reduce_473,
  4, 322, :_reduce_474,
  4, 322, :_reduce_475,
  4, 322, :_reduce_476,
  3, 322, :_reduce_477,
  3, 322, :_reduce_478,
  3, 322, :_reduce_479,
  2, 322, :_reduce_480,
  0, 328, :_reduce_481,
  4, 322, :_reduce_482,
  2, 322, :_reduce_483,
  0, 329, :_reduce_484,
  4, 322, :_reduce_485,
  1, 315, :_reduce_486,
  1, 315, :_reduce_487,
  2, 315, :_reduce_488,
  3, 315, :_reduce_489,
  5, 315, :_reduce_490,
  2, 315, :_reduce_491,
  4, 315, :_reduce_492,
  1, 315, :_reduce_none,
  2, 330, :_reduce_494,
  3, 330, :_reduce_495,
  1, 317, :_reduce_496,
  3, 317, :_reduce_497,
  5, 316, :_reduce_498,
  2, 333, :_reduce_499,
  1, 333, :_reduce_500,
  1, 332, :_reduce_501,
  3, 332, :_reduce_502,
  1, 331, :_reduce_none,
  3, 318, :_reduce_504,
  1, 318, :_reduce_505,
  2, 318, :_reduce_506,
  1, 318, :_reduce_507,
  1, 334, :_reduce_508,
  3, 334, :_reduce_509,
  2, 336, :_reduce_510,
  1, 336, :_reduce_511,
  1, 337, :_reduce_512,
  3, 337, :_reduce_513,
  2, 339, :_reduce_514,
  1, 339, :_reduce_515,
  2, 341, :_reduce_516,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  1, 325, :_reduce_none,
  3, 325, :_reduce_520,
  3, 325, :_reduce_521,
  2, 325, :_reduce_522,
  2, 325, :_reduce_523,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 325, :_reduce_527,
  2, 325, :_reduce_528,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_537,
  1, 342, :_reduce_none,
  1, 320, :_reduce_539,
  2, 343, :_reduce_540,
  2, 343, :_reduce_541,
  4, 344, :_reduce_542,
  2, 326, :_reduce_543,
  3, 326, :_reduce_544,
  1, 326, :_reduce_545,
  6, 159, :_reduce_546,
  0, 159, :_reduce_547,
  1, 346, :_reduce_548,
  1, 346, :_reduce_none,
  1, 346, :_reduce_none,
  2, 347, :_reduce_551,
  1, 347, :_reduce_none,
  2, 161, :_reduce_553,
  1, 161, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 243, :_reduce_557,
  1, 349, :_reduce_558,
  2, 349, :_reduce_559,
  3, 350, :_reduce_560,
  1, 350, :_reduce_561,
  1, 350, :_reduce_562,
  3, 244, :_reduce_563,
  4, 245, :_reduce_564,
  3, 246, :_reduce_565,
  0, 353, :_reduce_566,
  3, 353, :_reduce_567,
  1, 354, :_reduce_568,
  2, 354, :_reduce_569,
  3, 248, :_reduce_570,
  0, 356, :_reduce_571,
  3, 356, :_reduce_572,
  3, 247, :_reduce_573,
  3, 249, :_reduce_574,
  0, 357, :_reduce_575,
  3, 357, :_reduce_576,
  0, 358, :_reduce_577,
  3, 358, :_reduce_578,
  0, 338, :_reduce_579,
  2, 338, :_reduce_580,
  0, 351, :_reduce_581,
  2, 351, :_reduce_582,
  0, 352, :_reduce_583,
  2, 352, :_reduce_584,
  1, 355, :_reduce_585,
  2, 355, :_reduce_586,
  0, 360, :_reduce_587,
  4, 355, :_reduce_588,
  1, 359, :_reduce_589,
  1, 359, :_reduce_590,
  1, 359, :_reduce_591,
  1, 359, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 361, :_reduce_595,
  3, 362, :_reduce_596,
  1, 348, :_reduce_597,
  2, 348, :_reduce_598,
  1, 226, :_reduce_599,
  1, 226, :_reduce_600,
  1, 226, :_reduce_601,
  1, 226, :_reduce_602,
  1, 345, :_reduce_603,
  1, 345, :_reduce_604,
  1, 345, :_reduce_605,
  1, 217, :_reduce_606,
  1, 217, :_reduce_607,
  1, 217, :_reduce_608,
  1, 217, :_reduce_609,
  1, 217, :_reduce_610,
  1, 218, :_reduce_611,
  1, 218, :_reduce_612,
  1, 218, :_reduce_613,
  1, 218, :_reduce_614,
  1, 218, :_reduce_615,
  1, 218, :_reduce_616,
  1, 218, :_reduce_617,
  1, 250, :_reduce_618,
  1, 250, :_reduce_619,
  1, 176, :_reduce_620,
  1, 176, :_reduce_621,
  1, 186, :_reduce_622,
  1, 186, :_reduce_623,
  0, 363, :_reduce_624,
  4, 260, :_reduce_625,
  0, 260, :_reduce_626,
  1, 182, :_reduce_none,
  1, 182, :_reduce_628,
  3, 364, :_reduce_629,
  5, 364, :_reduce_630,
  3, 364, :_reduce_631,
  1, 262, :_reduce_none,
  0, 366, :_reduce_633,
  3, 262, :_reduce_634,
  4, 365, :_reduce_635,
  2, 365, :_reduce_636,
  2, 365, :_reduce_637,
  1, 365, :_reduce_638,
  2, 368, :_reduce_639,
  0, 368, :_reduce_640,
  6, 297, :_reduce_641,
  8, 297, :_reduce_642,
  4, 297, :_reduce_643,
  6, 297, :_reduce_644,
  4, 297, :_reduce_645,
  6, 297, :_reduce_646,
  2, 297, :_reduce_647,
  4, 297, :_reduce_648,
  6, 297, :_reduce_649,
  2, 297, :_reduce_650,
  4, 297, :_reduce_651,
  2, 297, :_reduce_652,
  4, 297, :_reduce_653,
  1, 297, :_reduce_654,
  0, 297, :_reduce_655,
  1, 237, :_reduce_656,
  1, 292, :_reduce_657,
  1, 292, :_reduce_658,
  1, 292, :_reduce_659,
  1, 292, :_reduce_660,
  1, 270, :_reduce_none,
  1, 270, :_reduce_662,
  1, 370, :_reduce_663,
  1, 371, :_reduce_664,
  3, 371, :_reduce_665,
  1, 284, :_reduce_666,
  3, 284, :_reduce_667,
  1, 372, :_reduce_668,
  2, 373, :_reduce_669,
  1, 373, :_reduce_670,
  2, 374, :_reduce_671,
  1, 374, :_reduce_672,
  1, 278, :_reduce_673,
  3, 278, :_reduce_674,
  1, 367, :_reduce_675,
  3, 367, :_reduce_676,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 276, :_reduce_679,
  2, 275, :_reduce_680,
  1, 275, :_reduce_681,
  3, 375, :_reduce_682,
  3, 376, :_reduce_683,
  1, 285, :_reduce_684,
  3, 285, :_reduce_685,
  1, 369, :_reduce_686,
  3, 369, :_reduce_687,
  1, 377, :_reduce_none,
  1, 377, :_reduce_none,
  2, 286, :_reduce_690,
  1, 286, :_reduce_691,
  1, 378, :_reduce_none,
  1, 378, :_reduce_none,
  2, 280, :_reduce_694,
  2, 279, :_reduce_695,
  0, 279, :_reduce_696,
  1, 196, :_reduce_none,
  3, 196, :_reduce_698,
  0, 251, :_reduce_699,
  2, 251, :_reduce_none,
  1, 235, :_reduce_701,
  3, 235, :_reduce_702,
  3, 379, :_reduce_703,
  2, 379, :_reduce_704,
  1, 379, :_reduce_705,
  4, 379, :_reduce_706,
  2, 379, :_reduce_707,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 180, :_reduce_720,
  1, 180, :_reduce_721,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 212, :_reduce_726,
  2, 179, :_reduce_727,
  2, 327, :_reduce_728,
  0, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 261, :_reduce_732,
  1, 261, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 232, :_reduce_736 ]

racc_reduce_n = 737

racc_shift_n = 1236

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@2",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "defn_head",
  "f_opt_paren_args",
  "command",
  "arg",
  "defs_head",
  "backref",
  "opt_nl",
  "p_top_expr_body",
  "@3",
  "@4",
  "expr_value_do",
  "do",
  "def_name",
  "@5",
  "fname",
  "singleton",
  "dot_or_colon",
  "@6",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@7",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "op",
  "reswords",
  "symbol",
  "@8",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@9",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "f_any_kwrest",
  "f_kwrest",
  "f_no_kwarg",
  "block_args_tail",
  "f_block_kwarg",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "excessed_comma",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@16",
  "@17",
  "f_args",
  "do_block",
  "@18",
  "@19",
  "do_body",
  "@20",
  "operation3",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "cases",
  "p_top_expr",
  "p_cases",
  "@26",
  "@27",
  "p_expr",
  "p_args",
  "p_find",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@28",
  "@29",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_rest",
  "p_kwarg",
  "p_any_kwrest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "p_kwrest",
  "kwrest_mark",
  "p_kwnorest",
  "p_primitive",
  "p_var_ref",
  "p_expr_ref",
  "nonlocal_var",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@30",
  "ssym",
  "dsym",
  "@31",
  "f_paren_args",
  "args_tail",
  "@32",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      @current_arg_stack.push(nil)
                      @max_numparam_stack.push
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]

                      @current_arg_stack.pop
                      @max_numparam_stack.pop
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = val
                    
    result
end

def _reduce_11(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_13(val, _values, result)
                      result = []
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_19(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_23(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 31 omitted

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_34(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_44(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_45(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_46(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_47(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_48(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_55(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_57(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_58(val, _values, result)
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[2]
                      result = @builder.match_pattern(val[0], val[1], val[3])
                    
    result
end

def _reduce_59(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_60(val, _values, result)
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[2]
                      result = @builder.match_pattern_p(val[0], val[1], val[3])
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_64(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

def _reduce_65(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @current_arg_stack.push(nil)

                      result = val[0]
                    
    result
end

def _reduce_66(val, _values, result)
                      @context.push(:def)

                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_67(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_68(val, _values, result)
                      @context.push(:defs)

                      result = [ val[0], val[1], val[2], val[4] ]
                    
    result
end

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 75 omitted

def _reduce_76(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 91 omitted

def _reduce_92(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 101 omitted

def _reduce_102(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_104(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_106(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_110(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_112(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_119(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_120(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_121(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_122(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_123(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_124(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_125(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_128(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_129(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

def _reduce_135(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 136 omitted

def _reduce_137(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_138(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_139(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

def _reduce_211(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_217(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_218(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_247(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_250(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_251(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_252(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

def _reduce_253(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_254(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_255(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_256(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_268(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 269 omitted

def _reduce_270(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val
                    
    result
end

def _reduce_272(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[3]
                      end

                      result = [val[0], [*val[1], @builder.forwarded_args(val[3])], val[4]]
                    
    result
end

def _reduce_273(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = []
                    
    result
end

# reduce 277 omitted

# reduce 278 omitted

def _reduce_279(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_280(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_284(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_286(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_287(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = []
                    
    result
end

def _reduce_291(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_292(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_293(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 296 omitted

def _reduce_297(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_298(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

def _reduce_310(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_312(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_326(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_329(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 330 omitted

def _reduce_331(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 332 omitted

def _reduce_333(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_334(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_337(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_338(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_339(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_340(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_341(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_342(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_343(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_345(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:module)
                    
    result
end

def _reduce_346(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_347(val, _values, result)
                      result = @builder.def_method(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.def_singleton(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_349(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 355 omitted

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 362 omitted

def _reduce_363(val, _values, result)
                      result = val
                    
    result
end

# reduce 364 omitted

# reduce 365 omitted

def _reduce_366(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_375(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

# reduce 377 omitted

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_384(val, _values, result)
                      result = []
                    
    result
end

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_393(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_394(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 400 omitted

def _reduce_401(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_402(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_403(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_404(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_405(val, _values, result)
                      result = []
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_409(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 410 omitted

def _reduce_411(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_412(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_413(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      begin_t, body, end_t = val[4]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop

                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_415(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_416(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_418(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_420(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_422(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_423(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_424(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_425(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_426(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_427(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_428(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_430(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_431(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_432(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_433(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_434(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_435(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_436(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_437(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_438(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_439(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_440(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_441(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_442(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_443(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_444(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_448(val, _values, result)
                      @pattern_variables.pop
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.find_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 468 omitted

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_471(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_472(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_473(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_474(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_475(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_476(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_477(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.array_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.find_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      @pattern_hash_keys.push
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = false
                    
    result
end

def _reduce_482(val, _values, result)
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_484(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_485(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_489(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_490(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 493 omitted

def _reduce_494(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_495(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ val[0], *val[2], val[4] ]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.match_rest(val[0], val[1])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.match_rest(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 503 omitted

def _reduce_504(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_512(val, _values, result)
                    result = [:label, val[0]]
                  
    result
end

def _reduce_513(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_514(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_523(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

def _reduce_527(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

def _reduce_537(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

# reduce 538 omitted

def _reduce_539(val, _values, result)
                      result = @builder.assignable(@builder.match_var(val[0]))
                    
    result
end

def _reduce_540(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_541(val, _values, result)
                      non_lvar = @builder.accessible(val[1])
                      result = @builder.pin(val[0], non_lvar)
                    
    result
end

def _reduce_542(val, _values, result)
                      expr = @builder.begin(val[1], val[2], val[3])
                      result = @builder.pin(val[0], expr)
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_544(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_545(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_546(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = []
                    
    result
end

def _reduce_548(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 549 omitted

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_558(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_560(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_561(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_562(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_563(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_564(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_565(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_566(val, _values, result)
                      result = []
                    
    result
end

def _reduce_567(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_569(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = []
                    
    result
end

def _reduce_572(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = []
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = []
                    
    result
end

def _reduce_578(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = []
                    
    result
end

def _reduce_580(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_581(val, _values, result)
                      result = []
                    
    result
end

def _reduce_582(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_583(val, _values, result)
                      result = []
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_585(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_588(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

def _reduce_595(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_598(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_599(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_600(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_601(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_602(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_603(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_604(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_605(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_606(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_607(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_608(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_609(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_610(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_611(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_616(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_617(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_618(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_622(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_623(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_624(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_625(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_626(val, _values, result)
                      result = nil
                    
    result
end

# reduce 627 omitted

def _reduce_628(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_629(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_630(val, _values, result)
                      args = [ *val[1], @builder.forward_arg(val[3]) ]
                      result = @builder.args(val[0], args, val[4])

                      @static_env.declare_forward_args
                    
    result
end

def _reduce_631(val, _values, result)
                      result = @builder.forward_only_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

# reduce 632 omitted

def _reduce_633(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_634(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_635(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_636(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_637(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_638(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_639(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_640(val, _values, result)
                      result = []
                    
    result
end

def _reduce_641(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_642(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_643(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_644(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_645(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_646(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_647(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_648(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_649(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_650(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_651(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_652(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_653(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_654(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_655(val, _values, result)
                      result = []
                    
    result
end

def _reduce_656(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_657(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_658(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_659(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_660(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 661 omitted

def _reduce_662(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_663(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_664(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_665(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_666(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_667(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_668(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_669(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_670(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_671(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_672(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_673(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_674(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_675(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_676(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 677 omitted

# reduce 678 omitted

def _reduce_679(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_680(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_681(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_682(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_683(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_684(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_685(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_686(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_687(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 688 omitted

# reduce 689 omitted

def _reduce_690(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_691(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 692 omitted

# reduce 693 omitted

def _reduce_694(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_695(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_696(val, _values, result)
                      result = []
                    
    result
end

# reduce 697 omitted

def _reduce_698(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_699(val, _values, result)
                      result = []
                    
    result
end

# reduce 700 omitted

def _reduce_701(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_702(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_703(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_704(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_705(val, _values, result)
                      result = @builder.pair_label(val[0])
                    
    result
end

def _reduce_706(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_707(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 708 omitted

# reduce 709 omitted

# reduce 710 omitted

# reduce 711 omitted

# reduce 712 omitted

# reduce 713 omitted

# reduce 714 omitted

# reduce 715 omitted

# reduce 716 omitted

# reduce 717 omitted

# reduce 718 omitted

# reduce 719 omitted

def _reduce_720(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_721(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 722 omitted

# reduce 723 omitted

# reduce 724 omitted

# reduce 725 omitted

def _reduce_726(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_727(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_728(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 729 omitted

# reduce 730 omitted

# reduce 731 omitted

def _reduce_732(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 733 omitted

# reduce 734 omitted

# reduce 735 omitted

def _reduce_736(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby31
  end   # module Parser
