# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source_buffer.slice(@ts...@te)
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 120, 0, 120, 0, 92, 
	0, 120, 0, 120, 0, 
	45, 0, 120, 0, 120, 
	67, 99, 45, 45, 0, 92, 
	0, 120, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 120, 
	0, 120, 0, 92, 0, 
	120, 0, 120, 0, 45, 
	0, 120, 0, 120, 67, 99, 
	45, 45, 0, 92, 0, 
	120, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 58, 58, 58, 58, 
	0, 127, 58, 58, 60, 60, 
	62, 62, 10, 10, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 115, 115, 
	99, 99, 117, 117, 101, 101, 
	108, 116, 101, 101, 115, 
	115, 115, 115, 105, 105, 
	108, 108, 105, 105, 108, 108, 
	58, 58, 0, 127, 10, 
	10, 0, 127, 9, 92, 
	10, 10, 9, 92, 58, 58, 
	98, 98, 101, 101, 103, 
	103, 105, 105, 110, 110, 
	0, 127, 61, 61, 9, 92, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 10, 10, 
	0, 127, 0, 127, 61, 126, 
	93, 93, 0, 127, 0, 
	127, 10, 10, 34, 34, 
	10, 10, 39, 39, 0, 127, 
	10, 96, 96, 96, 0, 
	45, 0, 120, 0, 120, 
	0, 92, 0, 120, 0, 120, 
	0, 45, 0, 120, 0, 
	120, 67, 99, 45, 45, 
	0, 92, 0, 120, 0, 102, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 58, 58, 58, 58, 
	0, 127, 43, 57, 48, 
	57, 48, 57, 48, 57, 
	48, 57, 115, 115, 99, 99, 
	117, 117, 101, 101, 99, 
	99, 117, 117, 101, 101, 
	0, 127, 58, 58, 9, 92, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 9, 92, 
	60, 60, 10, 10, 9, 92, 
	9, 92, 10, 10, 10, 
	10, 10, 10, 10, 10, 
	46, 46, 0, 95, 9, 32, 
	0, 0, 10, 10, 10, 
	10, 98, 98, 9, 32, 
	10, 10, 95, 95, 0, 92, 
	9, 32, 36, 123, 0, 
	127, 48, 57, 0, 127, 
	0, 120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 
	0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 48, 102, 48, 102, 
	0, 0, 48, 102, 48, 
	102, 0, 0, 0, 45, 
	0, 92, 0, 92, 0, 0, 
	0, 0, 0, 92, 48, 
	102, 48, 102, 0, 0, 
	0, 45, 10, 10, 0, 92, 
	48, 123, 48, 102, 48, 
	102, 48, 102, 0, 0, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 0, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 0, 0, 0, 48, 102, 
	0, 0, 0, 92, 36, 
	123, 0, 127, 48, 57, 
	0, 127, 0, 120, 0, 0, 
	0, 0, 48, 55, 48, 
	55, 0, 0, 0, 0, 
	0, 92, 0, 0, 0, 0, 
	0, 0, 0, 92, 45, 
	45, 0, 0, 0, 0, 
	0, 0, 0, 92, 48, 102, 
	48, 102, 0, 0, 48, 
	102, 48, 102, 0, 0, 
	0, 45, 0, 92, 0, 92, 
	0, 0, 0, 0, 0, 
	92, 48, 102, 48, 102, 
	0, 0, 0, 45, 10, 10, 
	0, 92, 48, 123, 48, 
	102, 48, 102, 48, 102, 
	0, 0, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 
	0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 0, 
	48, 102, 0, 0, 0, 
	92, 9, 32, 0, 26, 
	0, 92, 0, 26, 0, 35, 
	36, 123, 0, 127, 48, 
	57, 0, 127, 0, 26, 
	0, 35, 9, 32, 36, 123, 
	0, 127, 48, 57, 0, 
	127, 0, 32, 9, 32, 
	65, 122, 65, 122, 36, 64, 
	0, 127, 48, 57, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 9, 32, 0, 0, 
	61, 126, 10, 10, 10, 
	10, 0, 127, 0, 127, 
	48, 57, 115, 115, 38, 38, 
	42, 42, 64, 64, 58, 
	58, 60, 61, 62, 62, 
	61, 126, 61, 61, 61, 62, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 93, 93, 
	10, 10, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 124, 124, 
	0, 127, 0, 127, 9, 32, 
	10, 10, 10, 10, 10, 
	10, 0, 0, 0, 127, 
	0, 127, 61, 61, 0, 0, 
	9, 32, 0, 0, 61, 
	126, 10, 10, 10, 10, 
	38, 38, 42, 42, 64, 64, 
	60, 61, 62, 62, 61, 
	126, 61, 61, 61, 62, 
	0, 127, 93, 93, 10, 10, 
	124, 124, 0, 126, 0, 
	127, 0, 61, 9, 61, 
	9, 61, 0, 0, 9, 61, 
	9, 62, 46, 46, 46, 
	46, 58, 58, 9, 32, 
	0, 0, 0, 127, 0, 0, 
	9, 124, 0, 0, 10, 
	10, 10, 10, 0, 0, 
	9, 61, 58, 58, 60, 60, 
	62, 62, 9, 32, 10, 
	10, 0, 127, 102, 102, 
	101, 101, 110, 110, 104, 104, 
	0, 127, 0, 127, 0, 
	127, 0, 0, 0, 127, 
	10, 10, 0, 123, 9, 32, 
	10, 10, 10, 10, 10, 
	10, 0, 0, 111, 111, 
	0, 0, 0, 127, 0, 127, 
	9, 32, 0, 0, 10, 
	10, 10, 10, 10, 10, 
	0, 0, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	58, 61, 0, 0, 61, 
	126, 61, 61, 0, 0, 
	0, 0, 0, 0, 9, 32, 
	61, 61, 9, 32, 61, 
	126, 10, 10, 10, 10, 
	0, 127, 38, 61, 0, 0, 
	42, 61, 61, 61, 9, 
	92, 9, 92, 9, 92, 
	46, 46, 46, 46, 0, 26, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 61, 126, 
	61, 62, 0, 0, 0, 0, 
	0, 0, 0, 0, 61, 
	126, 0, 127, 48, 57, 
	38, 38, 42, 42, 64, 64, 
	60, 61, 62, 62, 61, 
	61, 61, 62, 0, 127, 
	48, 57, 0, 127, 124, 124, 
	64, 64, 60, 61, 0, 
	0, 10, 34, 10, 39, 
	96, 96, 62, 62, 61, 126, 
	61, 62, 0, 122, 0, 
	0, 0, 127, 0, 127, 
	0, 120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 
	0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 48, 102, 48, 102, 
	0, 0, 48, 102, 48, 
	102, 0, 0, 0, 45, 
	0, 92, 0, 92, 0, 0, 
	0, 0, 0, 92, 48, 
	102, 48, 102, 0, 0, 
	0, 45, 10, 10, 0, 92, 
	48, 123, 48, 102, 48, 
	102, 48, 102, 0, 0, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 0, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	0, 0, 0, 48, 102, 
	0, 0, 0, 127, 0, 127, 
	0, 127, 0, 0, 10, 
	10, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 61, 126, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 0, 61, 124, 
	0, 92, 9, 32, 0, 0, 
	10, 10, 10, 10, 10, 
	10, 0, 0, 0, 127, 
	0, 127, 9, 32, 0, 0, 
	10, 10, 10, 10, 10, 
	10, 0, 0, 0, 127, 
	0, 127, 61, 61, 0, 0, 
	9, 32, 0, 0, 61, 
	126, 10, 10, 10, 10, 
	0, 127, 0, 127, 48, 57, 
	61, 61, 38, 61, 0, 
	0, 0, 0, 42, 61, 
	61, 62, 46, 57, 46, 46, 
	10, 10, 48, 101, 48, 
	95, 46, 120, 48, 114, 
	43, 57, 48, 105, 102, 102, 
	0, 0, 101, 105, 0, 
	0, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 114, 
	105, 114, 102, 102, 0, 
	0, 101, 105, 115, 115, 
	0, 0, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 48, 114, 48, 114, 
	48, 114, 48, 114, 46, 114, 
	48, 114, 46, 114, 48, 
	114, 58, 58, 60, 61, 
	62, 62, 61, 126, 61, 61, 
	61, 62, 0, 127, 0, 
	127, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	0, 10, 10, 0, 0, 
	0, 0, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 9, 92, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 0, 61, 124, 0, 0, 
	9, 92, 9, 92, 9, 
	92, 46, 46, 46, 46, 
	10, 10, 46, 46, 10, 10, 
	10, 61, 10, 10, 10, 
	101, 10, 110, 10, 100, 
	10, 10, 0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	121, 121, 93, 121, 121, 46, 121, 121, 
	33, 1, 93, 121, 103, 128, 128, 128, 
	128, 46, 121, 121, 93, 121, 121, 46, 
	121, 121, 33, 1, 93, 121, 103, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 1, 1, 
	128, 1, 1, 1, 1, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 9, 1, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 128, 84, 
	1, 84, 1, 1, 1, 1, 1, 1, 
	128, 1, 84, 84, 84, 84, 84, 1, 
	128, 128, 66, 1, 128, 128, 1, 1, 
	1, 1, 128, 87, 1, 46, 121, 121, 
	93, 121, 121, 46, 121, 121, 33, 1, 
	93, 121, 103, 128, 128, 128, 128, 128, 
	128, 1, 1, 128, 15, 10, 10, 10, 
	10, 1, 1, 1, 1, 1, 1, 1, 
	128, 1, 84, 84, 84, 84, 84, 84, 
	1, 1, 84, 84, 1, 1, 1, 1, 
	1, 96, 24, 0, 1, 1, 1, 24, 
	1, 1, 93, 24, 88, 128, 10, 128, 
	121, 0, 0, 8, 8, 0, 0, 93, 
	0, 0, 0, 93, 1, 0, 0, 0, 
	93, 55, 55, 0, 55, 55, 0, 46, 
	93, 93, 0, 0, 93, 55, 55, 0, 
	46, 1, 93, 76, 55, 55, 55, 0, 
	126, 126, 0, 126, 0, 126, 126, 126, 
	126, 0, 126, 126, 126, 126, 126, 126, 
	0, 0, 55, 0, 93, 88, 128, 10, 
	128, 121, 0, 0, 8, 8, 0, 0, 
	93, 0, 0, 0, 93, 1, 0, 0, 
	0, 93, 55, 55, 0, 55, 55, 0, 
	46, 93, 93, 0, 0, 93, 55, 55, 
	0, 46, 1, 93, 76, 55, 55, 55, 
	0, 126, 126, 0, 126, 0, 126, 126, 
	126, 126, 0, 126, 126, 126, 126, 126, 
	126, 0, 0, 55, 0, 93, 24, 27, 
	93, 27, 36, 88, 128, 10, 128, 27, 
	36, 24, 88, 128, 10, 128, 33, 24, 
	58, 58, 29, 128, 10, 128, 128, 128, 
	128, 24, 0, 66, 1, 1, 128, 128, 
	10, 1, 1, 1, 1, 1, 2, 1, 
	66, 1, 2, 128, 128, 128, 128, 128, 
	128, 128, 1, 1, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 1, 
	128, 128, 24, 1, 1, 1, 0, 128, 
	128, 1, 0, 24, 0, 66, 1, 1, 
	1, 1, 1, 2, 1, 66, 1, 2, 
	128, 1, 1, 1, 127, 128, 62, 53, 
	53, 0, 53, 54, 1, 1, 1, 24, 
	0, 128, 0, 116, 0, 1, 1, 0, 
	53, 1, 1, 1, 24, 1, 128, 1, 
	1, 1, 1, 128, 128, 128, 0, 128, 
	1, 124, 24, 1, 1, 1, 0, 1, 
	0, 128, 128, 24, 0, 1, 1, 1, 
	0, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 4, 0, 66, 1, 0, 
	0, 0, 24, 1, 24, 66, 1, 1, 
	128, 24, 0, 20, 1, 84, 84, 84, 
	1, 1, 27, 128, 128, 1, 0, 66, 
	2, 0, 0, 0, 0, 66, 128, 10, 
	1, 1, 1, 2, 1, 1, 2, 128, 
	10, 128, 1, 1, 2, 0, 25, 30, 
	1, 1, 66, 2, 123, 0, 128, 128, 
	121, 0, 0, 8, 8, 0, 0, 93, 
	0, 0, 0, 93, 1, 0, 0, 0, 
	93, 55, 55, 0, 55, 55, 0, 46, 
	93, 93, 0, 0, 93, 55, 55, 0, 
	46, 1, 93, 76, 55, 55, 55, 0, 
	126, 126, 0, 126, 0, 126, 126, 126, 
	126, 0, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 0, 0, 55, 
	0, 128, 128, 128, 0, 1, 0, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 66, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 0, 64, 
	93, 24, 0, 1, 1, 1, 0, 128, 
	128, 24, 0, 1, 1, 1, 0, 128, 
	128, 1, 0, 24, 0, 66, 1, 1, 
	128, 128, 10, 1, 24, 0, 0, 20, 
	2, 12, 1, 1, 54, 48, 75, 67, 
	15, 58, 1, 0, 5, 0, 0, 67, 
	67, 67, 67, 10, 1, 0, 5, 1, 
	0, 0, 67, 67, 67, 67, 67, 67, 
	67, 67, 69, 67, 69, 67, 1, 2, 
	1, 66, 1, 2, 128, 128, 0, 128, 
	128, 128, 128, 128, 128, 0, 1, 0, 
	0, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 84, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	0, 64, 0, 84, 84, 84, 1, 1, 
	1, 1, 1, 52, 1, 92, 101, 91, 
	1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 731, 853, 947, 1069, 1191, 1238, 1360, 
	1482, 1516, 1518, 1612, 1734, 1838, 1967, 2096, 
	2225, 2354, 2401, 2523, 2645, 2739, 2861, 2983, 
	3030, 3152, 3274, 3308, 3310, 3404, 3526, 3630, 
	3759, 3888, 4017, 4146, 4275, 4404, 4533, 4662, 
	4791, 4920, 5049, 5178, 5307, 5436, 5565, 5567, 
	5569, 5698, 5700, 5702, 5704, 5706, 5835, 5964, 
	6093, 6222, 6351, 6480, 6609, 6738, 6867, 6996, 
	7125, 7254, 7383, 7512, 7641, 7770, 7899, 8028, 
	8030, 8032, 8034, 8036, 8046, 8048, 8050, 8052, 
	8054, 8056, 8058, 8060, 8062, 8191, 8193, 8322, 
	8407, 8409, 8494, 8496, 8498, 8500, 8502, 8504, 
	8506, 8635, 8637, 8722, 8807, 8892, 8977, 9062, 
	9064, 9193, 9322, 9389, 9391, 9520, 9649, 9651, 
	9653, 9655, 9657, 9786, 9874, 9876, 9923, 10045, 
	10167, 10261, 10383, 10505, 10552, 10674, 10796, 10830, 
	10832, 10926, 11048, 11152, 11281, 11410, 11539, 11668, 
	11797, 11926, 11928, 11930, 12059, 12075, 12086, 12097, 
	12108, 12119, 12121, 12123, 12125, 12127, 12129, 12131, 
	12133, 12262, 12264, 12349, 12434, 12519, 12604, 12689, 
	12774, 12776, 12778, 12863, 12948, 12950, 12952, 12954, 
	12956, 12958, 13055, 13080, 13081, 13083, 13085, 13087, 
	13112, 13114, 13116, 13210, 13235, 13324, 13453, 13464, 
	13593, 13715, 13716, 13717, 13726, 13735, 13736, 13737, 
	13831, 13832, 13833, 13834, 13928, 13930, 13931, 13932, 
	13933, 14027, 14083, 14139, 14140, 14196, 14252, 14253, 
	14300, 14394, 14488, 14489, 14490, 14584, 14640, 14696, 
	14697, 14744, 14746, 14840, 14917, 14973, 15029, 15085, 
	15086, 15213, 15340, 15341, 15468, 15469, 15596, 15723, 
	15850, 15977, 15978, 16105, 16232, 16359, 16486, 16613, 
	16740, 16741, 16742, 16798, 16799, 16893, 16982, 17111, 
	17122, 17251, 17373, 17374, 17375, 17384, 17393, 17394, 
	17395, 17489, 17490, 17491, 17492, 17586, 17588, 17589, 
	17590, 17591, 17685, 17741, 17797, 17798, 17854, 17910, 
	17911, 17958, 18052, 18146, 18147, 18148, 18242, 18298, 
	18354, 18355, 18402, 18404, 18498, 18575, 18631, 18687, 
	18743, 18744, 18871, 18998, 18999, 19126, 19127, 19254, 
	19381, 19508, 19635, 19636, 19763, 19890, 20017, 20144, 
	20271, 20398, 20399, 20400, 20456, 20457, 20551, 20576, 
	20604, 20698, 20726, 20763, 20852, 20981, 20992, 21121, 
	21149, 21186, 21211, 21300, 21429, 21440, 21569, 21603, 
	21628, 21687, 21746, 21776, 21905, 21916, 22045, 22174, 
	22303, 22432, 22457, 22458, 22525, 22527, 22529, 22658, 
	22787, 22798, 22800, 22802, 22804, 22806, 22808, 22811, 
	22813, 22880, 22882, 22885, 23014, 23143, 23272, 23401, 
	23530, 23659, 23788, 23790, 23792, 23921, 24050, 24179, 
	24308, 24437, 24566, 24695, 24824, 24953, 25082, 25211, 
	25340, 25469, 25598, 25727, 25856, 25985, 26114, 26243, 
	26372, 26501, 26630, 26759, 26888, 27017, 27146, 27275, 
	27404, 27533, 27662, 27791, 27920, 28049, 28178, 28307, 
	28436, 28565, 28694, 28823, 28952, 29081, 29210, 29339, 
	29468, 29597, 29726, 29855, 29984, 30113, 30242, 30371, 
	30500, 30629, 30758, 30887, 31016, 31145, 31274, 31403, 
	31532, 31661, 31790, 31919, 32048, 32177, 32306, 32435, 
	32564, 32693, 32822, 32951, 33080, 33209, 33338, 33467, 
	33596, 33725, 33854, 33983, 34112, 34241, 34370, 34499, 
	34501, 34630, 34759, 34784, 34786, 34788, 34790, 34791, 
	34920, 35049, 35051, 35052, 35077, 35078, 35145, 35147, 
	35149, 35151, 35153, 35155, 35158, 35160, 35227, 35229, 
	35232, 35361, 35363, 35365, 35367, 35495, 35624, 35687, 
	35741, 35795, 35796, 35850, 35905, 35907, 35909, 35911, 
	35936, 35937, 36066, 36067, 36184, 36185, 36187, 36189, 
	36190, 36244, 36246, 36248, 36250, 36275, 36277, 36406, 
	36408, 36410, 36412, 36414, 36543, 36672, 36801, 36802, 
	36931, 36933, 37058, 37083, 37085, 37087, 37089, 37090, 
	37092, 37093, 37222, 37351, 37376, 37377, 37379, 37381, 
	37383, 37384, 37513, 37642, 37771, 37900, 38029, 38158, 
	38287, 38416, 38545, 38674, 38803, 38932, 39061, 39190, 
	39319, 39448, 39577, 39706, 39711, 39712, 39779, 39781, 
	39782, 39783, 39784, 39809, 39811, 39836, 39903, 39905, 
	39907, 40036, 40061, 40062, 40083, 40085, 40170, 40255, 
	40340, 40342, 40344, 40372, 40501, 40630, 40632, 40633, 
	40700, 40703, 40704, 40705, 40706, 40707, 40774, 40903, 
	40914, 40916, 40918, 40920, 40923, 40925, 40927, 40930, 
	41059, 41070, 41199, 41201, 41203, 41206, 41207, 41233, 
	41264, 41266, 41268, 41335, 41338, 41462, 41463, 41592, 
	41721, 41843, 41844, 41845, 41854, 41863, 41864, 41865, 
	41959, 41960, 41961, 41962, 42056, 42058, 42059, 42060, 
	42061, 42155, 42211, 42267, 42268, 42324, 42380, 42381, 
	42428, 42522, 42616, 42617, 42618, 42712, 42768, 42824, 
	42825, 42872, 42874, 42968, 43045, 43101, 43157, 43213, 
	43214, 43341, 43468, 43469, 43596, 43597, 43724, 43851, 
	43978, 44105, 44106, 44233, 44360, 44487, 44614, 44741, 
	44868, 44995, 45122, 45249, 45376, 45503, 45630, 45757, 
	45884, 46011, 46138, 46265, 46392, 46519, 46520, 46521, 
	46577, 46578, 46707, 46836, 46965, 46966, 46968, 46969, 
	47098, 47227, 47356, 47485, 47614, 47743, 47872, 48001, 
	48130, 48259, 48388, 48517, 48646, 48775, 48904, 49033, 
	49162, 49291, 49420, 49549, 49678, 49807, 49936, 50065, 
	50194, 50323, 50452, 50581, 50710, 50839, 50968, 51097, 
	51226, 51355, 51484, 51613, 51742, 51871, 52000, 52129, 
	52258, 52387, 52516, 52645, 52774, 52903, 53032, 53161, 
	53290, 53419, 53548, 53677, 53806, 53935, 54064, 54193, 
	54322, 54451, 54580, 54709, 54838, 54905, 55034, 55163, 
	55292, 55421, 55550, 55679, 55808, 55937, 56066, 56195, 
	56324, 56453, 56582, 56711, 56840, 56969, 57098, 57227, 
	57356, 57485, 57614, 57743, 57872, 58001, 58130, 58131, 
	58196, 58290, 58315, 58316, 58318, 58320, 58322, 58323, 
	58452, 58581, 58606, 58607, 58609, 58611, 58613, 58614, 
	58743, 58872, 58874, 58875, 58900, 58901, 58968, 58970, 
	58972, 59101, 59230, 59241, 59243, 59268, 59269, 59270, 
	59291, 59294, 59307, 59309, 59311, 59366, 59415, 59491, 
	59559, 59575, 59634, 59636, 59637, 59643, 59644, 59645, 
	59713, 59781, 59849, 59917, 59928, 59930, 59931, 59937, 
	59939, 59940, 59941, 60009, 60077, 60145, 60213, 60281, 
	60349, 60417, 60485, 60555, 60623, 60693, 60761, 60763, 
	60766, 60768, 60835, 60837, 60840, 60969, 61098, 61099, 
	61228, 61357, 61486, 61615, 61744, 61873, 61874, 61876, 
	61877, 61878, 62007, 62136, 62265, 62394, 62523, 62652, 
	62781, 62910, 63039, 63168, 63297, 63426, 63555, 63684, 
	63813, 63942, 64071, 64200, 64329, 64458, 64587, 64716, 
	64845, 64974, 65103, 65232, 65361, 65490, 65619, 65748, 
	65877, 66006, 66135, 66264, 66393, 66522, 66651, 66736, 
	66865, 66994, 67123, 67252, 67381, 67510, 67639, 67768, 
	67897, 68026, 68155, 68284, 68413, 68542, 68671, 68800, 
	68929, 69058, 69187, 69316, 69445, 69574, 69703, 69832, 
	69961, 70090, 70219, 70348, 70477, 70606, 70735, 70864, 
	70993, 71122, 71251, 71380, 71509, 71638, 71767, 71896, 
	72025, 72154, 72283, 72412, 72541, 72670, 72799, 72928, 
	73057, 73186, 73315, 73444, 73573, 73702, 73831, 73960, 
	74089, 74218, 74347, 74476, 74605, 74734, 74863, 74992, 
	75121, 75122, 75187, 75188, 75273, 75358, 75443, 75445, 
	75447, 75449, 75451, 75453, 75506, 75508, 75601, 75703, 
	75795
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 12, 12, 12, 12, 12, 12, 
	18, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 19, 20, 20, 20, 19, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 19, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 21, 
	20, 19, 22, 22, 22, 19, 22, 22, 
	22, 22, 22, 23, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 19, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 24, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 25, 22, 19, 22, 22, 22, 19, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 19, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	26, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 25, 22, 19, 27, 27, 
	27, 19, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 19, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 29, 27, 19, 30, 30, 30, 19, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 19, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 32, 30, 19, 30, 30, 
	30, 19, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 19, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 32, 30, 19, 
	20, 20, 20, 19, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 19, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 33, 20, 19, 34, 
	34, 34, 19, 34, 34, 34, 34, 34, 
	35, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	19, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 36, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 37, 34, 34, 34, 34, 34, 
	34, 38, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 39, 34, 
	19, 34, 34, 34, 19, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 19, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	39, 34, 40, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 41, 19, 41, 19, 19, 42, 
	42, 42, 19, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	19, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 44, 42, 19, 22, 22, 22, 
	19, 22, 22, 22, 22, 22, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 19, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 26, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 25, 22, 19, 45, 
	45, 45, 19, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	19, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	45, 45, 45, 45, 45, 45, 45, 46, 
	46, 46, 46, 46, 46, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 46, 
	46, 46, 46, 46, 46, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 49, 
	49, 47, 49, 47, 49, 49, 47, 47, 
	49, 49, 49, 50, 49, 49, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	49, 49, 49, 49, 49, 49, 49, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 47, 49, 47, 47, 48, 49, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 47, 47, 47, 49, 47, 48, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 47, 47, 47, 47, 49, 47, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 47, 47, 47, 47, 47, 49, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 47, 47, 47, 47, 47, 47, 
	53, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 47, 47, 47, 47, 48, 
	47, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 47, 47, 47, 47, 47, 
	48, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 47, 47, 47, 47, 47, 
	47, 47, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 47, 47, 47, 47, 
	48, 47, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 47, 47, 47, 47, 
	47, 48, 54, 55, 55, 55, 54, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 54, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 56, 
	55, 54, 57, 57, 57, 54, 57, 57, 
	57, 57, 57, 58, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 54, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 59, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 60, 57, 54, 57, 57, 57, 54, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 54, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	61, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 60, 57, 54, 62, 62, 
	62, 54, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 54, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 63, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 64, 62, 54, 65, 65, 65, 54, 
	65, 65, 65, 65, 65, 66, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 54, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 67, 65, 54, 65, 65, 
	65, 54, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 54, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 67, 65, 54, 
	55, 55, 55, 54, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 54, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 68, 55, 54, 69, 
	69, 69, 54, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	54, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 71, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 72, 69, 69, 69, 69, 69, 
	69, 73, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 74, 69, 
	54, 69, 69, 69, 54, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 54, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	74, 69, 75, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 76, 54, 76, 54, 54, 77, 
	77, 77, 54, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	54, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 78, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 79, 77, 54, 57, 57, 57, 
	54, 57, 57, 57, 57, 57, 58, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 54, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 61, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 60, 57, 54, 80, 
	80, 80, 54, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	54, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	81, 81, 81, 81, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	81, 81, 81, 81, 81, 80, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 84, 
	84, 82, 84, 82, 84, 84, 82, 82, 
	84, 84, 84, 85, 84, 84, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	84, 84, 84, 84, 84, 84, 84, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 82, 84, 82, 82, 83, 84, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 82, 82, 82, 84, 82, 83, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 82, 82, 82, 82, 82, 82, 82, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 82, 82, 82, 82, 84, 82, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 82, 82, 82, 82, 82, 84, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 82, 82, 82, 82, 82, 82, 
	88, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 82, 82, 82, 82, 83, 
	82, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 82, 82, 82, 82, 82, 
	83, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 82, 82, 82, 82, 82, 
	82, 82, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 82, 82, 82, 82, 
	83, 82, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 82, 82, 82, 82, 
	82, 83, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 91, 89, 91, 89, 
	91, 91, 89, 89, 91, 91, 91, 92, 
	91, 91, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 91, 91, 91, 91, 
	91, 91, 91, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 89, 91, 89, 
	89, 90, 91, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 89, 89, 89, 
	91, 89, 90, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 89, 89, 89, 
	89, 89, 89, 89, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 89, 89, 
	89, 89, 91, 89, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 89, 89, 
	89, 89, 89, 91, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 89, 89, 
	89, 89, 89, 89, 95, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 89, 
	89, 89, 89, 90, 89, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 89, 
	89, 89, 89, 89, 90, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 89, 
	89, 89, 89, 89, 89, 89, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	89, 89, 89, 89, 90, 89, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	89, 89, 89, 89, 89, 90, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 97, 
	97, 98, 97, 98, 97, 97, 98, 98, 
	97, 97, 97, 99, 97, 97, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	97, 97, 97, 97, 97, 97, 97, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 98, 97, 98, 98, 96, 97, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 98, 98, 98, 97, 98, 96, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 98, 98, 98, 98, 98, 98, 98, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 98, 98, 98, 98, 97, 98, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 98, 98, 98, 98, 98, 97, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 98, 98, 98, 98, 98, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 98, 98, 98, 98, 101, 
	98, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 98, 98, 98, 98, 98, 
	101, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 98, 98, 98, 98, 98, 
	98, 98, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 98, 98, 98, 98, 
	103, 98, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 98, 98, 98, 98, 
	98, 103, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 104, 104, 104, 104, 
	104, 104, 104, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 104, 104, 104, 
	104, 105, 104, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 104, 104, 104, 
	104, 104, 105, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 107, 107, 107, 
	107, 107, 107, 107, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 107, 107, 
	107, 107, 107, 107, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 107, 107, 
	107, 107, 107, 106, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 110, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 111, 108, 
	108, 108, 108, 110, 108, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 108, 
	108, 108, 108, 109, 108, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 108, 
	108, 108, 108, 108, 109, 111, 108, 108, 
	112, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 115, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 116, 113, 113, 113, 113, 
	115, 113, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 113, 113, 113, 113, 
	114, 113, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 113, 113, 113, 113, 
	113, 114, 116, 113, 118, 117, 119, 117, 
	120, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 122, 117, 122, 122, 122, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 122, 117, 117, 117, 117, 123, 
	124, 117, 125, 117, 126, 127, 128, 129, 
	130, 123, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 131, 117, 132, 128, 
	133, 134, 117, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 135, 136, 128, 
	137, 121, 117, 121, 121, 121, 121, 121, 
	121, 121, 121, 138, 121, 121, 121, 121, 
	121, 121, 121, 121, 139, 121, 121, 140, 
	121, 141, 121, 121, 121, 142, 143, 117, 
	137, 117, 121, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 144, 117, 144, 144, 
	144, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 144, 117, 117, 117, 117, 
	145, 146, 117, 147, 117, 148, 149, 150, 
	151, 152, 145, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 153, 117, 154, 
	150, 155, 156, 117, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 157, 158, 
	150, 119, 114, 117, 114, 114, 114, 114, 
	114, 114, 114, 114, 159, 114, 114, 114, 
	114, 114, 114, 114, 114, 160, 114, 114, 
	161, 114, 162, 114, 114, 114, 163, 164, 
	117, 119, 117, 114, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 115, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 116, 117, 
	117, 117, 117, 115, 117, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 117, 
	117, 117, 117, 114, 117, 114, 114, 114, 
	114, 114, 165, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 117, 
	117, 117, 117, 117, 114, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 115, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 116, 
	117, 117, 117, 117, 115, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	117, 117, 117, 117, 114, 117, 114, 114, 
	114, 114, 166, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	117, 117, 117, 117, 117, 114, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 115, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	116, 117, 117, 117, 117, 115, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 117, 117, 117, 117, 114, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 167, 114, 114, 114, 114, 114, 114, 
	114, 117, 117, 117, 117, 117, 114, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	115, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 116, 117, 117, 117, 117, 115, 117, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 117, 117, 117, 117, 114, 117, 
	114, 114, 168, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 117, 117, 117, 117, 117, 114, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 115, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 116, 117, 117, 117, 117, 115, 
	117, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 117, 117, 117, 117, 114, 
	117, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 169, 114, 114, 
	114, 114, 114, 117, 117, 117, 117, 117, 
	114, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 115, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 116, 117, 117, 117, 117, 
	115, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 117, 117, 117, 117, 
	114, 117, 114, 114, 114, 114, 165, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 117, 117, 117, 117, 
	117, 114, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 115, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 116, 117, 117, 117, 
	117, 115, 117, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 117, 117, 
	117, 114, 117, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	170, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 117, 117, 
	117, 117, 114, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 115, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 116, 117, 117, 
	117, 117, 115, 117, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 117, 117, 
	117, 117, 114, 117, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 171, 
	114, 114, 114, 114, 114, 114, 114, 172, 
	114, 114, 114, 114, 114, 114, 117, 117, 
	117, 117, 117, 114, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 115, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 116, 117, 
	117, 117, 117, 115, 117, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 117, 
	117, 117, 117, 114, 117, 114, 114, 114, 
	114, 173, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 117, 
	117, 117, 117, 117, 114, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 115, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 116, 
	117, 117, 117, 117, 115, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	117, 117, 117, 117, 114, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	174, 114, 114, 114, 114, 114, 114, 114, 
	117, 117, 117, 117, 117, 114, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 115, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	116, 117, 117, 117, 117, 115, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 117, 117, 117, 117, 114, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 165, 114, 114, 114, 114, 114, 114, 
	114, 117, 117, 117, 117, 117, 114, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	115, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 116, 117, 117, 117, 117, 115, 117, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 117, 117, 117, 117, 114, 117, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	175, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 117, 117, 117, 117, 117, 114, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 115, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 116, 117, 117, 117, 117, 115, 
	117, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 117, 117, 117, 117, 114, 
	117, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 165, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 117, 117, 117, 117, 117, 
	114, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 115, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 116, 117, 117, 117, 117, 
	115, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 117, 117, 117, 117, 
	114, 117, 114, 114, 114, 114, 114, 114, 
	114, 176, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 117, 117, 117, 117, 
	117, 114, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 115, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 116, 117, 117, 117, 
	117, 115, 117, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 117, 117, 
	117, 114, 117, 114, 114, 114, 114, 114, 
	114, 114, 114, 177, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 117, 117, 
	117, 117, 114, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 115, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 116, 117, 117, 
	117, 117, 115, 117, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 117, 117, 
	117, 117, 114, 117, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 169, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 117, 117, 
	117, 117, 117, 114, 179, 178, 180, 178, 
	181, 178, 150, 178, 182, 178, 178, 178, 
	178, 178, 178, 178, 183, 178, 184, 178, 
	185, 178, 150, 178, 186, 178, 150, 178, 
	187, 178, 181, 178, 189, 188, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 192, 
	190, 192, 192, 192, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 192, 190, 
	190, 190, 190, 190, 190, 190, 193, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 190, 194, 190, 190, 191, 190, 191, 
	191, 191, 195, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 190, 190, 190, 190, 190, 191, 196, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 198, 190, 198, 198, 198, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 198, 190, 190, 190, 190, 190, 190, 
	190, 199, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 190, 200, 190, 190, 
	197, 190, 197, 197, 197, 201, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 190, 190, 190, 190, 
	190, 197, 203, 202, 203, 203, 203, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 203, 202, 202, 202, 202, 202, 202, 
	202, 204, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 205, 202, 206, 
	202, 207, 202, 207, 207, 207, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	207, 202, 202, 202, 202, 202, 202, 202, 
	208, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 209, 202, 210, 211, 
	213, 212, 214, 212, 215, 212, 216, 212, 
	217, 212, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 219, 219, 219, 219, 
	219, 219, 219, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 219, 219, 219, 
	219, 219, 219, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 219, 219, 219, 
	219, 219, 218, 220, 210, 221, 222, 221, 
	221, 221, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 221, 210, 210, 223, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	225, 210, 226, 227, 226, 226, 226, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 226, 210, 210, 228, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 230, 210, 232, 
	233, 232, 232, 232, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 232, 231, 
	231, 234, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 236, 231, 238, 239, 238, 238, 
	238, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 238, 237, 237, 240, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 242, 
	237, 238, 243, 238, 238, 238, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	238, 237, 237, 240, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 242, 237, 222, 210, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 246, 246, 244, 246, 244, 246, 246, 
	244, 244, 246, 246, 246, 247, 246, 246, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 246, 246, 246, 246, 246, 246, 
	246, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 244, 246, 244, 244, 245, 
	246, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 244, 244, 244, 246, 244, 
	245, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 244, 244, 244, 244, 244, 
	244, 244, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 244, 244, 244, 244, 
	246, 244, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 244, 244, 244, 244, 
	244, 246, 249, 246, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 246, 244, 249, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 251, 244, 244, 244, 244, 252, 244, 
	244, 244, 244, 244, 253, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 220, 244, 244, 244, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 244, 244, 244, 244, 250, 254, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 244, 244, 244, 253, 244, 250, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 256, 256, 256, 256, 256, 256, 
	256, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 256, 256, 256, 256, 255, 
	256, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 256, 256, 256, 256, 256, 
	255, 259, 258, 262, 261, 257, 256, 262, 
	263, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 251, 244, 244, 244, 244, 
	252, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 244, 244, 244, 244, 
	250, 254, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 244, 244, 244, 244, 
	244, 250, 265, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	262, 264, 262, 265, 266, 267, 267, 267, 
	266, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 266, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 268, 267, 266, 269, 269, 269, 266, 
	269, 269, 269, 269, 269, 270, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 266, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	271, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 272, 269, 266, 269, 269, 
	269, 266, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 266, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 273, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 272, 269, 266, 
	274, 274, 274, 266, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 266, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 275, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 276, 274, 266, 277, 277, 
	277, 266, 277, 277, 277, 277, 277, 278, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 266, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 279, 277, 266, 
	277, 277, 277, 266, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 266, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 279, 
	277, 266, 267, 267, 267, 266, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 266, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 280, 267, 
	266, 281, 281, 281, 266, 281, 281, 281, 
	281, 281, 282, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 266, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 283, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 284, 281, 281, 281, 
	281, 281, 281, 285, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	286, 281, 266, 281, 281, 281, 266, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 266, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 286, 281, 287, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 288, 266, 288, 266, 
	266, 289, 289, 289, 266, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 266, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 290, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 291, 289, 266, 269, 
	269, 269, 266, 269, 269, 269, 269, 269, 
	270, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	266, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 273, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 272, 269, 
	266, 292, 292, 292, 266, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 266, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 292, 292, 292, 292, 292, 292, 
	292, 293, 293, 293, 293, 293, 293, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 293, 293, 293, 293, 293, 293, 292, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 295, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 296, 210, 210, 297, 210, 295, 
	210, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 210, 210, 210, 210, 294, 
	210, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 210, 210, 210, 210, 210, 
	294, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 295, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 296, 244, 244, 297, 244, 
	295, 244, 294, 294, 294, 294, 294, 294, 
	298, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 244, 244, 244, 244, 
	294, 244, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 244, 244, 244, 244, 
	244, 294, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 295, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 296, 244, 244, 297, 
	244, 295, 244, 294, 294, 294, 294, 294, 
	294, 294, 294, 299, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 244, 244, 244, 
	244, 294, 244, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 244, 244, 244, 
	244, 244, 294, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 295, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 296, 244, 244, 
	297, 244, 295, 244, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 300, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 244, 244, 
	244, 244, 294, 244, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 244, 244, 
	244, 244, 244, 294, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 295, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 296, 244, 
	244, 297, 244, 295, 244, 294, 294, 294, 
	300, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 244, 
	244, 244, 244, 294, 244, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 244, 
	244, 244, 244, 244, 294, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 303, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 304, 
	301, 301, 301, 301, 303, 301, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	301, 301, 301, 301, 302, 301, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	301, 301, 301, 301, 301, 302, 304, 301, 
	301, 305, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 306, 306, 306, 306, 
	306, 306, 306, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 306, 306, 306, 
	306, 307, 306, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 306, 306, 306, 
	306, 306, 307, 309, 308, 309, 308, 308, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 308, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 308, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	308, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 312, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 312, 316, 
	315, 317, 315, 318, 315, 319, 315, 321, 
	320, 322, 320, 323, 320, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 306, 
	306, 306, 306, 306, 306, 306, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	306, 306, 306, 306, 324, 306, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	306, 306, 306, 306, 306, 324, 325, 312, 
	326, 327, 326, 326, 326, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 326, 
	312, 312, 328, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 329, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 330, 312, 331, 332, 331, 
	331, 331, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 331, 312, 312, 333, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	334, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	335, 312, 337, 338, 337, 337, 337, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 337, 336, 336, 339, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 340, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 341, 336, 343, 
	344, 343, 343, 343, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 343, 342, 
	342, 345, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 346, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 347, 342, 343, 344, 343, 343, 
	343, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 343, 342, 342, 345, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 348, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 347, 
	342, 343, 349, 343, 343, 343, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	343, 342, 342, 345, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 346, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 347, 342, 350, 312, 
	327, 312, 352, 353, 352, 352, 352, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 352, 351, 351, 354, 351, 351, 355, 
	351, 351, 351, 351, 351, 351, 351, 356, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 357, 351, 359, 
	353, 359, 359, 359, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 358, 
	358, 354, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 357, 358, 362, 361, 364, 363, 
	365, 360, 366, 360, 367, 351, 369, 368, 
	368, 368, 369, 368, 368, 368, 368, 370, 
	371, 370, 370, 370, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	369, 368, 368, 368, 368, 368, 370, 368, 
	368, 372, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 373, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 374, 368, 368, 375, 368, 370, 
	376, 370, 370, 370, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 370, 376, 
	377, 378, 379, 380, 381, 383, 382, 385, 
	386, 385, 385, 385, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 385, 384, 
	371, 382, 387, 382, 389, 388, 388, 388, 
	389, 388, 388, 388, 388, 390, 391, 390, 
	390, 390, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 389, 388, 
	388, 388, 388, 388, 390, 388, 388, 392, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	393, 388, 390, 394, 390, 390, 390, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 390, 394, 396, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 397, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 395, 395, 395, 395, 
	395, 395, 398, 395, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 399, 399, 
	399, 399, 399, 399, 399, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 399, 
	399, 399, 399, 13, 399, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 399, 
	399, 399, 399, 399, 13, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 399, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 400, 400, 400, 400, 400, 400, 
	400, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 400, 400, 400, 400, 17, 
	400, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 400, 400, 400, 400, 400, 
	17, 403, 402, 402, 402, 403, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 403, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 404, 404, 404, 404, 404, 404, 404, 
	404, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 405, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 406, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 407, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 408, 402, 
	402, 409, 402, 410, 411, 413, 413, 413, 
	413, 413, 413, 413, 413, 412, 414, 414, 
	414, 414, 414, 414, 414, 414, 412, 412, 
	415, 415, 42, 42, 42, 415, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 415, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 416, 42, 417, 
	418, 419, 419, 42, 42, 42, 419, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 419, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 43, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 420, 42, 
	41, 419, 421, 422, 423, 423, 27, 27, 
	27, 423, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 423, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 424, 27, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 423, 423, 423, 
	423, 423, 423, 423, 425, 425, 425, 425, 
	425, 425, 423, 423, 423, 423, 423, 423, 
	423, 423, 423, 423, 423, 423, 423, 423, 
	423, 423, 423, 423, 423, 423, 423, 423, 
	423, 423, 423, 423, 425, 425, 425, 425, 
	425, 425, 423, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 426, 426, 426, 
	426, 426, 426, 426, 427, 427, 427, 427, 
	427, 427, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 427, 427, 427, 427, 
	427, 427, 426, 426, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 419, 419, 
	419, 419, 419, 419, 419, 428, 428, 428, 
	428, 428, 428, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 428, 428, 428, 
	428, 428, 428, 419, 430, 430, 430, 430, 
	430, 430, 430, 430, 430, 430, 429, 429, 
	429, 429, 429, 429, 429, 430, 430, 430, 
	430, 430, 430, 429, 429, 429, 429, 429, 
	429, 429, 429, 429, 429, 429, 429, 429, 
	429, 429, 429, 429, 429, 429, 429, 429, 
	429, 429, 429, 429, 429, 430, 430, 430, 
	430, 430, 430, 429, 429, 419, 20, 20, 
	20, 419, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 419, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 431, 20, 415, 27, 27, 27, 
	415, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 415, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 28, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	29, 27, 415, 432, 432, 432, 415, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 415, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 433, 432, 
	434, 435, 435, 432, 432, 432, 435, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 435, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 436, 432, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 435, 435, 435, 435, 435, 435, 
	435, 437, 437, 437, 437, 437, 437, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 437, 437, 437, 437, 437, 437, 435, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 438, 438, 438, 438, 438, 438, 
	438, 439, 439, 439, 439, 439, 439, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 439, 439, 439, 439, 439, 439, 438, 
	438, 435, 20, 20, 20, 435, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 435, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 431, 20, 
	440, 435, 435, 27, 27, 27, 435, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 435, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 28, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 29, 27, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 441, 441, 441, 441, 441, 441, 
	441, 442, 442, 442, 442, 442, 442, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 442, 442, 442, 442, 442, 442, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 443, 441, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 441, 
	441, 441, 441, 441, 441, 441, 444, 444, 
	444, 444, 444, 444, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 444, 444, 
	444, 444, 444, 444, 441, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 441, 
	441, 441, 441, 441, 441, 441, 445, 445, 
	445, 445, 445, 445, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 445, 445, 
	445, 445, 445, 445, 441, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 446, 441, 
	441, 441, 441, 441, 441, 441, 446, 446, 
	446, 446, 446, 446, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 441, 446, 446, 
	446, 446, 446, 446, 441, 447, 450, 449, 
	449, 449, 450, 449, 449, 449, 449, 451, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	450, 449, 449, 449, 449, 449, 451, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	449, 449, 449, 449, 449, 449, 449, 452, 
	452, 452, 452, 452, 452, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 452, 
	452, 452, 452, 452, 452, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 453, 449, 450, 449, 449, 
	449, 450, 449, 449, 449, 449, 448, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 450, 
	449, 449, 449, 449, 449, 448, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 449, 
	449, 449, 449, 449, 449, 449, 454, 454, 
	454, 454, 454, 454, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 454, 454, 
	454, 454, 454, 454, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 455, 449, 448, 450, 454, 454, 
	454, 450, 454, 454, 454, 454, 448, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 450, 
	454, 454, 454, 454, 454, 448, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 448, 454, 456, 450, 457, 457, 
	457, 450, 457, 457, 457, 457, 451, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 450, 
	457, 457, 457, 457, 457, 451, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 457, 
	457, 457, 457, 457, 457, 457, 452, 452, 
	452, 452, 452, 452, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 452, 452, 
	452, 452, 452, 452, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 448, 457, 450, 457, 457, 457, 
	450, 457, 457, 457, 457, 448, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 450, 457, 
	457, 457, 457, 457, 448, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 457, 457, 
	457, 457, 457, 457, 457, 454, 454, 454, 
	454, 454, 454, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 454, 454, 454, 
	454, 454, 454, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 450, 457, 450, 457, 457, 457, 450, 
	457, 457, 457, 457, 458, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 450, 457, 457, 
	457, 457, 457, 458, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 459, 459, 459, 459, 459, 
	459, 459, 459, 459, 459, 457, 457, 457, 
	457, 457, 457, 457, 459, 459, 459, 459, 
	459, 459, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 459, 459, 459, 459, 
	459, 459, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	460, 457, 450, 457, 457, 457, 450, 457, 
	457, 457, 457, 458, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 450, 457, 457, 457, 
	457, 457, 458, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 457, 457, 457, 457, 
	457, 457, 457, 452, 452, 452, 452, 452, 
	452, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 452, 452, 452, 452, 452, 
	452, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 460, 
	457, 461, 450, 457, 457, 457, 450, 457, 
	457, 457, 457, 458, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 450, 457, 457, 457, 
	457, 457, 458, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 462, 462, 462, 462, 462, 462, 
	462, 462, 462, 462, 457, 457, 457, 457, 
	457, 457, 457, 462, 462, 462, 462, 462, 
	462, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 462, 462, 462, 462, 462, 
	462, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 460, 
	457, 450, 457, 457, 457, 450, 457, 457, 
	457, 457, 458, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 450, 457, 457, 457, 457, 
	457, 458, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 463, 463, 463, 463, 463, 463, 463, 
	463, 463, 463, 457, 457, 457, 457, 457, 
	457, 457, 463, 463, 463, 463, 463, 463, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 463, 463, 463, 463, 463, 463, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 460, 457, 
	450, 457, 457, 457, 450, 457, 457, 457, 
	457, 458, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 450, 457, 457, 457, 457, 457, 
	458, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 457, 457, 457, 457, 457, 457, 
	457, 464, 464, 464, 464, 464, 464, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 464, 464, 464, 464, 464, 464, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 460, 457, 450, 
	457, 457, 457, 450, 457, 457, 457, 457, 
	458, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 450, 457, 457, 457, 457, 457, 458, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 457, 457, 457, 457, 457, 457, 457, 
	465, 465, 465, 465, 465, 465, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	465, 465, 465, 465, 465, 465, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 460, 457, 450, 457, 
	457, 457, 450, 457, 457, 457, 457, 458, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	450, 457, 457, 457, 457, 457, 458, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 466, 466, 
	466, 466, 466, 466, 466, 466, 466, 466, 
	457, 457, 457, 457, 457, 457, 457, 466, 
	466, 466, 466, 466, 466, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 466, 
	466, 466, 466, 466, 466, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 460, 457, 450, 457, 457, 
	457, 450, 457, 457, 457, 457, 448, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 450, 
	457, 457, 457, 457, 457, 448, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 466, 466, 466, 
	466, 466, 466, 466, 466, 466, 466, 457, 
	457, 457, 457, 457, 457, 457, 466, 466, 
	466, 466, 466, 466, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 466, 466, 
	466, 466, 466, 466, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 448, 457, 467, 468, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	469, 469, 469, 469, 469, 469, 469, 470, 
	470, 470, 470, 470, 470, 469, 469, 469, 
	469, 469, 469, 469, 469, 469, 469, 469, 
	469, 469, 469, 469, 469, 469, 469, 469, 
	469, 469, 469, 469, 469, 469, 469, 470, 
	470, 470, 470, 470, 470, 469, 469, 472, 
	471, 471, 471, 472, 471, 471, 471, 471, 
	471, 473, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 472, 471, 471, 471, 471, 471, 471, 
	471, 471, 474, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 475, 471, 477, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 478, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 479, 476, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	480, 480, 480, 480, 480, 480, 480, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 480, 480, 480, 480, 48, 480, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 480, 480, 480, 480, 480, 48, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 480, 481, 481, 481, 481, 481, 481, 
	481, 481, 481, 481, 481, 481, 481, 481, 
	481, 481, 481, 481, 481, 481, 481, 481, 
	481, 481, 481, 481, 481, 481, 481, 481, 
	481, 481, 481, 481, 481, 481, 481, 481, 
	481, 481, 481, 481, 481, 481, 481, 481, 
	481, 481, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 481, 481, 481, 481, 
	481, 481, 481, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 481, 481, 481, 
	481, 52, 481, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 481, 481, 481, 
	481, 481, 52, 484, 483, 483, 483, 484, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 484, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 485, 485, 485, 485, 485, 
	485, 485, 485, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 486, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	487, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 488, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	489, 483, 483, 490, 483, 491, 492, 494, 
	494, 494, 494, 494, 494, 494, 494, 493, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	493, 493, 496, 496, 77, 77, 77, 496, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 496, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 78, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 497, 
	77, 498, 499, 500, 500, 77, 77, 77, 
	500, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 500, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 78, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	501, 77, 76, 500, 502, 503, 504, 504, 
	62, 62, 62, 504, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 504, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 505, 62, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 504, 
	504, 504, 504, 504, 504, 504, 506, 506, 
	506, 506, 506, 506, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 506, 506, 
	506, 506, 506, 506, 504, 508, 508, 508, 
	508, 508, 508, 508, 508, 508, 508, 507, 
	507, 507, 507, 507, 507, 507, 508, 508, 
	508, 508, 508, 508, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 508, 508, 
	508, 508, 508, 508, 507, 507, 509, 509, 
	509, 509, 509, 509, 509, 509, 509, 509, 
	500, 500, 500, 500, 500, 500, 500, 509, 
	509, 509, 509, 509, 509, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 509, 
	509, 509, 509, 509, 509, 500, 511, 511, 
	511, 511, 511, 511, 511, 511, 511, 511, 
	510, 510, 510, 510, 510, 510, 510, 511, 
	511, 511, 511, 511, 511, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 511, 
	511, 511, 511, 511, 511, 510, 510, 500, 
	55, 55, 55, 500, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 500, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 512, 55, 496, 62, 
	62, 62, 496, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	496, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 64, 62, 496, 513, 513, 513, 
	496, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 496, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	514, 513, 515, 516, 516, 513, 513, 513, 
	516, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 516, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	517, 513, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 516, 516, 516, 516, 
	516, 516, 516, 518, 518, 518, 518, 518, 
	518, 516, 516, 516, 516, 516, 516, 516, 
	516, 516, 516, 516, 516, 516, 516, 516, 
	516, 516, 516, 516, 516, 516, 516, 516, 
	516, 516, 516, 518, 518, 518, 518, 518, 
	518, 516, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 519, 519, 519, 519, 
	519, 519, 519, 520, 520, 520, 520, 520, 
	520, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 520, 520, 520, 520, 520, 
	520, 519, 519, 516, 55, 55, 55, 516, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 516, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	512, 55, 521, 516, 516, 62, 62, 62, 
	516, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 516, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 63, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	64, 62, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 522, 522, 522, 522, 
	522, 522, 522, 523, 523, 523, 523, 523, 
	523, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 523, 523, 523, 523, 523, 
	523, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 524, 522, 525, 
	525, 525, 525, 525, 525, 525, 525, 525, 
	525, 522, 522, 522, 522, 522, 522, 522, 
	525, 525, 525, 525, 525, 525, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	525, 525, 525, 525, 525, 525, 522, 526, 
	526, 526, 526, 526, 526, 526, 526, 526, 
	526, 522, 522, 522, 522, 522, 522, 522, 
	526, 526, 526, 526, 526, 526, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	526, 526, 526, 526, 526, 526, 522, 527, 
	527, 527, 527, 527, 527, 527, 527, 527, 
	527, 522, 522, 522, 522, 522, 522, 522, 
	527, 527, 527, 527, 527, 527, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	527, 527, 527, 527, 527, 527, 522, 528, 
	531, 530, 530, 530, 531, 530, 530, 530, 
	530, 532, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 531, 530, 530, 530, 530, 530, 
	532, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 530, 530, 530, 530, 530, 530, 
	530, 533, 533, 533, 533, 533, 533, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 533, 533, 533, 533, 533, 533, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 534, 530, 531, 
	530, 530, 530, 531, 530, 530, 530, 530, 
	529, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 531, 530, 530, 530, 530, 530, 529, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 530, 530, 530, 530, 530, 530, 530, 
	535, 535, 535, 535, 535, 535, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	535, 535, 535, 535, 535, 535, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 530, 530, 530, 530, 
	530, 530, 530, 530, 536, 530, 529, 531, 
	535, 535, 535, 531, 535, 535, 535, 535, 
	529, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 531, 535, 535, 535, 535, 535, 529, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 529, 535, 537, 531, 
	538, 538, 538, 531, 538, 538, 538, 538, 
	532, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 531, 538, 538, 538, 538, 538, 532, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 538, 538, 538, 538, 538, 538, 538, 
	533, 533, 533, 533, 533, 533, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	533, 533, 533, 533, 533, 533, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 529, 538, 531, 538, 
	538, 538, 531, 538, 538, 538, 538, 529, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	531, 538, 538, 538, 538, 538, 529, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	538, 538, 538, 538, 538, 538, 538, 535, 
	535, 535, 535, 535, 535, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 535, 
	535, 535, 535, 535, 535, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 531, 538, 531, 538, 538, 
	538, 531, 538, 538, 538, 538, 539, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 531, 
	538, 538, 538, 538, 538, 539, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 540, 540, 540, 
	540, 540, 540, 540, 540, 540, 540, 538, 
	538, 538, 538, 538, 538, 538, 540, 540, 
	540, 540, 540, 540, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 540, 540, 
	540, 540, 540, 540, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 541, 538, 531, 538, 538, 538, 
	531, 538, 538, 538, 538, 539, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 531, 538, 
	538, 538, 538, 538, 539, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 538, 538, 
	538, 538, 538, 538, 538, 533, 533, 533, 
	533, 533, 533, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 533, 533, 533, 
	533, 533, 533, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 541, 538, 542, 531, 538, 538, 538, 
	531, 538, 538, 538, 538, 539, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 531, 538, 
	538, 538, 538, 538, 539, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 538, 538, 
	538, 538, 538, 538, 538, 543, 543, 543, 
	543, 543, 543, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 543, 543, 543, 
	543, 543, 543, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 541, 538, 531, 538, 538, 538, 531, 
	538, 538, 538, 538, 539, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 531, 538, 538, 
	538, 538, 538, 539, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 544, 544, 544, 544, 544, 
	544, 544, 544, 544, 544, 538, 538, 538, 
	538, 538, 538, 538, 544, 544, 544, 544, 
	544, 544, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 544, 544, 544, 544, 
	544, 544, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	541, 538, 531, 538, 538, 538, 531, 538, 
	538, 538, 538, 539, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 531, 538, 538, 538, 
	538, 538, 539, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 538, 538, 538, 538, 
	538, 538, 538, 545, 545, 545, 545, 545, 
	545, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 545, 545, 545, 545, 545, 
	545, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 541, 
	538, 531, 538, 538, 538, 531, 538, 538, 
	538, 538, 539, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 531, 538, 538, 538, 538, 
	538, 539, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 538, 538, 538, 538, 538, 
	538, 538, 546, 546, 546, 546, 546, 546, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 546, 546, 546, 546, 546, 546, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 541, 538, 
	531, 538, 538, 538, 531, 538, 538, 538, 
	538, 539, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 531, 538, 538, 538, 538, 538, 
	539, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 547, 538, 538, 538, 538, 538, 538, 
	538, 547, 547, 547, 547, 547, 547, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 547, 547, 547, 547, 547, 547, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 541, 538, 531, 
	538, 538, 538, 531, 538, 538, 538, 538, 
	529, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 531, 538, 538, 538, 538, 538, 529, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 547, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 538, 538, 538, 538, 538, 538, 538, 
	547, 547, 547, 547, 547, 547, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	547, 547, 547, 547, 547, 547, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 529, 538, 548, 549, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 550, 550, 550, 550, 550, 550, 
	550, 551, 551, 551, 551, 551, 551, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 551, 551, 551, 551, 551, 551, 550, 
	550, 553, 552, 552, 552, 553, 552, 552, 
	552, 552, 554, 555, 554, 554, 554, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 553, 552, 552, 552, 552, 
	552, 554, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 556, 552, 554, 
	557, 554, 554, 554, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 554, 557, 
	558, 559, 559, 559, 558, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 558, 559, 561, 560, 560, 560, 
	561, 560, 560, 560, 560, 560, 562, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 561, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	563, 560, 564, 565, 565, 565, 564, 565, 
	565, 565, 565, 565, 566, 565, 565, 565, 
	565, 565, 565, 565, 565, 565, 565, 565, 
	565, 565, 565, 565, 564, 565, 568, 567, 
	567, 567, 568, 567, 567, 567, 567, 567, 
	569, 567, 567, 567, 567, 567, 567, 567, 
	567, 567, 567, 567, 567, 567, 567, 567, 
	568, 567, 567, 567, 567, 567, 567, 567, 
	567, 570, 567, 572, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 573, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 574, 571, 575, 575, 575, 575, 
	575, 575, 575, 575, 575, 575, 575, 575, 
	575, 575, 575, 575, 575, 575, 575, 575, 
	575, 575, 575, 575, 575, 575, 575, 575, 
	575, 575, 575, 575, 575, 575, 575, 575, 
	575, 575, 575, 575, 575, 575, 575, 575, 
	575, 575, 575, 575, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 575, 575, 
	575, 575, 575, 575, 575, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 575, 
	575, 575, 575, 83, 575, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 575, 
	575, 575, 575, 575, 83, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 575, 
	576, 576, 576, 576, 576, 576, 576, 576, 
	576, 576, 576, 576, 576, 576, 576, 576, 
	576, 576, 576, 576, 576, 576, 576, 576, 
	576, 576, 576, 576, 576, 576, 576, 576, 
	576, 576, 576, 576, 576, 576, 576, 576, 
	576, 576, 576, 576, 576, 576, 576, 576, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 576, 576, 576, 576, 576, 576, 
	576, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 576, 576, 576, 576, 87, 
	576, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 576, 576, 576, 576, 576, 
	87, 578, 577, 577, 577, 578, 577, 577, 
	577, 577, 577, 579, 577, 577, 577, 577, 
	577, 577, 577, 577, 577, 577, 577, 577, 
	577, 577, 577, 578, 577, 581, 580, 580, 
	580, 581, 580, 580, 580, 580, 582, 583, 
	582, 582, 582, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 581, 
	580, 580, 580, 580, 580, 582, 580, 580, 
	584, 580, 582, 585, 582, 582, 582, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 582, 585, 587, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 588, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 589, 586, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 590, 590, 
	590, 590, 590, 590, 590, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 590, 
	590, 590, 590, 90, 590, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 590, 
	590, 590, 590, 590, 90, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 590, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 591, 591, 591, 591, 591, 591, 
	591, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 591, 591, 591, 591, 94, 
	591, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 591, 591, 591, 591, 591, 
	94, 593, 592, 592, 592, 593, 592, 592, 
	592, 592, 594, 595, 594, 594, 594, 592, 
	592, 592, 592, 592, 592, 592, 592, 592, 
	592, 592, 592, 593, 592, 592, 592, 592, 
	592, 594, 592, 594, 596, 594, 594, 594, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 594, 596, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 597, 597, 
	597, 597, 597, 597, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 597, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 599, 599, 599, 599, 599, 599, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 598, 598, 598, 598, 598, 598, 598, 
	598, 599, 600, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 601, 98, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 602, 602, 602, 602, 602, 602, 
	602, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 602, 602, 602, 602, 96, 
	602, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 602, 602, 602, 602, 602, 
	96, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 602, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 603, 603, 
	603, 603, 603, 603, 603, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 603, 
	603, 603, 603, 101, 603, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 603, 
	603, 603, 603, 603, 101, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 604, 
	604, 604, 604, 604, 604, 604, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	604, 604, 604, 604, 103, 604, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	604, 604, 604, 604, 604, 103, 606, 607, 
	607, 607, 606, 607, 607, 607, 607, 608, 
	609, 608, 608, 608, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	606, 607, 607, 607, 607, 607, 608, 610, 
	607, 611, 612, 613, 614, 607, 607, 607, 
	615, 616, 607, 616, 607, 617, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	618, 607, 619, 620, 621, 607, 607, 622, 
	623, 622, 622, 624, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 625, 626, 607, 617, 627, 617, 628, 
	629, 630, 631, 632, 633, 605, 605, 634, 
	605, 605, 605, 635, 636, 637, 605, 605, 
	638, 639, 640, 641, 605, 642, 605, 643, 
	605, 607, 644, 607, 616, 607, 605, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	646, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 645, 645, 645, 646, 645, 646, 645, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 645, 645, 645, 645, 605, 645, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 645, 645, 645, 645, 645, 605, 
	608, 647, 608, 608, 608, 647, 647, 647, 
	647, 647, 647, 647, 647, 647, 647, 647, 
	647, 647, 647, 647, 647, 647, 647, 608, 
	647, 648, 617, 649, 649, 617, 649, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 649, 649, 649, 649, 649, 649, 649, 
	649, 649, 649, 617, 649, 650, 651, 652, 
	653, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 105, 105, 654, 105, 654, 105, 
	105, 654, 654, 105, 105, 105, 656, 105, 
	105, 657, 657, 657, 657, 657, 657, 657, 
	657, 657, 657, 105, 105, 105, 105, 105, 
	105, 105, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 654, 105, 654, 654, 
	655, 105, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 654, 654, 654, 105, 
	654, 655, 658, 658, 658, 658, 658, 658, 
	658, 658, 658, 658, 658, 658, 658, 658, 
	658, 658, 658, 658, 658, 658, 658, 658, 
	658, 658, 658, 658, 658, 658, 658, 658, 
	658, 658, 658, 658, 658, 658, 658, 658, 
	658, 658, 658, 658, 658, 658, 658, 658, 
	658, 658, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 658, 658, 658, 658, 
	658, 658, 658, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 658, 658, 658, 
	658, 655, 658, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 658, 658, 658, 
	658, 658, 655, 657, 657, 657, 657, 657, 
	657, 657, 657, 657, 657, 658, 659, 649, 
	617, 649, 617, 649, 617, 649, 661, 660, 
	617, 662, 649, 617, 649, 663, 617, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 617, 654, 
	617, 649, 617, 617, 649, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 646, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 645, 
	645, 645, 646, 645, 646, 645, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	645, 645, 645, 645, 622, 645, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	645, 645, 645, 645, 645, 622, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 646, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	664, 664, 664, 646, 664, 646, 664, 622, 
	622, 622, 622, 665, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 664, 664, 664, 664, 622, 664, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 664, 664, 664, 664, 664, 622, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	646, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 664, 664, 664, 646, 664, 646, 664, 
	622, 622, 622, 622, 622, 622, 666, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 664, 664, 664, 664, 622, 664, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 664, 664, 664, 664, 664, 622, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 646, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 664, 664, 664, 646, 664, 646, 
	664, 622, 622, 622, 622, 622, 622, 622, 
	622, 667, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 664, 664, 664, 664, 622, 
	664, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 664, 664, 664, 664, 664, 
	622, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 646, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 664, 664, 664, 646, 664, 
	646, 664, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 668, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 664, 664, 664, 664, 
	622, 664, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 664, 664, 664, 664, 
	664, 622, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 646, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 664, 664, 664, 646, 
	664, 646, 664, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	669, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 664, 664, 664, 
	664, 622, 664, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 664, 664, 664, 
	664, 664, 622, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 664, 646, 664, 664, 664, 
	664, 664, 664, 664, 664, 664, 664, 664, 
	664, 664, 664, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 664, 664, 664, 
	646, 664, 646, 664, 622, 622, 622, 668, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 664, 664, 
	664, 664, 622, 664, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 664, 664, 
	664, 664, 664, 622, 663, 654, 609, 654, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 671, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 672, 673, 
	605, 605, 605, 605, 605, 674, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	675, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 676, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 677, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 678, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 679, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 680, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 681, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	682, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 683, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 684, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	685, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 681, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 686, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 685, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 687, 605, 688, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 689, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 690, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 683, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	683, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 691, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 692, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 605, 605, 605, 693, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	694, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 683, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 695, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 696, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 683, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 697, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	698, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	699, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 605, 683, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	700, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 690, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 701, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	683, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 605, 605, 605, 605, 605, 
	702, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 646, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 703, 703, 703, 
	646, 703, 646, 703, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 703, 703, 
	703, 703, 605, 703, 605, 605, 605, 605, 
	605, 605, 605, 605, 704, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 703, 703, 
	703, 703, 703, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 705, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 706, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 707, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 708, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 709, 605, 710, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 711, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 605, 605, 605, 605, 683, 
	605, 605, 605, 712, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	605, 683, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	683, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 713, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 714, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	699, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	715, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 637, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 697, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 683, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 605, 605, 605, 605, 605, 
	683, 605, 605, 605, 605, 605, 605, 605, 
	683, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 716, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	717, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 718, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 699, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	605, 605, 605, 605, 719, 605, 605, 605, 
	720, 605, 605, 605, 605, 605, 721, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	721, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 683, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 683, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	722, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	723, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 724, 
	725, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 683, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 726, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 699, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 727, 605, 605, 728, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 683, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 694, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	729, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	730, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	712, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 731, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 605, 637, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	605, 605, 605, 605, 605, 605, 605, 732, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 726, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 694, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 733, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 605, 605, 605, 734, 605, 
	605, 605, 605, 605, 605, 605, 735, 605, 
	605, 605, 605, 605, 605, 605, 736, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 646, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	646, 670, 646, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 605, 670, 605, 605, 605, 605, 
	712, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 670, 670, 605, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 646, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 670, 670, 
	670, 646, 670, 646, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 605, 670, 605, 605, 605, 
	605, 700, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 670, 670, 605, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 646, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 670, 
	670, 670, 646, 670, 646, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 605, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 720, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 670, 670, 605, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 646, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	670, 670, 670, 646, 670, 646, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 605, 670, 605, 
	605, 605, 605, 605, 605, 605, 737, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 670, 670, 605, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	646, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 670, 670, 670, 646, 670, 646, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 605, 670, 
	605, 605, 605, 605, 694, 605, 605, 605, 
	718, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 670, 670, 605, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 646, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 670, 670, 670, 646, 670, 646, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 605, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 738, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 670, 670, 
	605, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 646, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 670, 670, 670, 646, 670, 
	646, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	605, 670, 605, 605, 605, 605, 739, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 670, 
	670, 605, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 646, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 670, 670, 670, 646, 
	670, 646, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 605, 670, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 605, 688, 605, 
	605, 605, 605, 605, 605, 605, 605, 605, 
	605, 605, 605, 605, 605, 670, 670, 670, 
	670, 670, 605, 617, 649, 741, 742, 742, 
	742, 741, 742, 742, 742, 742, 743, 742, 
	743, 743, 743, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 741, 
	742, 742, 742, 742, 742, 743, 742, 742, 
	744, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	742, 745, 742, 742, 740, 742, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	742, 742, 742, 742, 742, 740, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 110, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	111, 746, 746, 746, 746, 110, 746, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 746, 746, 746, 746, 109, 746, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 746, 746, 746, 746, 746, 109, 743, 
	747, 743, 743, 743, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 743, 747, 
	748, 749, 750, 751, 752, 746, 753, 755, 
	756, 756, 756, 755, 756, 756, 756, 756, 
	757, 758, 757, 757, 757, 756, 756, 756, 
	756, 756, 756, 756, 756, 756, 756, 756, 
	756, 755, 756, 756, 756, 756, 756, 757, 
	759, 756, 760, 756, 761, 762, 756, 756, 
	756, 763, 764, 756, 764, 756, 761, 756, 
	756, 756, 756, 756, 756, 756, 756, 756, 
	756, 756, 756, 765, 766, 767, 756, 756, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 769, 770, 756, 761, 754, 761, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 756, 771, 756, 764, 756, 754, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 773, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 772, 772, 772, 772, 772, 773, 
	772, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 772, 772, 772, 772, 754, 
	772, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 772, 772, 772, 772, 772, 
	754, 775, 774, 776, 757, 777, 757, 757, 
	757, 777, 777, 777, 777, 777, 777, 777, 
	777, 777, 777, 777, 777, 777, 777, 777, 
	777, 777, 777, 757, 777, 778, 761, 779, 
	779, 761, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 761, 
	779, 780, 781, 782, 783, 761, 779, 761, 
	779, 761, 779, 761, 784, 779, 761, 779, 
	786, 761, 785, 785, 785, 785, 785, 785, 
	785, 785, 785, 785, 785, 785, 785, 785, 
	785, 785, 785, 785, 785, 785, 785, 785, 
	785, 785, 785, 785, 785, 785, 785, 785, 
	785, 785, 785, 785, 785, 785, 785, 785, 
	785, 785, 785, 785, 785, 785, 785, 785, 
	785, 785, 785, 785, 785, 785, 785, 785, 
	785, 785, 785, 785, 785, 785, 785, 785, 
	785, 761, 785, 761, 779, 761, 761, 779, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 773, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 787, 787, 787, 787, 787, 773, 
	787, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 787, 787, 787, 787, 768, 
	787, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 787, 787, 787, 787, 787, 
	768, 786, 785, 758, 785, 761, 779, 789, 
	788, 788, 788, 789, 788, 788, 788, 788, 
	790, 791, 790, 790, 790, 788, 788, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 789, 788, 788, 788, 788, 788, 790, 
	788, 788, 792, 788, 119, 793, 788, 794, 
	788, 795, 119, 150, 796, 152, 119, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 797, 788, 798, 150, 799, 800, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 788, 150, 801, 150, 119, 788, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	802, 788, 788, 788, 788, 788, 788, 788, 
	788, 803, 788, 788, 804, 788, 805, 788, 
	788, 788, 163, 164, 788, 119, 788, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	790, 806, 790, 790, 790, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 790, 
	806, 806, 806, 806, 145, 146, 806, 147, 
	806, 148, 149, 150, 151, 152, 145, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 153, 806, 154, 150, 155, 156, 806, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 157, 158, 150, 119, 114, 806, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	159, 114, 114, 114, 114, 114, 114, 114, 
	114, 160, 114, 114, 161, 114, 162, 114, 
	114, 114, 163, 164, 806, 119, 806, 114, 
	807, 808, 808, 808, 807, 808, 808, 808, 
	808, 150, 809, 150, 150, 150, 808, 808, 
	808, 808, 808, 808, 808, 808, 808, 808, 
	808, 808, 807, 808, 808, 808, 808, 808, 
	150, 808, 808, 808, 808, 808, 808, 808, 
	808, 808, 808, 808, 808, 808, 808, 808, 
	808, 808, 808, 808, 808, 808, 808, 808, 
	808, 808, 808, 808, 808, 150, 808, 150, 
	809, 150, 150, 150, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 150, 113, 
	113, 113, 113, 113, 119, 113, 113, 113, 
	113, 113, 113, 113, 150, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 150, 113, 150, 809, 150, 
	150, 150, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 150, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 150, 113, 810, 150, 809, 150, 150, 
	150, 811, 811, 811, 811, 811, 811, 811, 
	811, 811, 811, 811, 811, 811, 811, 811, 
	811, 811, 811, 150, 811, 811, 811, 811, 
	811, 811, 811, 811, 811, 812, 811, 811, 
	811, 811, 811, 811, 811, 811, 811, 811, 
	811, 811, 811, 811, 811, 811, 811, 811, 
	150, 811, 150, 809, 150, 150, 150, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 150, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 150, 150, 
	113, 813, 807, 150, 807, 815, 814, 817, 
	818, 817, 817, 817, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 817, 816, 
	819, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 115, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 116, 807, 807, 807, 807, 
	115, 807, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 807, 807, 807, 807, 
	114, 807, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 807, 807, 807, 807, 
	807, 114, 820, 150, 809, 150, 150, 150, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 150, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 150, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 119, 807, 
	821, 822, 823, 824, 825, 826, 150, 809, 
	150, 150, 150, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 150, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 119, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 150, 807, 150, 814, 119, 827, 
	119, 827, 828, 829, 828, 828, 828, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 828, 816, 830, 827, 831, 831, 831, 
	831, 831, 831, 831, 831, 831, 122, 831, 
	122, 122, 122, 831, 831, 831, 831, 831, 
	831, 831, 831, 831, 831, 831, 831, 831, 
	831, 831, 831, 831, 831, 122, 831, 831, 
	831, 831, 123, 124, 831, 125, 831, 126, 
	127, 128, 129, 130, 123, 831, 831, 831, 
	831, 831, 831, 831, 831, 831, 831, 131, 
	831, 132, 128, 133, 134, 831, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	135, 136, 128, 137, 121, 831, 121, 121, 
	121, 121, 121, 121, 121, 121, 138, 121, 
	121, 121, 121, 121, 121, 121, 121, 139, 
	121, 121, 140, 121, 141, 121, 121, 121, 
	142, 143, 831, 137, 831, 121, 150, 827, 
	832, 827, 833, 827, 834, 827, 835, 189, 
	189, 189, 835, 189, 189, 189, 189, 836, 
	189, 836, 836, 836, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	835, 189, 189, 189, 189, 189, 836, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 189, 837, 189, 189, 191, 189, 191, 
	191, 191, 195, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 189, 189, 189, 189, 189, 191, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	838, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 189, 188, 188, 188, 188, 838, 188, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 188, 188, 188, 188, 191, 188, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 188, 188, 188, 188, 188, 191, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 192, 839, 192, 192, 192, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	192, 839, 839, 839, 839, 839, 839, 839, 
	193, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 839, 194, 839, 839, 191, 
	839, 191, 191, 191, 195, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 839, 839, 839, 839, 839, 
	191, 840, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 838, 839, 839, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 189, 839, 839, 839, 
	839, 838, 839, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 839, 839, 839, 
	839, 191, 839, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 841, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 839, 839, 839, 
	839, 839, 191, 196, 839, 843, 842, 842, 
	842, 843, 842, 842, 842, 842, 844, 842, 
	844, 844, 844, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 843, 
	842, 842, 842, 842, 842, 844, 842, 842, 
	845, 842, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	842, 846, 842, 842, 842, 842, 842, 842, 
	842, 847, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	848, 842, 844, 849, 844, 844, 844, 849, 
	849, 849, 849, 849, 849, 849, 849, 849, 
	849, 849, 849, 849, 849, 849, 849, 849, 
	849, 844, 849, 850, 851, 852, 853, 855, 
	854, 856, 857, 854, 858, 860, 861, 861, 
	861, 860, 861, 861, 861, 861, 862, 863, 
	862, 862, 862, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 860, 
	861, 861, 861, 861, 861, 862, 861, 861, 
	864, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	861, 865, 861, 861, 859, 861, 859, 859, 
	859, 859, 859, 859, 859, 859, 866, 859, 
	859, 859, 859, 859, 859, 859, 859, 867, 
	859, 859, 868, 859, 869, 859, 859, 859, 
	861, 861, 861, 861, 861, 859, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	870, 870, 870, 870, 870, 870, 870, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 870, 870, 870, 870, 859, 870, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 870, 870, 870, 870, 870, 859, 862, 
	871, 862, 862, 862, 871, 871, 871, 871, 
	871, 871, 871, 871, 871, 871, 871, 871, 
	871, 871, 871, 871, 871, 871, 862, 871, 
	872, 873, 874, 875, 876, 878, 877, 879, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 880, 880, 880, 880, 880, 880, 
	880, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 880, 880, 880, 880, 859, 
	880, 859, 859, 859, 859, 859, 881, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 880, 880, 880, 880, 880, 
	859, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 880, 880, 880, 880, 880, 
	880, 880, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 880, 880, 880, 880, 
	859, 880, 859, 859, 859, 859, 882, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 880, 880, 880, 880, 
	880, 859, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 880, 880, 880, 880, 
	880, 880, 880, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 880, 880, 880, 
	880, 859, 880, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 883, 859, 859, 
	859, 859, 859, 859, 859, 880, 880, 880, 
	880, 880, 859, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 880, 880, 880, 
	880, 880, 880, 880, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 880, 880, 
	880, 880, 859, 880, 859, 859, 884, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 880, 880, 
	880, 880, 880, 859, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 880, 880, 
	880, 880, 880, 880, 880, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 880, 
	880, 880, 880, 859, 880, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 885, 859, 859, 859, 859, 859, 880, 
	880, 880, 880, 880, 859, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 880, 
	880, 880, 880, 880, 880, 880, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	880, 880, 880, 880, 859, 880, 859, 859, 
	859, 859, 881, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	880, 880, 880, 880, 880, 859, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	880, 880, 880, 880, 880, 880, 880, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 880, 880, 880, 880, 859, 880, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 886, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 880, 880, 880, 880, 880, 859, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 880, 880, 880, 880, 880, 880, 880, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 880, 880, 880, 880, 859, 880, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 887, 859, 859, 859, 859, 
	859, 859, 859, 888, 859, 859, 859, 859, 
	859, 859, 880, 880, 880, 880, 880, 859, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 880, 880, 880, 880, 880, 880, 
	880, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 880, 880, 880, 880, 859, 
	880, 859, 859, 859, 859, 889, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 880, 880, 880, 880, 880, 
	859, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 880, 880, 880, 880, 880, 
	880, 880, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 880, 880, 880, 880, 
	859, 880, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 890, 859, 859, 859, 
	859, 859, 859, 859, 880, 880, 880, 880, 
	880, 859, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 880, 880, 880, 880, 
	880, 880, 880, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 880, 880, 880, 
	880, 859, 880, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 881, 859, 859, 
	859, 859, 859, 859, 859, 880, 880, 880, 
	880, 880, 859, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 880, 880, 880, 
	880, 880, 880, 880, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 880, 880, 
	880, 880, 859, 880, 859, 859, 859, 859, 
	859, 859, 859, 859, 891, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 880, 880, 
	880, 880, 880, 859, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 880, 880, 
	880, 880, 880, 880, 880, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 880, 
	880, 880, 880, 859, 880, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	881, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 880, 
	880, 880, 880, 880, 859, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 880, 
	880, 880, 880, 880, 880, 880, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	880, 880, 880, 880, 859, 880, 859, 859, 
	859, 859, 859, 859, 859, 892, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	880, 880, 880, 880, 880, 859, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	880, 880, 880, 880, 880, 880, 880, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 880, 880, 880, 880, 859, 880, 859, 
	859, 859, 859, 859, 859, 859, 859, 893, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 880, 880, 880, 880, 880, 859, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 880, 880, 880, 880, 880, 880, 880, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 880, 880, 880, 880, 859, 880, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 859, 885, 859, 859, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 859, 880, 880, 880, 880, 880, 859, 
	895, 220, 220, 220, 895, 220, 220, 220, 
	220, 896, 897, 896, 896, 896, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 895, 220, 220, 220, 220, 220, 
	896, 898, 220, 899, 220, 900, 901, 220, 
	902, 220, 903, 904, 220, 905, 906, 907, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 908, 220, 909, 910, 911, 912, 
	220, 913, 914, 913, 913, 915, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 916, 917, 220, 918, 919, 
	220, 920, 921, 922, 923, 924, 925, 894, 
	894, 926, 894, 894, 894, 927, 928, 929, 
	894, 894, 930, 931, 932, 933, 894, 934, 
	894, 935, 894, 936, 937, 220, 918, 220, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 942, 941, 941, 943, 941, 944, 
	946, 947, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 948, 945, 950, 949, 951, 952, 953, 
	896, 954, 896, 896, 896, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 896, 
	954, 956, 955, 958, 959, 958, 958, 958, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 958, 957, 220, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 220, 960, 961, 
	962, 963, 964, 966, 966, 966, 966, 966, 
	966, 966, 966, 966, 966, 966, 966, 966, 
	966, 966, 966, 966, 966, 966, 966, 966, 
	966, 966, 966, 966, 966, 966, 966, 966, 
	966, 966, 966, 966, 966, 966, 966, 966, 
	966, 966, 966, 966, 966, 966, 966, 966, 
	966, 966, 966, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 966, 966, 966, 
	966, 966, 966, 966, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 966, 966, 
	966, 966, 966, 966, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 966, 966, 
	966, 966, 966, 965, 969, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 220, 968, 970, 972, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 220, 971, 220, 210, 221, 222, 221, 
	221, 221, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 221, 968, 968, 223, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 968, 968, 
	968, 220, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	225, 968, 238, 239, 238, 238, 238, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 237, 237, 240, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 242, 237, 221, 
	222, 221, 221, 221, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 221, 968, 
	968, 223, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	968, 968, 968, 220, 220, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 225, 968, 974, 960, 976, 975, 
	960, 977, 977, 977, 960, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	977, 977, 960, 977, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 979, 980, 960, 
	981, 246, 982, 980, 960, 960, 983, 984, 
	960, 984, 960, 246, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 985, 960, 
	986, 987, 988, 960, 989, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 990, 
	960, 960, 246, 978, 246, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 960, 
	991, 960, 992, 960, 978, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 994, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 993, 
	993, 993, 995, 993, 994, 993, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	993, 993, 993, 993, 978, 993, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	993, 993, 993, 993, 993, 978, 997, 996, 
	998, 1000, 1001, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 1002, 999, 1004, 1005, 1003, 1006, 
	1007, 1008, 1009, 246, 993, 993, 1010, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 246, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	993, 993, 993, 993, 993, 993, 993, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 993, 993, 993, 993, 245, 993, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 993, 993, 993, 993, 993, 245, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 993, 1011, 993, 246, 993, 246, 993, 
	246, 1012, 993, 246, 993, 246, 993, 246, 
	246, 993, 1013, 1013, 1013, 1013, 1013, 1013, 
	1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 
	1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 
	1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 
	1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 
	1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 
	1013, 1013, 1015, 1015, 1015, 1015, 1015, 1015, 
	1015, 1015, 1015, 1015, 1013, 1013, 1013, 1013, 
	1013, 1013, 1016, 1014, 1014, 1014, 1014, 1014, 
	1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 
	1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 
	1014, 1014, 1014, 1014, 1014, 1013, 1013, 1013, 
	1013, 1014, 1013, 1014, 1014, 1014, 1014, 1014, 
	1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 
	1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 
	1014, 1014, 1014, 1014, 1014, 1013, 1013, 1013, 
	1013, 1013, 1014, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1017, 1019, 1019, 
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 
	1019, 1019, 1019, 1019, 1019, 1019, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1019, 1019, 1019, 1019, 1020, 1019, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1019, 1019, 1019, 1019, 1019, 1020, 1011, 
	993, 1010, 993, 1022, 1023, 960, 1024, 261, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 262, 
	251, 263, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 262, 252, 
	262, 265, 220, 960, 918, 220, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 220, 960, 220, 
	969, 960, 1028, 1027, 1027, 1027, 1028, 1027, 
	1027, 1027, 1027, 1029, 1030, 1029, 1029, 1029, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1028, 1027, 1027, 1027, 
	1027, 1027, 1029, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1027, 1032, 1027, 
	1027, 1031, 1027, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1027, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1033, 1033, 1033, 1033, 1034, 1033, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1033, 1033, 1033, 1033, 1033, 1034, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1035, 1035, 1035, 1035, 1035, 1035, 
	1035, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1035, 1035, 1035, 1035, 1036, 
	1035, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1035, 1035, 1035, 1035, 1035, 
	1036, 1039, 1038, 1038, 1038, 1039, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1039, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 
	1040, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1041, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1042, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1043, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1044, 1038, 
	1038, 1045, 1038, 1046, 1047, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1048, 1050, 1050, 
	1050, 1050, 1050, 1050, 1050, 1050, 1048, 1048, 
	1051, 1051, 289, 289, 289, 1051, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 1051, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	290, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 1052, 289, 1053, 
	1054, 1055, 1055, 289, 289, 289, 1055, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 1055, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 1056, 289, 
	288, 1055, 1057, 1058, 1059, 1059, 274, 274, 
	274, 1059, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 1059, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 275, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 1060, 274, 1061, 1061, 1061, 1061, 1061, 
	1061, 1061, 1061, 1061, 1061, 1059, 1059, 1059, 
	1059, 1059, 1059, 1059, 1061, 1061, 1061, 1061, 
	1061, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 
	1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 
	1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 
	1059, 1059, 1059, 1059, 1061, 1061, 1061, 1061, 
	1061, 1061, 1059, 1063, 1063, 1063, 1063, 1063, 
	1063, 1063, 1063, 1063, 1063, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1063, 1063, 1063, 1063, 
	1063, 1063, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1063, 1063, 1063, 1063, 
	1063, 1063, 1062, 1062, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1064, 1064, 1064, 
	1064, 1064, 1064, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1064, 1064, 1064, 
	1064, 1064, 1064, 1055, 1066, 1066, 1066, 1066, 
	1066, 1066, 1066, 1066, 1066, 1066, 1065, 1065, 
	1065, 1065, 1065, 1065, 1065, 1066, 1066, 1066, 
	1066, 1066, 1066, 1065, 1065, 1065, 1065, 1065, 
	1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 
	1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 
	1065, 1065, 1065, 1065, 1065, 1066, 1066, 1066, 
	1066, 1066, 1066, 1065, 1065, 1055, 267, 267, 
	267, 1055, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 1055, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 1067, 267, 1051, 274, 274, 274, 
	1051, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 1051, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 275, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 1051, 1068, 1068, 1068, 1051, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1051, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1069, 1068, 
	1070, 1071, 1071, 1068, 1068, 1068, 1071, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1071, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1068, 1068, 1068, 1068, 1072, 1068, 
	1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 
	1073, 1073, 1071, 1071, 1071, 1071, 1071, 1071, 
	1071, 1073, 1073, 1073, 1073, 1073, 1073, 1071, 
	1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 
	1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 
	1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 
	1071, 1073, 1073, 1073, 1073, 1073, 1073, 1071, 
	1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 
	1075, 1075, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1075, 1075, 1075, 1075, 1075, 1075, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1075, 1075, 1075, 1075, 1075, 1075, 1074, 
	1074, 1071, 267, 267, 267, 1071, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 1071, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 1067, 267, 
	1076, 1071, 1071, 274, 274, 274, 1071, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 1071, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 275, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 276, 274, 
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1078, 1078, 1078, 1078, 1078, 1078, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1078, 1078, 1078, 1078, 1078, 1078, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1079, 1077, 1080, 1080, 1080, 
	1080, 1080, 1080, 1080, 1080, 1080, 1080, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1080, 1080, 
	1080, 1080, 1080, 1080, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1080, 1080, 
	1080, 1080, 1080, 1080, 1077, 1081, 1081, 1081, 
	1081, 1081, 1081, 1081, 1081, 1081, 1081, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1081, 1081, 
	1081, 1081, 1081, 1081, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1081, 1081, 
	1081, 1081, 1081, 1081, 1077, 1082, 1082, 1082, 
	1082, 1082, 1082, 1082, 1082, 1082, 1082, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1082, 1082, 
	1082, 1082, 1082, 1082, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1082, 1082, 
	1082, 1082, 1082, 1082, 1077, 1083, 1086, 1085, 
	1085, 1085, 1086, 1085, 1085, 1085, 1085, 1087, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1086, 1085, 1085, 1085, 1085, 1085, 1087, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1088, 1088, 
	1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1088, 
	1088, 1088, 1088, 1088, 1088, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1088, 
	1088, 1088, 1088, 1088, 1088, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1089, 1085, 1086, 1085, 1085, 
	1085, 1086, 1085, 1085, 1085, 1085, 1084, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1086, 
	1085, 1085, 1085, 1085, 1085, 1084, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1090, 1090, 
	1090, 1090, 1090, 1090, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1090, 1090, 
	1090, 1090, 1090, 1090, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1091, 1085, 1084, 1086, 1090, 1090, 
	1090, 1086, 1090, 1090, 1090, 1090, 1084, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1086, 
	1090, 1090, 1090, 1090, 1090, 1084, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 
	1090, 1090, 1084, 1090, 1092, 1086, 1093, 1093, 
	1093, 1086, 1093, 1093, 1093, 1093, 1087, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1086, 
	1093, 1093, 1093, 1093, 1093, 1087, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1094, 1094, 1094, 
	1094, 1094, 1094, 1094, 1094, 1094, 1094, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1094, 1094, 
	1094, 1094, 1094, 1094, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1094, 1094, 
	1094, 1094, 1094, 1094, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1084, 1093, 1086, 1093, 1093, 1093, 
	1086, 1093, 1093, 1093, 1093, 1084, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1086, 1093, 
	1093, 1093, 1093, 1093, 1084, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1090, 1090, 1090, 1090, 
	1090, 1090, 1090, 1090, 1090, 1090, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1090, 1090, 1090, 
	1090, 1090, 1090, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1090, 1090, 1090, 
	1090, 1090, 1090, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1086, 1093, 1086, 1093, 1093, 1093, 1086, 
	1093, 1093, 1093, 1093, 1095, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1086, 1093, 1093, 
	1093, 1093, 1093, 1095, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1096, 1096, 1096, 1096, 1096, 
	1096, 1096, 1096, 1096, 1096, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1096, 1096, 1096, 1096, 
	1096, 1096, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1096, 1096, 1096, 1096, 
	1096, 1096, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1097, 1093, 1086, 1093, 1093, 1093, 1086, 1093, 
	1093, 1093, 1093, 1095, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1086, 1093, 1093, 1093, 
	1093, 1093, 1095, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1094, 1094, 1094, 1094, 1094, 1094, 
	1094, 1094, 1094, 1094, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1094, 1094, 1094, 1094, 1094, 
	1094, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1094, 1094, 1094, 1094, 1094, 
	1094, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1097, 
	1093, 1098, 1086, 1093, 1093, 1093, 1086, 1093, 
	1093, 1093, 1093, 1095, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1086, 1093, 1093, 1093, 
	1093, 1093, 1095, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1099, 1099, 1099, 1099, 1099, 1099, 
	1099, 1099, 1099, 1099, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1099, 1099, 1099, 1099, 1099, 
	1099, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1099, 1099, 1099, 1099, 1099, 
	1099, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1097, 
	1093, 1086, 1093, 1093, 1093, 1086, 1093, 1093, 
	1093, 1093, 1095, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1086, 1093, 1093, 1093, 1093, 
	1093, 1095, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 
	1100, 1100, 1100, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1100, 1100, 1100, 1100, 1100, 1100, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1100, 1100, 1100, 1100, 1100, 1100, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1097, 1093, 
	1086, 1093, 1093, 1093, 1086, 1093, 1093, 1093, 
	1093, 1095, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1086, 1093, 1093, 1093, 1093, 1093, 
	1095, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 
	1101, 1101, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1101, 1101, 1101, 1101, 1101, 1101, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1101, 1101, 1101, 1101, 1101, 1101, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1097, 1093, 1086, 
	1093, 1093, 1093, 1086, 1093, 1093, 1093, 1093, 
	1095, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1086, 1093, 1093, 1093, 1093, 1093, 1095, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1102, 
	1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 
	1102, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1102, 1102, 1102, 1102, 1102, 1102, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1102, 1102, 1102, 1102, 1102, 1102, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1097, 1093, 1086, 1093, 
	1093, 1093, 1086, 1093, 1093, 1093, 1093, 1095, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1086, 1093, 1093, 1093, 1093, 1093, 1095, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1103, 
	1103, 1103, 1103, 1103, 1103, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1103, 
	1103, 1103, 1103, 1103, 1103, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1097, 1093, 1086, 1093, 1093, 
	1093, 1086, 1093, 1093, 1093, 1093, 1084, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1086, 
	1093, 1093, 1093, 1093, 1093, 1084, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1103, 1103, 
	1103, 1103, 1103, 1103, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1103, 1103, 
	1103, 1103, 1103, 1103, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1084, 1093, 1086, 1093, 1093, 1093, 
	1086, 1093, 1093, 1093, 1093, 1104, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1086, 1093, 
	1093, 1093, 1093, 1093, 1104, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1105, 1105, 1105, 1105, 
	1105, 1105, 1105, 1105, 1105, 1105, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1105, 1105, 1105, 
	1105, 1105, 1105, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1105, 1105, 1105, 
	1105, 1105, 1105, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1097, 1093, 1086, 1093, 1093, 1093, 1086, 
	1093, 1093, 1093, 1093, 1104, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1086, 1093, 1093, 
	1093, 1093, 1093, 1104, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1106, 1106, 1106, 1106, 
	1106, 1106, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1106, 1106, 1106, 1106, 
	1106, 1106, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1097, 1093, 1086, 1093, 1093, 1093, 1086, 1093, 
	1093, 1093, 1093, 1104, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1086, 1093, 1093, 1093, 
	1093, 1093, 1104, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1107, 1107, 1107, 1107, 1107, 1107, 
	1107, 1107, 1107, 1107, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1107, 1107, 1107, 1107, 1107, 
	1107, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1107, 1107, 1107, 1107, 1107, 
	1107, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1084, 
	1093, 1086, 1093, 1093, 1093, 1086, 1093, 1093, 
	1093, 1093, 1104, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1086, 1093, 1093, 1093, 1093, 
	1093, 1104, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 
	1108, 1108, 1108, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1108, 1108, 1108, 1108, 1108, 1108, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1108, 1108, 1108, 1108, 1108, 1108, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1084, 1093, 
	1086, 1093, 1093, 1093, 1086, 1093, 1093, 1093, 
	1093, 1104, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1086, 1093, 1093, 1093, 1093, 1093, 
	1104, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 
	1109, 1109, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1109, 1109, 1109, 1109, 1109, 1109, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1109, 1109, 1109, 1109, 1109, 1109, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1084, 1093, 1086, 
	1093, 1093, 1093, 1086, 1093, 1093, 1093, 1093, 
	1104, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1086, 1093, 1093, 1093, 1093, 1093, 1104, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1110, 1110, 1110, 1110, 1110, 1110, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1110, 1110, 1110, 1110, 1110, 1110, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1084, 1093, 1086, 1093, 
	1093, 1093, 1086, 1093, 1093, 1093, 1093, 1104, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1086, 1093, 1093, 1093, 1093, 1093, 1104, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1111, 1111, 
	1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1111, 
	1111, 1111, 1111, 1111, 1111, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1111, 
	1111, 1111, 1111, 1111, 1111, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1084, 1093, 1086, 1093, 1093, 
	1093, 1086, 1093, 1093, 1093, 1093, 1104, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1086, 
	1093, 1093, 1093, 1093, 1093, 1104, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1103, 1103, 1103, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1103, 1103, 
	1103, 1103, 1103, 1103, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1103, 1103, 
	1103, 1103, 1103, 1103, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1084, 1093, 1086, 1093, 1093, 1093, 
	1086, 1093, 1093, 1093, 1093, 1104, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1086, 1093, 
	1093, 1093, 1093, 1093, 1104, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1112, 1112, 1112, 1112, 
	1112, 1112, 1112, 1112, 1112, 1112, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1112, 1112, 1112, 
	1112, 1112, 1112, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1112, 1112, 1112, 
	1112, 1112, 1112, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1097, 1093, 1086, 1093, 1093, 1093, 1086, 
	1093, 1093, 1093, 1093, 1104, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1086, 1093, 1093, 
	1093, 1093, 1093, 1104, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1113, 1113, 1113, 1113, 1113, 
	1113, 1113, 1113, 1113, 1113, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1113, 1113, 1113, 1113, 
	1113, 1113, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1113, 1113, 1113, 1113, 
	1113, 1113, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1097, 1093, 1086, 1093, 1093, 1093, 1086, 1093, 
	1093, 1093, 1093, 1104, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1086, 1093, 1093, 1093, 
	1093, 1093, 1104, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1114, 1114, 1114, 1114, 1114, 1114, 
	1114, 1114, 1114, 1114, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1114, 1114, 1114, 1114, 1114, 
	1114, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1114, 1114, 1114, 1114, 1114, 
	1114, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1097, 
	1093, 1086, 1093, 1093, 1093, 1086, 1093, 1093, 
	1093, 1093, 1104, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1086, 1093, 1093, 1093, 1093, 
	1093, 1104, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 
	1115, 1115, 1115, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1115, 1115, 1115, 1115, 1115, 1115, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1115, 1115, 1115, 1115, 1115, 1115, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1097, 1093, 
	1086, 1093, 1093, 1093, 1086, 1093, 1093, 1093, 
	1093, 1104, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1086, 1093, 1093, 1093, 1093, 1093, 
	1104, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 
	1103, 1103, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1103, 1103, 1103, 1103, 1103, 1103, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1103, 1103, 1103, 1103, 1103, 1103, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1097, 1093, 1116, 
	1117, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 
	1119, 1119, 1119, 1118, 1118, 1118, 1118, 1118, 
	1118, 1118, 1119, 1119, 1119, 1119, 1119, 1119, 
	1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 
	1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 
	1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 
	1118, 1118, 1119, 1119, 1119, 1119, 1119, 1119, 
	1118, 1118, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 295, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 296, 210, 210, 297, 
	210, 295, 210, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 210, 210, 210, 
	210, 294, 210, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 210, 210, 210, 
	210, 210, 294, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 295, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 296, 960, 960, 
	297, 960, 295, 960, 294, 294, 294, 294, 
	1120, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 960, 960, 
	960, 960, 294, 960, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 960, 960, 
	960, 960, 960, 294, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 295, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 296, 960, 
	960, 297, 960, 295, 960, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 1121, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 960, 
	960, 960, 960, 294, 960, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 960, 
	960, 960, 960, 960, 294, 1122, 1123, 960, 
	955, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	1124, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 1125, 
	1126, 894, 894, 894, 894, 894, 1127, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1128, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 1129, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 1130, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 1131, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	1132, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 1133, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	1134, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 1135, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 1136, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 295, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 210, 
	210, 297, 210, 295, 210, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 210, 
	210, 210, 210, 894, 210, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 210, 
	210, 210, 210, 210, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 1137, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 1138, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 1134, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 1139, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 1138, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 1140, 894, 
	1141, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 1142, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 1143, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	1136, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 1136, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 1144, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1145, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 894, 894, 894, 1146, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 1147, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	1136, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	1148, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 1149, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	1136, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 1150, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 1151, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 1152, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 894, 1136, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 1153, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 1143, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	1154, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 1136, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 894, 894, 894, 
	894, 894, 1136, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1155, 894, 1156, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1157, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 1136, 894, 894, 894, 
	1154, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 1136, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 1158, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 1159, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 1152, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 1160, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 929, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	1150, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 1136, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 894, 894, 1161, 894, 894, 894, 
	894, 894, 894, 894, 1136, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 1162, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 1163, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 1164, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 1152, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	1165, 894, 894, 894, 1166, 894, 894, 894, 
	894, 894, 1167, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 1167, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1136, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 1136, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 1168, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 1169, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 1170, 1171, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	1136, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 1172, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	1173, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 894, 894, 894, 
	894, 1174, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1177, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1178, 
	1175, 1175, 1179, 1175, 1177, 1175, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1175, 1175, 1175, 1175, 1176, 1175, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1175, 1175, 1175, 1175, 1175, 1176, 946, 1180, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 948, 
	945, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 1181, 894, 894, 1182, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 1136, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 1147, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 894, 894, 894, 
	894, 1183, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1184, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1154, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 1185, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 929, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	1186, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 1187, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 1147, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 1152, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1188, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 894, 894, 894, 
	1189, 894, 894, 894, 894, 894, 894, 894, 
	1190, 894, 894, 894, 894, 894, 894, 894, 
	1191, 894, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 1154, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 894, 1192, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 1193, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 1161, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 1194, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 938, 939, 939, 939, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 295, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 296, 938, 938, 297, 
	938, 295, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 940, 938, 
	938, 894, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 1161, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 938, 938, 938, 
	938, 938, 894, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 938, 939, 939, 
	939, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 939, 295, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 296, 938, 938, 
	297, 938, 295, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 940, 
	938, 938, 894, 938, 894, 894, 894, 894, 
	894, 894, 894, 1195, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 938, 938, 
	938, 938, 938, 894, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 938, 939, 
	939, 939, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 939, 295, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 296, 938, 
	938, 297, 938, 295, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	940, 938, 938, 894, 938, 894, 894, 894, 
	894, 1147, 894, 894, 894, 1196, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 938, 
	938, 938, 938, 938, 894, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 938, 
	939, 939, 939, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 939, 295, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 296, 
	938, 938, 297, 938, 295, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 940, 938, 938, 894, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 1197, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	938, 938, 938, 938, 938, 894, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	938, 939, 939, 939, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 939, 295, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	296, 938, 938, 297, 938, 295, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 940, 938, 938, 894, 938, 894, 
	894, 894, 894, 1161, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 938, 938, 938, 938, 938, 894, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 938, 939, 939, 939, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 939, 
	295, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 296, 938, 938, 297, 938, 295, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 940, 938, 938, 894, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	1198, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 938, 938, 938, 938, 938, 894, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 938, 939, 939, 939, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	939, 295, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 296, 938, 938, 297, 938, 295, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 940, 938, 938, 894, 
	938, 894, 894, 894, 894, 1199, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 938, 938, 938, 938, 938, 
	894, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 939, 938, 939, 939, 939, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 939, 295, 938, 938, 938, 938, 938, 
	938, 938, 938, 938, 938, 938, 938, 938, 
	938, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 296, 938, 938, 297, 938, 
	295, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 940, 938, 938, 
	894, 938, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 894, 1141, 894, 894, 
	894, 894, 894, 894, 894, 894, 894, 894, 
	894, 894, 894, 894, 938, 938, 938, 938, 
	938, 894, 1200, 220, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 960, 960, 
	960, 960, 1201, 960, 1203, 1202, 1202, 1202, 
	1203, 1202, 1202, 1202, 1202, 1204, 1205, 1204, 
	1204, 1204, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1203, 1202, 
	1202, 1202, 1202, 1202, 1204, 1202, 1202, 1206, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1207, 1202, 1204, 1208, 1204, 1204, 1204, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1204, 1208, 1209, 1210, 1211, 1212, 1213, 
	1215, 1214, 1216, 1218, 1219, 1219, 1219, 1218, 
	1219, 1219, 1219, 1219, 1220, 1221, 1220, 1220, 
	1220, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 
	1219, 1219, 1219, 1219, 1219, 1218, 1219, 1219, 
	1219, 1219, 1219, 1220, 1219, 1222, 1223, 1219, 
	1219, 1219, 1222, 1219, 1219, 1219, 1219, 1219, 
	1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 
	1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 
	1219, 1219, 1219, 1219, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1219, 1224, 
	1219, 1219, 1217, 1219, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1219, 1219, 
	1219, 1219, 1219, 1217, 1225, 1225, 1225, 1225, 
	1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 
	1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 
	1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 
	1225, 1225, 1225, 1225, 1225, 303, 1225, 1225, 
	1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 
	1225, 1225, 1225, 1225, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 304, 1225, 
	1225, 1225, 1225, 303, 1225, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 1225, 
	1225, 1225, 1225, 302, 1225, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 1225, 
	1225, 1225, 1225, 1225, 302, 1220, 1226, 1220, 
	1220, 1220, 1226, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1226, 1220, 1226, 1227, 1228, 
	1229, 1230, 1231, 1232, 1225, 1233, 1235, 1236, 
	1236, 1236, 1235, 1236, 1236, 1236, 1236, 1237, 
	1238, 1237, 1237, 1237, 1236, 1236, 1236, 1236, 
	1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 
	1235, 1236, 1236, 1236, 1236, 1236, 1237, 1239, 
	1240, 1241, 1242, 1243, 1244, 1240, 1245, 1246, 
	1247, 1243, 1248, 1249, 1250, 1243, 1251, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 
	1261, 1260, 1260, 1262, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1263, 1264, 1265, 1243, 1266, 1240, 1267, 
	1268, 1269, 1270, 1271, 1272, 1234, 1234, 1273, 
	1234, 1234, 1234, 1274, 1275, 1276, 1234, 1234, 
	1277, 1278, 1279, 1280, 1234, 1281, 1234, 1282, 
	1234, 1283, 1284, 1285, 1286, 1236, 1234, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	1287, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 312, 312, 312, 312, 312, 1287, 312, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 312, 312, 312, 312, 1234, 312, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 312, 312, 312, 312, 312, 1234, 
	1289, 1288, 1290, 1237, 1291, 1237, 1237, 1237, 
	1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 
	1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 
	1291, 1291, 1237, 1291, 1292, 1294, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1294, 1293, 
	1295, 1296, 1297, 1298, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 307, 307, 1299, 
	307, 1299, 307, 307, 1299, 1299, 307, 307, 
	307, 1300, 307, 307, 1301, 1301, 1301, 1301, 
	1301, 1301, 1301, 1301, 1301, 1301, 307, 307, 
	307, 307, 307, 307, 307, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 1299, 
	307, 1299, 1299, 324, 307, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 1299, 
	1299, 1299, 307, 1299, 324, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	1302, 1302, 1302, 1302, 324, 1302, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	1302, 1302, 1302, 1302, 1302, 324, 1301, 1301, 
	1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 
	1302, 1303, 312, 1243, 1304, 1304, 1304, 1304, 
	1304, 1304, 1304, 1305, 1304, 1304, 1304, 1304, 
	1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 
	1304, 1304, 1303, 1304, 1306, 1307, 1243, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1303, 1308, 1303, 1309, 1304, 1311, 1310, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 311, 1310, 1313, 1312, 1314, 1312, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1316, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1317, 1315, 
	1315, 1315, 1315, 1315, 1316, 1315, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 309, 1315, 1319, 
	1318, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 
	1320, 1320, 1320, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1321, 1318, 1322, 1323, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1324, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1325, 1318, 1318, 1318, 1318, 1318, 1318, 
	1326, 1318, 1318, 1321, 1318, 1322, 1323, 1318, 
	1318, 1318, 1327, 1318, 1318, 1318, 1318, 1318, 
	1324, 1318, 1318, 1328, 1318, 1318, 1318, 1318, 
	1318, 1325, 1318, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 1329, 1329, 1329, 
	1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 
	1330, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 
	1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 
	1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 
	1329, 1329, 1331, 1329, 1329, 1329, 1329, 1329, 
	1330, 1329, 1329, 1329, 1332, 1329, 1329, 1329, 
	1329, 1329, 1329, 1329, 1329, 1333, 1329, 1334, 
	312, 1334, 312, 312, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 312, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 
	1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 
	1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 
	1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 
	1335, 1335, 1335, 1335, 1335, 1335, 1334, 1335, 
	1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 
	1336, 1335, 1338, 1337, 1339, 1341, 1340, 1340, 
	1340, 1342, 1340, 1343, 1344, 1320, 1320, 1320, 
	1320, 1320, 1320, 1320, 1320, 1320, 1320, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1326, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1327, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1328, 
	1318, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 
	1345, 1345, 1345, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1346, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1327, 1318, 1318, 1318, 1318, 1318, 
	1318, 1318, 1318, 1328, 1318, 1348, 1348, 1348, 
	1348, 1348, 1348, 1348, 1348, 1348, 1348, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1349, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1350, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1351, 
	1347, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 
	1348, 1348, 1348, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1352, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1350, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1351, 1347, 1350, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1351, 1347, 
	1354, 1353, 1355, 1357, 1356, 1356, 1356, 1358, 
	1356, 1360, 1359, 1361, 1362, 1364, 1364, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1365, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1366, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1367, 
	1363, 1368, 1368, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1369, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1350, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1351, 1347, 1368, 1368, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1352, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1350, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1351, 
	1347, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 
	1371, 1371, 1371, 1370, 1370, 1370, 1370, 1370, 
	1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 
	1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 
	1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 
	1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 
	1372, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 
	1370, 1370, 1373, 1370, 1370, 1370, 1370, 1370, 
	1370, 1370, 1370, 1374, 1370, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 
	1375, 1375, 1375, 1375, 1377, 1375, 1375, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 1378, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 1375, 1379, 
	1375, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 
	1381, 1381, 1381, 1380, 1380, 1380, 1380, 1380, 
	1380, 1380, 1381, 1381, 1381, 1381, 1381, 1381, 
	1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 
	1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 
	1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 
	1382, 1380, 1381, 1381, 1381, 1381, 1381, 1381, 
	1380, 1380, 1383, 1380, 1380, 1380, 1380, 1380, 
	1380, 1380, 1380, 1384, 1380, 1385, 1385, 1385, 
	1385, 1385, 1385, 1385, 1385, 1385, 1385, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1385, 1385, 
	1385, 1385, 1385, 1385, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1386, 1347, 1385, 1385, 
	1385, 1385, 1385, 1385, 1347, 1347, 1350, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1351, 
	1347, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 
	1385, 1385, 1385, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1385, 1385, 1385, 1385, 1385, 1385, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1352, 1347, 1385, 1385, 1385, 1385, 1385, 1385, 
	1347, 1347, 1350, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1351, 1347, 1388, 1387, 1389, 
	1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 
	1389, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1390, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1387, 1387, 1391, 1387, 
	1387, 1387, 1387, 1387, 1390, 1387, 1387, 1387, 
	1392, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 
	1387, 1393, 1387, 1394, 1394, 1394, 1394, 1394, 
	1394, 1394, 1394, 1394, 1394, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 
	1387, 1387, 1395, 1387, 1387, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1392, 1387, 1387, 1387, 
	1387, 1387, 1387, 1387, 1387, 1393, 1387, 1396, 
	1347, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 
	1397, 1397, 1397, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1398, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1399, 1347, 1347, 1347, 1347, 1347, 1398, 1347, 
	1347, 1347, 1350, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1351, 1347, 1397, 1397, 1397, 
	1397, 1397, 1397, 1397, 1397, 1397, 1397, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1352, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1350, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1351, 
	1347, 1305, 1312, 1243, 1400, 1304, 1294, 1304, 
	1401, 1402, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1294, 1312, 1294, 1304, 1294, 1243, 1304, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 1299, 1299, 1299, 1299, 1299, 1299, 
	1403, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 1299, 1299, 1299, 1299, 324, 
	1299, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 1299, 1299, 1299, 1299, 1299, 
	324, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 1287, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1404, 312, 312, 312, 312, 
	1287, 312, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 312, 312, 312, 312, 
	1260, 312, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 312, 312, 312, 312, 
	312, 1260, 1405, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1287, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1404, 1406, 1406, 
	1406, 1406, 1287, 1406, 1260, 1260, 1260, 1260, 
	1407, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1406, 1406, 
	1406, 1406, 1260, 1406, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1406, 1406, 
	1406, 1406, 1406, 1260, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1287, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1404, 1406, 
	1406, 1406, 1406, 1287, 1406, 1260, 1260, 1260, 
	1260, 1260, 1260, 1408, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1406, 
	1406, 1406, 1406, 1260, 1406, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1406, 
	1406, 1406, 1406, 1406, 1260, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1287, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1404, 
	1406, 1406, 1406, 1406, 1287, 1406, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1409, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1406, 1406, 1406, 1406, 1260, 1406, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1406, 1406, 1406, 1406, 1406, 1260, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1287, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1404, 1406, 1406, 1406, 1406, 1287, 1406, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1410, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1406, 1406, 1406, 1406, 1260, 1406, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1406, 1406, 1406, 1406, 1406, 1260, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1287, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1404, 1406, 1406, 1406, 1406, 1287, 1406, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1411, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1406, 1406, 1406, 1406, 1260, 1406, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1406, 1406, 1406, 1406, 1406, 1260, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1287, 1406, 1406, 1406, 1406, 1406, 1406, 
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1404, 1406, 1406, 1406, 1406, 1287, 
	1406, 1260, 1260, 1260, 1410, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1406, 1406, 1406, 1406, 1260, 
	1406, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1406, 1406, 1406, 1406, 1406, 
	1260, 1412, 1414, 1413, 1415, 1416, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1418, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1419, 1420, 1234, 1234, 
	1234, 1234, 1234, 1421, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1422, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1423, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1424, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1425, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1426, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1427, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1428, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1429, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1430, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1431, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1432, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1433, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1434, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1435, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1436, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1432, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1437, 1234, 1438, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1439, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1440, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1441, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1442, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1443, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1444, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1445, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1446, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1442, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1447, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1448, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1449, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1450, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1451, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1452, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1442, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1453, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1454, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1455, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1456, 1456, 1456, 1456, 1456, 1456, 
	1456, 1456, 1456, 326, 327, 326, 326, 326, 
	1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 
	1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 
	1456, 1456, 326, 1287, 1456, 328, 1456, 1456, 
	1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 
	1456, 1456, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1456, 1456, 329, 1456, 
	1456, 1287, 1456, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1456, 330, 1456, 
	1456, 1234, 1456, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1456, 1456, 1456, 
	1456, 1456, 1234, 343, 344, 343, 343, 343, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 343, 342, 342, 345, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 348, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 347, 342, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1458, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1459, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1460, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1461, 1461, 1461, 1461, 1461, 1461, 
	1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 
	1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 
	1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 
	1461, 1461, 1461, 1287, 1461, 1461, 1461, 1461, 
	1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 
	1461, 1461, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1461, 1461, 1461, 1461, 
	1461, 1287, 1461, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1461, 1461, 1461, 
	1461, 1234, 1461, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1462, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1461, 1461, 1461, 
	1461, 1461, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1463, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1464, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1465, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1466, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1467, 1234, 1468, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1469, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1442, 1234, 
	1234, 1234, 1470, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1234, 
	1442, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1435, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1471, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1472, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1452, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1473, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1276, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1474, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1475, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1435, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1442, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1476, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1442, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1477, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1478, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1479, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1452, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1480, 1234, 1234, 
	1234, 1481, 1234, 1234, 1234, 1234, 1234, 1482, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1483, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1449, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1435, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1484, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1485, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1486, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1487, 1488, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1435, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1489, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1490, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1476, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1491, 1234, 1234, 
	1492, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1435, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1493, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1449, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1494, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1495, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1496, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1435, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1497, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1498, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1484, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1499, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1500, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1446, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1475, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1501, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1502, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1503, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1504, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1505, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1441, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1506, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1507, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1476, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1508, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1476, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1234, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1509, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1234, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1234, 1417, 1234, 1234, 1234, 1234, 1446, 
	1234, 1234, 1234, 1510, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1234, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1417, 1417, 1417, 
	1417, 1417, 1287, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1234, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1511, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1234, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1417, 1417, 
	1417, 1417, 1417, 1287, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1234, 1417, 1234, 1234, 1234, 
	1234, 1476, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1234, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1417, 
	1417, 1417, 1417, 1417, 1287, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1234, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1512, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1234, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1417, 1417, 1417, 1417, 1417, 1287, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1234, 1417, 1234, 
	1234, 1234, 1234, 1513, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1234, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1287, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1417, 1417, 1417, 1417, 1417, 1287, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1234, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1514, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1234, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1287, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1417, 1417, 1417, 1417, 1417, 1287, 
	1417, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1234, 
	1417, 1234, 1234, 1234, 1484, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1417, 1417, 1417, 1417, 1417, 
	1234, 1515, 1303, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 
	1293, 1243, 1293, 1516, 1518, 1517, 1518, 1518, 
	1518, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 
	1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 
	1517, 1517, 1517, 1518, 1517, 1517, 1519, 1517, 
	1517, 1520, 1517, 1517, 1517, 1517, 1517, 1517, 
	1517, 356, 1517, 1517, 1517, 1517, 1517, 1517, 
	1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 
	1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 
	1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 
	1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 
	1517, 1517, 1517, 1517, 1517, 1517, 1517, 1521, 
	1517, 352, 353, 352, 352, 352, 1522, 1522, 
	1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 
	1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 
	352, 1522, 1522, 354, 1522, 1522, 355, 1522, 
	1522, 1522, 1522, 1522, 1522, 1522, 356, 1522, 
	1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 
	1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 
	1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 
	1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 
	1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 
	1522, 1522, 1522, 1522, 357, 1522, 359, 1523, 
	359, 359, 359, 1523, 1523, 1523, 1523, 1523, 
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 
	1523, 1523, 1523, 1523, 1523, 359, 1523, 1523, 
	354, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 
	1523, 357, 1523, 1525, 1524, 1527, 1526, 362, 
	361, 367, 1522, 365, 1522, 1529, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1530, 1528, 1529, 1528, 1529, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1532, 
	1528, 1529, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1533, 1528, 1529, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 
	1528, 1534, 1528, 1536, 1534, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	185, 2, 3, 4, 191, 6, 7, 8, 
	9, 10, 185, 185, 194, 197, 194, 12, 
	198, 199, 14, 194, 206, 207, 210, 211, 
	223, 220, 212, 213, 214, 19, 215, 216, 
	217, 225, 227, 228, 232, 233, 234, 229, 
	25, 18, 208, 209, 27, 257, 258, 260, 
	262, 260, 30, 263, 264, 32, 260, 271, 
	272, 275, 276, 288, 285, 277, 278, 279, 
	37, 280, 281, 282, 290, 292, 293, 297, 
	298, 299, 294, 43, 36, 273, 274, 45, 
	322, 323, 330, 332, 330, 48, 333, 334, 
	50, 336, 339, 336, 52, 340, 341, 54, 
	347, 346, 0, 56, 348, 349, 58, 350, 
	351, 351, 351, 351, 464, 61, 62, 63, 
	464, 492, 64, 65, 492, 492, 496, 496, 
	69, 64, 70, 494, 495, 497, 498, 496, 
	492, 499, 500, 502, 66, 67, 503, 504, 
	68, 496, 71, 72, 77, 84, 506, 507, 
	70, 494, 495, 497, 498, 496, 492, 499, 
	500, 502, 66, 67, 503, 504, 68, 71, 
	72, 77, 84, 506, 507, 505, 73, 74, 
	75, 76, 78, 79, 82, 80, 81, 83, 
	85, 86, 492, 88, 89, 90, 92, 95, 
	93, 94, 96, 98, 523, 523, 523, 524, 
	100, 526, 101, 527, 102, 524, 100, 526, 
	101, 527, 561, 103, 561, 104, 105, 103, 
	561, 104, 561, 561, 561, 108, 109, 110, 
	111, 572, 561, 561, 561, 114, 115, 116, 
	561, 119, 114, 115, 116, 561, 119, 117, 
	117, 115, 116, 582, 118, 117, 117, 115, 
	116, 582, 118, 115, 561, 598, 561, 121, 
	599, 605, 125, 614, 615, 130, 131, 125, 
	126, 613, 126, 613, 561, 127, 128, 129, 
	616, 132, 561, 630, 631, 634, 635, 647, 
	644, 636, 637, 638, 137, 639, 640, 641, 
	649, 651, 652, 656, 657, 658, 653, 143, 
	136, 632, 633, 145, 694, 695, 147, 563, 
	106, 565, 149, 150, 697, 799, 152, 153, 
	154, 799, 807, 807, 807, 157, 829, 828, 
	807, 831, 833, 807, 162, 163, 164, 837, 
	807, 166, 167, 848, 817, 870, 170, 171, 
	172, 176, 177, 170, 171, 172, 176, 177, 
	173, 173, 171, 172, 174, 175, 173, 173, 
	171, 172, 174, 175, 918, 171, 807, 987, 
	178, 989, 180, 184, 990, 182, 987, 179, 
	987, 181, 989, 181, 989, 183, 989, 987, 
	185, 185, 186, 187, 188, 190, 192, 193, 
	185, 185, 185, 189, 185, 189, 185, 1, 
	185, 185, 185, 5, 194, 194, 195, 194, 
	196, 200, 194, 194, 11, 13, 194, 194, 
	194, 194, 201, 202, 203, 15, 21, 26, 
	235, 28, 194, 194, 194, 204, 205, 194, 
	16, 194, 194, 194, 17, 194, 194, 194, 
	20, 218, 194, 219, 221, 194, 222, 224, 
	226, 22, 194, 194, 23, 230, 194, 231, 
	24, 194, 236, 240, 237, 238, 239, 194, 
	194, 241, 242, 245, 247, 256, 243, 244, 
	194, 246, 248, 250, 249, 194, 251, 252, 
	253, 254, 255, 194, 194, 194, 259, 260, 
	260, 260, 261, 265, 260, 29, 31, 260, 
	260, 260, 260, 266, 267, 268, 33, 39, 
	44, 300, 46, 260, 260, 260, 269, 270, 
	260, 34, 260, 260, 260, 35, 260, 260, 
	260, 38, 283, 260, 284, 286, 260, 287, 
	289, 291, 40, 260, 260, 41, 295, 260, 
	296, 42, 260, 301, 305, 302, 303, 304, 
	260, 260, 306, 307, 310, 312, 321, 308, 
	309, 260, 311, 313, 315, 314, 260, 316, 
	317, 318, 319, 320, 260, 260, 260, 324, 
	325, 325, 326, 325, 327, 325, 325, 325, 
	328, 328, 328, 329, 328, 328, 328, 330, 
	330, 330, 331, 330, 47, 49, 330, 330, 
	330, 335, 335, 335, 336, 336, 337, 336, 
	338, 336, 336, 51, 53, 336, 336, 336, 
	342, 342, 343, 342, 342, 344, 345, 344, 
	55, 57, 346, 346, 346, 352, 351, 351, 
	353, 354, 355, 356, 358, 361, 362, 363, 
	364, 351, 365, 366, 368, 370, 371, 372, 
	376, 378, 379, 380, 396, 401, 408, 413, 
	420, 427, 430, 431, 435, 429, 439, 447, 
	451, 453, 458, 460, 463, 351, 351, 351, 
	351, 351, 351, 357, 351, 357, 351, 359, 
	59, 360, 351, 60, 351, 351, 367, 369, 
	351, 373, 374, 375, 371, 377, 351, 381, 
	382, 391, 394, 383, 384, 385, 386, 387, 
	388, 389, 390, 352, 392, 393, 395, 397, 
	400, 398, 399, 402, 405, 403, 404, 406, 
	407, 409, 411, 410, 412, 414, 415, 351, 
	416, 417, 418, 419, 351, 421, 424, 422, 
	423, 425, 426, 428, 432, 433, 434, 436, 
	438, 437, 440, 441, 442, 444, 443, 445, 
	446, 448, 449, 450, 452, 454, 455, 456, 
	457, 459, 461, 462, 465, 464, 464, 466, 
	467, 469, 464, 464, 464, 468, 464, 468, 
	470, 464, 472, 471, 471, 475, 476, 477, 
	478, 471, 480, 481, 482, 483, 485, 487, 
	488, 489, 490, 491, 471, 473, 471, 474, 
	471, 471, 471, 471, 471, 479, 471, 479, 
	484, 471, 486, 471, 492, 492, 493, 508, 
	509, 495, 511, 512, 499, 513, 514, 515, 
	516, 517, 519, 520, 521, 522, 492, 492, 
	492, 492, 492, 492, 496, 501, 492, 492, 
	492, 492, 492, 492, 492, 492, 492, 510, 
	492, 510, 492, 492, 492, 492, 518, 492, 
	87, 91, 97, 523, 525, 528, 99, 523, 
	523, 524, 529, 529, 530, 531, 533, 535, 
	536, 529, 529, 532, 529, 532, 529, 534, 
	529, 529, 529, 538, 537, 537, 539, 540, 
	541, 543, 545, 546, 551, 558, 537, 537, 
	537, 537, 542, 537, 542, 537, 544, 537, 
	537, 538, 547, 548, 549, 550, 552, 553, 
	556, 554, 555, 557, 559, 560, 562, 561, 
	570, 571, 573, 574, 576, 577, 578, 579, 
	581, 583, 584, 586, 587, 612, 618, 619, 
	620, 697, 698, 699, 700, 701, 580, 703, 
	720, 725, 732, 737, 739, 745, 748, 749, 
	753, 747, 757, 768, 772, 775, 783, 787, 
	790, 791, 561, 103, 104, 561, 106, 564, 
	561, 561, 566, 568, 569, 561, 567, 561, 
	561, 561, 561, 561, 107, 561, 561, 561, 
	561, 561, 575, 561, 575, 561, 561, 112, 
	561, 113, 561, 561, 580, 561, 585, 561, 
	561, 561, 588, 597, 561, 120, 600, 601, 
	602, 561, 603, 122, 606, 607, 123, 610, 
	611, 561, 589, 591, 561, 590, 561, 561, 
	592, 595, 596, 561, 593, 594, 561, 561, 
	561, 561, 561, 561, 604, 561, 598, 608, 
	609, 561, 608, 561, 598, 608, 124, 617, 
	561, 561, 561, 621, 561, 561, 561, 622, 
	624, 561, 623, 561, 623, 561, 625, 626, 
	627, 133, 139, 144, 659, 146, 561, 561, 
	561, 628, 629, 561, 134, 561, 561, 561, 
	135, 561, 561, 561, 138, 642, 561, 643, 
	645, 561, 646, 648, 650, 140, 561, 561, 
	141, 654, 561, 655, 142, 561, 660, 664, 
	661, 662, 663, 561, 561, 665, 666, 669, 
	680, 693, 667, 668, 561, 670, 671, 672, 
	674, 673, 561, 675, 676, 677, 678, 679, 
	681, 688, 682, 683, 684, 685, 686, 687, 
	689, 690, 691, 692, 561, 561, 561, 696, 
	148, 151, 561, 702, 704, 705, 715, 718, 
	706, 707, 708, 709, 710, 711, 712, 713, 
	714, 716, 717, 719, 721, 724, 722, 723, 
	726, 729, 727, 728, 730, 731, 733, 735, 
	734, 736, 738, 740, 742, 741, 743, 744, 
	746, 714, 750, 751, 752, 754, 756, 755, 
	758, 759, 760, 765, 761, 762, 763, 561, 
	562, 563, 106, 764, 568, 766, 767, 769, 
	770, 771, 773, 774, 776, 777, 778, 781, 
	779, 780, 782, 784, 785, 786, 788, 789, 
	561, 580, 792, 792, 793, 794, 795, 797, 
	792, 792, 792, 796, 792, 796, 792, 798, 
	792, 800, 799, 799, 801, 802, 799, 803, 
	805, 799, 799, 799, 799, 804, 799, 804, 
	806, 799, 808, 807, 807, 811, 812, 813, 
	807, 814, 816, 819, 820, 821, 822, 823, 
	807, 824, 825, 830, 858, 862, 807, 863, 
	865, 867, 807, 868, 869, 871, 875, 877, 
	878, 880, 881, 899, 904, 911, 919, 926, 
	933, 938, 939, 943, 937, 948, 958, 964, 
	967, 976, 980, 984, 985, 986, 819, 809, 
	807, 810, 807, 807, 807, 807, 807, 807, 
	815, 807, 815, 807, 155, 818, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 826, 
	807, 827, 807, 807, 156, 158, 807, 159, 
	839, 850, 853, 832, 854, 855, 840, 844, 
	846, 807, 832, 159, 834, 836, 160, 807, 
	834, 807, 835, 807, 807, 161, 838, 807, 
	807, 841, 843, 807, 841, 842, 844, 846, 
	843, 807, 845, 807, 807, 847, 849, 807, 
	165, 807, 807, 807, 851, 843, 844, 846, 
	851, 852, 807, 841, 843, 844, 846, 807, 
	841, 843, 844, 846, 807, 856, 843, 844, 
	846, 856, 857, 807, 159, 858, 832, 859, 
	844, 846, 860, 843, 159, 860, 832, 861, 
	864, 866, 807, 168, 169, 807, 807, 872, 
	873, 874, 869, 876, 807, 807, 879, 807, 
	807, 807, 882, 883, 892, 897, 884, 885, 
	886, 887, 888, 889, 890, 891, 808, 893, 
	894, 895, 896, 808, 898, 900, 903, 901, 
	902, 808, 808, 905, 908, 906, 907, 909, 
	910, 808, 912, 914, 913, 915, 916, 917, 
	807, 807, 920, 808, 921, 807, 922, 923, 
	924, 925, 809, 927, 930, 928, 929, 931, 
	932, 934, 935, 936, 808, 940, 941, 942, 
	944, 946, 947, 945, 808, 949, 950, 951, 
	954, 952, 953, 955, 956, 957, 959, 961, 
	960, 962, 963, 965, 966, 968, 969, 971, 
	974, 970, 972, 973, 975, 977, 978, 979, 
	981, 982, 983, 807, 807, 987, 988, 992, 
	993, 994, 987, 987, 987, 991, 987, 987, 
	996, 995, 997, 995, 998, 999, 1000, 995, 
	995
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 0, 7, 0, 8, 
	0, 0, 7, 0, 0, 0, 0, 8, 
	0, 7, 0, 8, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 10, 0, 0, 0, 0, 11, 0, 
	7, 0, 8, 0, 0, 7, 0, 0, 
	0, 0, 8, 0, 7, 0, 8, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 13, 0, 0, 0, 
	0, 14, 0, 15, 0, 0, 0, 0, 
	0, 16, 0, 0, 0, 0, 0, 0, 
	17, 18, 19, 20, 21, 0, 0, 0, 
	22, 23, 0, 0, 24, 25, 26, 27, 
	28, 29, 29, 30, 31, 29, 32, 31, 
	33, 31, 29, 29, 30, 29, 34, 29, 
	29, 35, 29, 29, 29, 29, 29, 29, 
	0, 36, 37, 0, 38, 37, 39, 37, 
	0, 0, 36, 0, 40, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 41, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 42, 43, 44, 45, 
	0, 0, 0, 45, 28, 46, 29, 29, 
	29, 46, 47, 0, 48, 0, 28, 29, 
	49, 29, 50, 51, 52, 0, 0, 0, 
	0, 0, 53, 54, 55, 0, 28, 0, 
	56, 0, 29, 57, 29, 58, 29, 59, 
	60, 61, 60, 62, 60, 0, 63, 64, 
	63, 65, 63, 66, 67, 0, 68, 0, 
	0, 0, 0, 69, 69, 0, 0, 70, 
	70, 71, 0, 28, 72, 0, 0, 0, 
	69, 0, 73, 0, 7, 0, 8, 0, 
	0, 7, 0, 0, 0, 0, 8, 0, 
	7, 0, 8, 0, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 74, 
	0, 0, 0, 0, 74, 75, 0, 0, 
	0, 76, 77, 78, 79, 0, 7, 7, 
	80, 81, 81, 82, 0, 0, 0, 0, 
	83, 0, 0, 0, 0, 0, 0, 28, 
	0, 0, 0, 29, 57, 29, 29, 29, 
	59, 60, 61, 60, 60, 60, 0, 63, 
	64, 63, 63, 63, 84, 66, 85, 86, 
	0, 87, 0, 88, 88, 0, 89, 0, 
	90, 59, 91, 0, 92, 28, 93, 94, 
	97, 98, 0, 28, 0, 7, 0, 7, 
	99, 100, 101, 59, 102, 0, 103, 0, 
	104, 105, 106, 0, 107, 108, 0, 109, 
	7, 7, 110, 111, 0, 0, 112, 113, 
	114, 115, 116, 116, 116, 116, 116, 116, 
	116, 116, 117, 118, 119, 0, 0, 120, 
	0, 121, 122, 123, 0, 124, 125, 126, 
	0, 0, 127, 0, 0, 128, 0, 7, 
	0, 0, 129, 130, 0, 0, 131, 0, 
	28, 132, 0, 0, 0, 0, 0, 133, 
	134, 0, 0, 0, 0, 0, 0, 0, 
	135, 0, 0, 0, 0, 136, 0, 0, 
	0, 0, 0, 137, 138, 139, 0, 140, 
	141, 142, 7, 7, 143, 0, 0, 144, 
	145, 146, 147, 116, 116, 116, 116, 116, 
	116, 116, 116, 148, 149, 150, 0, 0, 
	151, 0, 152, 153, 154, 0, 155, 156, 
	157, 0, 0, 158, 0, 0, 159, 0, 
	7, 0, 0, 160, 161, 0, 0, 162, 
	0, 28, 163, 0, 0, 0, 0, 0, 
	164, 165, 0, 0, 0, 0, 0, 0, 
	0, 166, 0, 0, 0, 0, 167, 0, 
	0, 0, 0, 0, 168, 169, 170, 0, 
	171, 172, 0, 173, 0, 174, 175, 176, 
	177, 178, 179, 0, 180, 181, 182, 183, 
	184, 185, 7, 186, 0, 0, 187, 188, 
	189, 190, 191, 192, 193, 194, 0, 195, 
	7, 196, 197, 0, 0, 198, 199, 200, 
	201, 202, 0, 203, 204, 205, 0, 206, 
	0, 0, 207, 208, 209, 210, 211, 212, 
	0, 28, 0, 0, 7, 7, 0, 0, 
	0, 213, 0, 0, 0, 0, 214, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 215, 216, 217, 
	218, 219, 220, 59, 221, 0, 222, 0, 
	0, 0, 223, 0, 224, 225, 0, 0, 
	226, 0, 0, 0, 227, 0, 228, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 229, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 7, 231, 232, 0, 
	0, 0, 233, 234, 235, 59, 236, 0, 
	28, 237, 0, 238, 239, 0, 28, 0, 
	0, 240, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 241, 0, 242, 0, 
	243, 244, 245, 246, 247, 59, 248, 0, 
	0, 249, 0, 250, 251, 252, 253, 28, 
	0, 27, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 254, 255, 
	256, 257, 258, 259, 260, 0, 261, 262, 
	263, 264, 265, 266, 267, 268, 269, 59, 
	270, 0, 271, 272, 273, 274, 275, 276, 
	0, 0, 0, 277, 7, 7, 0, 278, 
	279, 280, 281, 282, 0, 0, 0, 0, 
	0, 283, 284, 59, 285, 0, 286, 28, 
	287, 288, 289, 290, 291, 292, 0, 28, 
	0, 0, 0, 0, 0, 0, 293, 294, 
	295, 296, 59, 297, 0, 298, 28, 299, 
	300, 301, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 302, 303, 
	0, 8, 0, 0, 7, 304, 0, 0, 
	304, 304, 0, 0, 7, 305, 0, 305, 
	0, 305, 305, 305, 0, 0, 305, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	0, 0, 306, 307, 307, 308, 309, 0, 
	310, 311, 0, 74, 0, 312, 0, 313, 
	314, 315, 316, 317, 29, 318, 319, 320, 
	321, 322, 59, 323, 0, 324, 325, 0, 
	326, 0, 327, 328, 304, 329, 0, 330, 
	331, 332, 0, 0, 333, 0, 0, 0, 
	0, 334, 0, 0, 0, 0, 0, 0, 
	0, 335, 0, 0, 336, 0, 337, 338, 
	0, 0, 0, 339, 0, 0, 340, 341, 
	342, 343, 344, 345, 0, 346, 347, 347, 
	0, 348, 0, 349, 350, 350, 0, 0, 
	351, 352, 353, 0, 354, 355, 356, 0, 
	7, 357, 358, 359, 0, 360, 116, 116, 
	116, 116, 116, 116, 116, 116, 361, 362, 
	363, 0, 0, 364, 0, 365, 366, 367, 
	0, 368, 369, 370, 0, 0, 371, 0, 
	0, 372, 0, 7, 0, 0, 373, 374, 
	0, 0, 375, 0, 28, 376, 0, 0, 
	0, 0, 0, 377, 378, 0, 0, 0, 
	0, 0, 0, 0, 379, 0, 0, 0, 
	0, 0, 380, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 381, 382, 383, 0, 
	0, 0, 384, 28, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	74, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 385, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 386, 387, 
	388, 389, 390, 390, 386, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	391, 392, 393, 394, 0, 28, 0, 0, 
	395, 396, 397, 59, 398, 0, 399, 28, 
	400, 7, 401, 402, 0, 28, 403, 0, 
	0, 404, 405, 406, 407, 59, 408, 0, 
	28, 409, 410, 411, 412, 0, 28, 0, 
	413, 0, 7, 414, 0, 0, 0, 0, 
	415, 0, 0, 416, 416, 0, 417, 0, 
	0, 0, 418, 7, 419, 419, 419, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 420, 421, 
	422, 0, 423, 424, 425, 426, 427, 428, 
	59, 429, 0, 430, 0, 0, 431, 432, 
	433, 434, 435, 436, 437, 438, 439, 0, 
	440, 0, 441, 442, 0, 0, 443, 444, 
	445, 0, 0, 446, 0, 0, 445, 447, 
	447, 448, 449, 0, 450, 451, 0, 452, 
	453, 454, 0, 455, 456, 0, 0, 457, 
	458, 445, 445, 459, 0, 0, 460, 460, 
	0, 461, 0, 462, 463, 7, 0, 464, 
	0, 465, 466, 467, 468, 468, 469, 469, 
	0, 0, 470, 471, 471, 472, 472, 473, 
	474, 474, 475, 475, 476, 477, 477, 478, 
	478, 0, 0, 479, 480, 481, 482, 483, 
	484, 484, 481, 483, 485, 416, 486, 0, 
	0, 0, 487, 0, 0, 488, 489, 419, 
	419, 419, 490, 419, 491, 492, 28, 493, 
	494, 495, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 496, 0, 
	0, 0, 0, 490, 0, 0, 0, 0, 
	0, 497, 498, 0, 0, 0, 0, 0, 
	0, 499, 0, 0, 0, 0, 0, 498, 
	500, 501, 0, 502, 0, 503, 0, 0, 
	0, 0, 504, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 505, 0, 0, 0, 
	0, 0, 0, 0, 504, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 506, 507, 508, 509, 509, 
	88, 509, 510, 511, 512, 0, 513, 514, 
	0, 515, 0, 516, 0, 0, 0, 517, 
	518
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 95, 0, 0, 0, 0, 0, 0, 
	0, 0, 95, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 95, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	95, 0, 95, 0, 0, 0, 0, 95, 
	95, 0, 0, 0, 0, 0, 95, 0, 
	95, 0, 95, 0, 0, 0, 0, 95, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 0, 0, 0, 0, 0, 0, 95, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 95, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 95, 0, 0, 0, 0, 
	0, 95, 0, 0, 0, 0, 0, 0, 
	0, 95, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 95, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 0, 0, 0, 0, 0, 0, 95, 
	0, 0, 0, 0, 0, 0, 0, 95, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 95, 0, 0, 0, 0, 
	0, 0, 0, 95, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 96, 0, 0, 0, 0, 0, 0, 
	0, 0, 96, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 96, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 96, 0, 0, 
	96, 0, 96, 0, 0, 0, 0, 96, 
	96, 0, 0, 0, 0, 0, 96, 0, 
	96, 0, 96, 0, 0, 0, 0, 96, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	96, 0, 0, 0, 0, 0, 0, 96, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 96, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 96, 0, 0, 0, 0, 
	0, 96, 0, 0, 0, 0, 0, 0, 
	0, 96, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 96, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	96, 0, 0, 0, 0, 0, 0, 96, 
	0, 0, 0, 0, 0, 0, 0, 96, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 48, 48, 48, 
	48, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 83, 
	83, 83, 83, 90, 90, 90, 90, 0, 
	0, 0, 0, 105, 107, 109, 109, 109, 
	114, 114, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 189, 191, 191, 191, 203, 
	203, 203, 211, 213, 213, 213, 213, 213, 
	219, 211, 211, 211, 211, 211, 211, 211, 
	245, 245, 245, 245, 245, 245, 211, 261, 
	211, 261, 245, 245, 211, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 211, 245, 245, 245, 245, 
	302, 302, 302, 307, 309, 309, 309, 313, 
	313, 316, 316, 316, 316, 321, 321, 321, 
	307, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 352, 359, 361, 361, 361, 361, 
	352, 0, 377, 378, 379, 381, 383, 385, 
	383, 383, 0, 395, 396, 400, 400, 401, 
	402, 411, 412, 413, 413, 413, 416, 416, 
	418, 419, 420, 420, 420, 422, 423, 424, 
	424, 424, 427, 427, 420, 430, 430, 420, 
	416, 416, 435, 436, 436, 436, 439, 439, 
	436, 436, 436, 442, 442, 442, 442, 448, 
	449, 449, 449, 449, 457, 449, 449, 449, 
	449, 462, 449, 449, 449, 449, 449, 449, 
	468, 469, 470, 470, 0, 477, 481, 481, 
	482, 483, 492, 493, 494, 494, 494, 497, 
	497, 499, 500, 501, 501, 501, 503, 504, 
	505, 505, 505, 508, 508, 501, 511, 511, 
	501, 497, 497, 516, 517, 517, 517, 520, 
	520, 517, 517, 517, 523, 523, 523, 523, 
	529, 530, 530, 530, 530, 538, 530, 530, 
	530, 530, 543, 530, 530, 530, 530, 530, 
	530, 549, 550, 551, 551, 0, 558, 559, 
	0, 565, 0, 572, 576, 576, 577, 0, 
	0, 586, 587, 591, 591, 592, 0, 597, 
	0, 600, 0, 603, 603, 604, 605, 0, 
	646, 648, 649, 650, 651, 653, 655, 659, 
	659, 650, 650, 650, 650, 661, 650, 650, 
	655, 650, 650, 646, 665, 665, 665, 665, 
	665, 665, 655, 655, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 704, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 650, 
	0, 747, 748, 749, 751, 747, 754, 0, 
	773, 775, 777, 778, 779, 780, 781, 783, 
	780, 780, 780, 780, 780, 786, 780, 780, 
	788, 786, 786, 780, 0, 807, 808, 114, 
	114, 811, 812, 114, 808, 808, 815, 817, 
	820, 808, 821, 808, 822, 823, 825, 827, 
	808, 815, 828, 828, 817, 828, 832, 828, 
	828, 828, 828, 0, 189, 840, 841, 840, 
	840, 0, 850, 851, 853, 855, 857, 855, 
	859, 0, 871, 872, 873, 874, 876, 878, 
	880, 881, 881, 881, 881, 881, 881, 881, 
	881, 881, 881, 881, 881, 881, 881, 881, 
	881, 0, 939, 942, 945, 946, 950, 952, 
	953, 954, 955, 956, 958, 961, 962, 964, 
	966, 969, 971, 972, 211, 969, 974, 969, 
	961, 976, 961, 961, 994, 997, 999, 1000, 
	1004, 1007, 1008, 1009, 1010, 994, 994, 994, 
	994, 994, 994, 994, 994, 994, 994, 1014, 
	1018, 1020, 994, 994, 961, 1025, 1026, 1026, 
	1026, 961, 961, 961, 1027, 1034, 1034, 1036, 
	1038, 1047, 1048, 1049, 1049, 1049, 1052, 1052, 
	1054, 1055, 1056, 1056, 1056, 1058, 1059, 1060, 
	1060, 1060, 1063, 1063, 1056, 1066, 1066, 1056, 
	1052, 1052, 1071, 1072, 1072, 1072, 1075, 1075, 
	1072, 1072, 1072, 1078, 1078, 1078, 1078, 1084, 
	1085, 1085, 1085, 1085, 1093, 1085, 1085, 1085, 
	1085, 1099, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 
	1085, 1085, 1085, 1085, 1085, 1117, 1118, 1119, 
	1119, 211, 961, 961, 1123, 961, 956, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 211, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 1176, 946, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 1201, 961, 
	0, 1209, 1210, 1211, 1213, 1215, 1217, 0, 
	1226, 1227, 1228, 1229, 1231, 1226, 1234, 0, 
	313, 1289, 1291, 1292, 1293, 1294, 1296, 1298, 
	1300, 1303, 1303, 313, 1305, 1307, 1308, 1309, 
	1305, 1311, 1313, 1313, 1316, 1316, 1319, 1330, 
	313, 1336, 1338, 1340, 1341, 1344, 1345, 1319, 
	1319, 1348, 1348, 1348, 1354, 1356, 1357, 1360, 
	1362, 1363, 1364, 1348, 1348, 1371, 1376, 1381, 
	1348, 1348, 1388, 1388, 1348, 1348, 1313, 1305, 
	1305, 1313, 1305, 1305, 1300, 313, 1406, 1407, 
	1407, 1407, 1407, 1407, 1407, 1413, 1300, 1416, 
	1417, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1457, 1458, 1418, 
	1418, 1462, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 
	1516, 1294, 1517, 0, 1523, 1524, 1525, 1527, 
	1523, 1523, 1523, 0, 1532, 1532, 1532, 1532, 
	1536
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 185;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 194;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 260;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 325;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 328;
class << self
	attr_accessor :lex_en_interp_backslash_delimited
end
self.lex_en_interp_backslash_delimited = 330;
class << self
	attr_accessor :lex_en_plain_backslash_delimited
end
self.lex_en_plain_backslash_delimited = 335;
class << self
	attr_accessor :lex_en_interp_backslash_delimited_words
end
self.lex_en_interp_backslash_delimited_words = 336;
class << self
	attr_accessor :lex_en_plain_backslash_delimited_words
end
self.lex_en_plain_backslash_delimited_words = 342;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 344;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 346;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 351;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 464;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 471;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 492;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 523;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 529;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 537;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 561;
class << self
	attr_accessor :lex_en_expr_labelarg
end
self.lex_en_expr_labelarg = 792;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 799;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 807;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 987;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 995;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 185;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    ?a.ord => "\a", ?b.ord  => "\b", ?e.ord => "\e", ?f.ord => "\f",
    ?n.ord => "\n", ?r.ord  => "\r", ?s.ord => "\s", ?t.ord => "\t",
    ?v.ord => "\v", ?\\.ord => "\\"
  }.freeze

  REGEXP_META_CHARACTERS = Regexp.union(*"\\$()*+.<>?[]^{|}".chars).freeze

  attr_reader   :source_buffer

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg, :in_kwarg, :context, :command_start

  attr_accessor :tokens, :comments

  attr_reader :paren_nest, :cmdarg_stack, :cond_stack, :lambda_stack

  def initialize(version)
    @version    = version
    @static_env = nil
    @context    = nil

    @tokens     = nil
    @comments   = nil

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
      @cond_stack   = []
      @cmdarg_stack = []
    end

    @force_utf32   = false # Set to true by some tests

    @source_pts    = nil # @source as a codepoint array

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    @herebody_s    = nil # starting position of current heredoc line

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
    # we store the indentation level and give it out to the parser
    # on request. It is not possible to infer indentation level just
    # from the AST because escape sequences such as `\ ` or `\t` are
    # expanded inside the lexer, but count as non-whitespace for
    # indentation purposes.
    @dedent_level  = nil

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_start = true

    # True at the end of "def foo a:"
    @in_kwarg      = false

    # State before =begin / =end block comment
    @cs_before_block_comment = self.class.lex_en_line_begin
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      source = @source_buffer.source

      if source.encoding == Encoding::UTF_8
        @source_pts = source.unpack('U*')
      else
        @source_pts = source.unpack('C*')
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source_pts = nil
    end
  end

  def encoding
    @source_buffer.source.encoding
  end

  LEX_STATES = {
    :line_begin    => lex_en_line_begin,
    :expr_dot      => lex_en_expr_dot,
    :expr_fname    => lex_en_expr_fname,
    :expr_value    => lex_en_expr_value,
    :expr_beg      => lex_en_expr_beg,
    :expr_mid      => lex_en_expr_mid,
    :expr_arg      => lex_en_expr_arg,
    :expr_cmdarg   => lex_en_expr_cmdarg,
    :expr_end      => lex_en_expr_end,
    :expr_endarg   => lex_en_expr_endarg,
    :expr_endfn    => lex_en_expr_endfn,
    :expr_labelarg => lex_en_expr_labelarg,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  def push_cmdarg
    @cmdarg_stack.push(@cmdarg)
    @cmdarg = StackState.new("cmdarg.#{@cmdarg_stack.count}")
  end

  def pop_cmdarg
    @cmdarg = @cmdarg_stack.pop
  end

  def push_cond
    @cond_stack.push(@cond)
    @cond = StackState.new("cond.#{@cond_stack.count}")
  end

  def pop_cond
    @cond = @cond_stack.pop
  end

  def dedent_level
    # We erase @dedent_level as a precaution to avoid accidentally
    # using a stale value.
    dedent_level, @dedent_level = @dedent_level, nil
    dedent_level
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    klass = self.class
    _lex_trans_keys         = klass.send :_lex_trans_keys
    _lex_key_spans          = klass.send :_lex_key_spans
    _lex_index_offsets      = klass.send :_lex_index_offsets
    _lex_indicies           = klass.send :_lex_indicies
    _lex_trans_targs        = klass.send :_lex_trans_targs
    _lex_trans_actions      = klass.send :_lex_trans_actions
    _lex_to_state_actions   = klass.send :_lex_to_state_actions
    _lex_from_state_actions = klass.send :_lex_from_state_actions
    _lex_eof_trans          = klass.send :_lex_eof_trans

    pe = @source_pts.size + 2
    p, eof = @p, pe

    cmd_state = @command_start
    @command_start = false

    
# line 11328 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 96 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 11356 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_wide = ( (@source_pts[p] || 0))
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= _wide && 
			_wide <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + _wide - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 28 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 116 then
# line 825 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 29 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 59 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 63 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 309 then
# line 1269 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 36 then
# line 1550 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 38 then
# line 1570 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 40 then
# line 1598 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 70 then
# line 1790 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
	when 347 then
# line 1882 "lib/parser/lexer.rl"
		begin
 tm = p - 1; diag_msg = :ivar_name 		end
	when 350 then
# line 1883 "lib/parser/lexer.rl"
		begin
 tm = p - 2; diag_msg = :cvar_name 		end
	when 358 then
# line 1903 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
	when 390 then
# line 1992 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 307 then
# line 2080 "lib/parser/lexer.rl"
		begin
 ident_tok = tok; ident_ts = @ts; ident_te = @te; 		end
	when 477 then
# line 2266 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 471 then
# line 2267 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 474 then
# line 2268 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 468 then
# line 2269 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 483 then
# line 2270 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 445 then
# line 2271 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 460 then
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 453 then
# line 2329 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 450 then
# line 2330 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 88 then
# line 2540 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 112 then
# line 1102 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 799;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 5 then
# line 1028 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end

   end
		end
	when 108 then
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 107 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 114 then
# line 1044 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if @version >= 27
      literal.extend_string(tok, @ts, @te)
    else
      message = tok.start_with?('#@@') ? :cvar_name : :ivar_name
      diagnostic :error, message, { :name => tok(@ts + 1, @te) }, range(@ts + 1, @te)
    end
   end
		end
	when 113 then
# line 1028 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end

   end
		end
	when 110 then
# line 1015 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 111 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 898 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 4 then
# line 874 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 144 then
# line 1102 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 799;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 10 then
# line 1028 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end

   end
		end
	when 141 then
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 140 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 146 then
# line 1044 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if @version >= 27
      literal.extend_string(tok, @ts, @te)
    else
      message = tok.start_with?('#@@') ? :cvar_name : :ivar_name
      diagnostic :error, message, { :name => tok(@ts + 1, @te) }, range(@ts + 1, @te)
    end
   end
		end
	when 145 then
# line 1028 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end

   end
		end
	when 143 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 898 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 9 then
# line 874 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 172 then
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 171 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 174 then
# line 1015 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 175 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 178 then
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 177 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 180 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 187 then
# line 1102 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 799;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 13 then
# line 1028 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end

   end
		end
	when 184 then
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 183 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 189 then
# line 1044 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if @version >= 27
      literal.extend_string(tok, @ts, @te)
    else
      message = tok.start_with?('#@@') ? :cvar_name : :ivar_name
      diagnostic :error, message, { :name => tok(@ts + 1, @te) }, range(@ts + 1, @te)
    end
   end
		end
	when 188 then
# line 1028 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end

   end
		end
	when 186 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 12 then
# line 874 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 191 then
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 190 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 198 then
# line 1102 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 799;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 15 then
# line 1028 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end

   end
		end
	when 194 then
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 193 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 200 then
# line 1044 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if @version >= 27
      literal.extend_string(tok, @ts, @te)
    else
      message = tok.start_with?('#@@') ? :cvar_name : :ivar_name
      diagnostic :error, message, { :name => tok(@ts + 1, @te) }, range(@ts + 1, @te)
    end
   end
		end
	when 199 then
# line 1028 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end

   end
		end
	when 196 then
# line 1015 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 197 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 14 then
# line 874 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 202 then
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 201 then
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 792;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 204 then
# line 1015 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 205 then
# line 1199 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1;
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 206 then
# line 1186 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)
         @cs = 807;
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 16 then
# line 1338 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 207 then
# line 1338 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 209 then
# line 1351 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 208 then
# line 1361 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 230 then
# line 1382 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(KEYWORDS_BEGIN);
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 216 then
# line 1390 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 18 then
# line 1394 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 807; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end
  end
		end
	when 213 then
# line 1403 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 225 then
# line 1407 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 20 then
# line 1413 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if version?(23)
          type, delimiter = tok[0..-2], tok[-1].chr
          	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

        else
          p = @ts - 1
          	begin
		 @cs = 807
		_goto_level = _again
		next
	end

        end
       end
		end
	when 212 then
# line 1426 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 211 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 229 then
# line 1382 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN);
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 226 then
# line 1386 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 228 then
# line 1390 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 223 then
# line 1394 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 807; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end
  end
		end
	when 219 then
# line 1403 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 224 then
# line 1410 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 217 then
# line 1423 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 222 then
# line 1426 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1403 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit_table(PUNCTUATION)
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 17 then
# line 1426 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 215 then
# line 1 "NONE"
		begin
	case  @act
	when 43 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN);
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 44 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 45 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 22 then
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           p = p - 1;  @cs = 792; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 232 then
# line 1444 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 231 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 234 then
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 233 then
# line 1444 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 21 then
# line 1444 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 240 then
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 492; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 239 then
# line 1476 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 238 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 250 then
# line 1455 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 241 then
# line 1459 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 246 then
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 492; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 244 then
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 249 then
# line 1476 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 273 then
# line 1536 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 256 then
# line 1554 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          if @version < 30
            diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
          else
            diagnostic :warning, :ambiguous_regexp, nil, range(tm, tm + 1)
          end
        end

        p = tm - 1
        	begin
		 @cs = 561
		_goto_level = _again
		next
	end

       end
		end
	when 262 then
# line 1582 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 24 then
# line 1590 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 264 then
# line 1599 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 39 then
# line 1610 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 251 then
# line 1624 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 252 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 263 then
# line 1545 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 259 then
# line 1571 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 561
		_goto_level = _again
		next
	end

       end
		end
	when 261 then
# line 1587 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 255 then
# line 1610 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 254 then
# line 1615 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 272 then
# line 1624 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 25 then
# line 1615 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 41 then
# line 1624 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 23 then
# line 1 "NONE"
		begin
	case  @act
	when 71 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          if @version < 30
            diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
          else
            diagnostic :warning, :ambiguous_regexp, nil, range(tm, tm + 1)
          end
        end

        p = tm - 1
        	begin
		 @cs = 561
		_goto_level = _again
		next
	end

      end
	when 72 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 561
		_goto_level = _again
		next
	end

      end
	when 77 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 43 then
# line 1660 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 492
		_goto_level = _again
		next
	end
  end
		end
	when 277 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 278 then
# line 1660 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 492
		_goto_level = _again
		next
	end
  end
		end
	when 44 then
# line 1660 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 492
		_goto_level = _again
		next
	end
  end
		end
	when 42 then
# line 1 "NONE"
		begin
	case  @act
	when 84 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do'.freeze, @te - 2, @te)
        else
          emit(:kDO, 'do'.freeze, @te - 2, @te)
        end
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 85 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 492
		_goto_level = _again
		next
	end
 end
end 
			end
	when 288 then
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 281 then
# line 1702 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 282 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 283 then
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 286 then
# line 1702 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 292 then
# line 1726 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 291 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 300 then
# line 1718 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 294 then
# line 1720 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 298 then
# line 1726 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 293 then
# line 1 "NONE"
		begin
	case  @act
	when 92 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 93 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
 end
end 
			end
	when 56 then
# line 1741 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 332 then
# line 1758 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = tok[0].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 325 then
# line 1765 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = @source_buffer.slice(@ts).chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 54 then
# line 1772 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 345 then
# line 1847 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1; p = p - 1;
        emit(:tSYMBEG, tok(@ts, @ts + 1), @ts, @ts + 1)
        	begin
		 @cs = 351
		_goto_level = _again
		next
	end

       end
		end
	when 333 then
# line 1855 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 344 then
# line 1863 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1, @ts + 2))
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 68 then
# line 1877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 355 then
# line 1918 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 354 then
# line 1928 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 334 then
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 51 then
# line 2008 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((@source_buffer.slice(@ts) =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 807;
          else
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           @cs = 792;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 331 then
# line 2046 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if @version >= 30
          if @lambda_stack.any? && @lambda_stack.last + 1 == @paren_nest
            # To reject `->(...)` like `->...`
            emit(:tDOT3)
          else
            emit(:tBDOT3)
          end
        elsif @version >= 27
          emit(:tBDOT3)
        else
          emit(:tDOT3)
        end

         @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 48 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tIDENTIFIER, ident_tok, ident_ts, ident_te)
        p = ident_te - 1

        if !@static_env.nil? && @static_env.declared?(ident_tok) && @version < 25
           @cs = 464;
        else
           @cs = 523;
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 319 then
# line 2101 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 185
		_goto_level = _again
		next
	end

       end
		end
	when 55 then
# line 2117 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 303 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 329 then
# line 1741 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 328 then
# line 1748 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR, '*'.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 324 then
# line 1778 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 352 then
# line 1838 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
       end
		end
	when 335 then
# line 1877 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 348 then
# line 1885 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 353 then
# line 1928 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 359 then
# line 1934 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 326 then
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 330 then
# line 2035 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          emit(:tBDOT2)
        else
          emit(:tDOT2)
        end

         @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 306 then
# line 1323 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 316 then
# line 2098 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 318 then
# line 2101 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 185
		_goto_level = _again
		next
	end

       end
		end
	when 321 then
# line 2117 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 53 then
# line 1778 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 72 then
# line 1838 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
       end
		end
	when 73 then
# line 1905 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 47 then
# line 1323 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 52 then
# line 2098 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 67 then
# line 2117 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 50 then
# line 1 "NONE"
		begin
	case  @act
	when 98 then
	begin begin p = (( @te))-1; end

        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 105 then
	begin begin p = (( @te))-1; end

        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
      end
	when 116 then
	begin begin p = (( @te))-1; end

        if @version >= 27
          emit(:tPIPE, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = p - 1;
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          p -= 2
          	begin
		 @cs = 807
		_goto_level = _again
		next
	end

        end
      end
	when 120 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 121 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 537; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 122 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
           @command_start = true
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 126 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
 end
	when 127 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 131 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
 end
end 
			end
	when 393 then
# line 2137 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 394 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 395 then
# line 2125 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 399 then
# line 2137 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 76 then
# line 2147 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 403 then
# line 2152 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        	begin
		 @cs = (push_literal(tok, tok, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 402 then
# line 2162 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 401 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 405 then
# line 2156 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 404 then
# line 2162 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 75 then
# line 2162 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 561
		_goto_level = _again
		next
	end
  end
		end
	when 438 then
# line 2173 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tLAMBDA, '->'.freeze, @ts, @ts + 2)

        @lambda_stack.push @paren_nest
         @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 85 then
# line 2214 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 413 then
# line 2350 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts, nil, false, false, true))
		_goto_level = _again
		next
	end

       end
		end
	when 78 then
# line 2368 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end
  end
		end
	when 434 then
# line 2375 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 471; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 487 then
# line 2399 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 427 then
# line 2408 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION);
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 432 then
# line 2443 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 418 then
# line 2447 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tEH, '?'.freeze)
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 415 then
# line 2466 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 417 then
# line 2479 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tSEMI, ';'.freeze)
           @command_start = true
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 492 then
# line 2483 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 412 then
# line 2489 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 411 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 503 then
# line 2210 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 351; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 501 then
# line 2214 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 500 then
# line 2225 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
           @command_start = true
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 442 then
# line 2300 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 489 then
# line 2360 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 431 then
# line 2368 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 346
		_goto_level = _again
		next
	end
  end
		end
	when 439 then
# line 2375 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 471; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 495 then
# line 1323 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 437 then
# line 2399 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 433 then
# line 2408 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION);
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 426 then
# line 2414 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 440 then
# line 2466 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 424 then
# line 2473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 430 then
# line 2489 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 83 then
# line 2273 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 79 then
# line 2300 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 82 then
# line 2332 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 77 then
# line 2489 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 80 then
# line 1 "NONE"
		begin
	case  @act
	when 144 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        if tok == '{'.freeze
          @paren_nest += 1
        end
        @command_start = true

         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 145 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 351; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 146 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 147 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 148 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           @command_start = true
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 149 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 537; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 150 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 492; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 151 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 152 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 153 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 155 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 156 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 157 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 159 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 163 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 164 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 492; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 166 then
	begin begin p = (( @te))-1; end

        emit_table(PUNCTUATION);
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 167 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 514 then
# line 2530 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tNL, nil, @newline_s, @newline_s + 1)
        if @version < 27
          p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tBDOT3)
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 94 then
# line 2541 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 508 then
# line 2544 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 511 then
# line 2505 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version < 27
          # Ruby before 2.7 doesn't support comments before leading dot.
          # If a line after "a" starts with a comment then "a" is a self-contained statement.
          # So in that case we emit a special tNL token and start reading the
          # next line as a separate statement.
          #
          # Note: block comments before leading dot are not supported on any version of Ruby.
          emit(:tNL, nil, @newline_s, @newline_s + 1)
          p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 513 then
# line 2519 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tNL, nil, @newline_s, @newline_s + 1)
        if @version < 27
          p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tBDOT2)
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 512 then
# line 2541 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = tm - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 510 then
# line 2544 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 89 then
# line 2505 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        if @version < 27
          # Ruby before 2.7 doesn't support comments before leading dot.
          # If a line after "a" starts with a comment then "a" is a self-contained statement.
          # So in that case we emit a special tNL token and start reading the
          # next line as a separate statement.
          #
          # Note: block comments before leading dot are not supported on any version of Ruby.
          emit(:tNL, nil, @newline_s, @newline_s + 1)
          p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 86 then
# line 2544 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 90 then
# line 1 "NONE"
		begin
	case  @act
	when 180 then
	begin begin p = (( @te))-1; end

        if @version < 27
          # Ruby before 2.7 doesn't support comments before leading dot.
          # If a line after "a" starts with a comment then "a" is a self-contained statement.
          # So in that case we emit a special tNL token and start reading the
          # next line as a separate statement.
          #
          # Note: block comments before leading dot are not supported on any version of Ruby.
          emit(:tNL, nil, @newline_s, @newline_s + 1)
          p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 184 then
	begin begin p = (( @te))-1; end
 emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 185; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 517 then
# line 2554 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = (@cs_before_block_comment)
		_goto_level = _again
		next
	end

       end
		end
	when 516 then
# line 2562 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 105 then
# line 2572 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 995
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2576 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 97 then
# line 2579 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 799
		_goto_level = _again
		next
	end
  end
		end
	when 98 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 99 then
# line 2569 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 104 then
# line 2572 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 995
		_goto_level = _again
		next
	end
  end
		end
	when 103 then
# line 2579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 799
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2579 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 799
		_goto_level = _again
		next
	end
  end
		end
	when 66 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 109 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 142 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 173 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 179 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 185 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 192 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 195 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 203 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 274 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1536 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 265 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1599 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 257 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1610 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 356 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1918 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 320 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2101 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 185
		_goto_level = _again
		next
	end

       end
		end
	when 441 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2455 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if @paren_nest == 0
          diagnostic :warning, :triple_dot_at_eol, nil, range(@ts, @te - 1)
        end

        emit(:tDOT3, '...'.freeze, @ts, @te - 1)
        p = p - 1;
         @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 518 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2554 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = (@cs_before_block_comment)
		_goto_level = _again
		next
	end

       end
		end
	when 515 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2559 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 106 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2572 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 995
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2576 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 463 then
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 461 then
# line 637 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 466 then
# line 638 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 464 then
# line 639 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 2); p -= 2 } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 462 then
# line 640 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 2); p -= 2 } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 465 then
# line 641 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 6); p -= 6 } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 454 then
# line 645 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 2332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 455 then
# line 646 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars), @ts, @te - 2); p -= 2 } 		end
# line 2332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 456 then
# line 650 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 458 then
# line 651 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 457 then
# line 652 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars), @ts, @te - 6); p -= 6 } 		end
# line 2332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 136 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 167 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 380 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 117 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 148 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 361 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 120 then
# line 719 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 151 then
# line 719 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 364 then
# line 719 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 122 then
# line 747 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 153 then
# line 747 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 366 then
# line 747 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 119 then
# line 755 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 150 then
# line 755 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 363 then
# line 755 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 139 then
# line 759 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 170 then
# line 759 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 383 then
# line 759 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 138 then
# line 763 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 169 then
# line 763 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 382 then
# line 763 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 133 then
# line 769 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 164 then
# line 769 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 377 then
# line 769 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 132 then
# line 773 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 163 then
# line 773 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 376 then
# line 773 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 137 then
# line 779 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 168 then
# line 779 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 381 then
# line 779 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 134 then
# line 793 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 165 then
# line 793 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 378 then
# line 793 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 118 then
# line 819 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 149 then
# line 819 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 362 then
# line 819 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 176 then
# line 825 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 181 then
# line 825 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 57 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 30 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1550 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1570 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1598 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 218 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1423 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 237 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 245 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 33 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1610 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 807
		_goto_level = _again
		next
	end

       end
		end
	when 276 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1615 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 268 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1621 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 287 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 299 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1720 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 295 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 58 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1741 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 49 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2082 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tIDENTIFIER, ident_tok, ident_ts, ident_te)
        p = ident_te - 1

        if !@static_env.nil? && @static_env.declared?(ident_tok) && @version < 25
           @cs = 464;
        else
           @cs = 523;
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 317 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2098 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 400 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2125 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 396 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2128 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
      if @in_kwarg
        p = p - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end

      else
        	begin
		 @cs = 185
		_goto_level = _again
		next
	end

      end
     end
		end
	when 409 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2156 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 406 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2159 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 185
		_goto_level = _again
		next
	end
  end
		end
	when 493 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 425 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2476 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 987
		_goto_level = _again
		next
	end
  end
		end
	when 100 then
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2569 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 267 then
# line 1067 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1517 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze, @te - 1, @te)
        else
          emit(:tLCURLY, '{'.freeze, @te - 1, @te)
        end
        @command_start = true
        @paren_nest += 1
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 289 then
# line 1067 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1683 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE_ARG, '{'.freeze)
        end
        @paren_nest += 1
        @command_start = true
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 391 then
# line 1067 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1963 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          @command_start = true
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE, '{'.freeze)
        end
        @paren_nest += 1
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 506 then
# line 1067 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 2181 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        if tok == '{'.freeze
          @paren_nest += 1
        end
        @command_start = true

         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 507 then
# line 1076 "lib/parser/lexer.rl"
		begin

    current_literal = literal
    if current_literal
      if current_literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}'.freeze, p - 1, p)
          @cond.lexpop
          @cmdarg.lexpop
        else
          emit(:tSTRING_DEND, '}'.freeze, p - 1, p)
        end

        if current_literal.saved_herebody_s
          @herebody_s = current_literal.saved_herebody_s
        end


        p = p - 1;
         @cs = (next_state_for_literal(current_literal));
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end

    @paren_nest -= 1
  		end
# line 2418 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 807;
          else
             @cs = 529;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 60 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 64 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 221 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1423 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 236 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 248 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 270 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1618 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 285 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 297 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1720 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 323 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2098 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 398 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2125 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 408 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2156 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 429 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 102 then
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2569 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 242 then
# line 1269 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1463 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg(cmd_state)); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 336 then
# line 1269 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1869 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 308 then
# line 1269 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2071 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 422 then
# line 1269 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 144 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        if tok == '{'.freeze
          @paren_nest += 1
        end
        @command_start = true

         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 145 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 351; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 146 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 147 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 148 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           @command_start = true
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 149 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 537; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 150 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 492; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 151 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 152 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 153 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 155 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 156 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 157 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 159 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 163 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 164 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 492; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 166 then
	begin begin p = (( @te))-1; end

        emit_table(PUNCTUATION);
         @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 167 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 243 then
# line 1270 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1463 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg(cmd_state)); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 337 then
# line 1270 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1869 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 310 then
# line 1270 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2071 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 423 then
# line 1270 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2382 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 492; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 338 then
# line 1275 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1869 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 311 then
# line 1275 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2071 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 339 then
# line 1276 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1869 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 312 then
# line 1276 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2071 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 343 then
# line 1277 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1869 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 315 then
# line 1277 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2071 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 342 then
# line 1278 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1869 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 314 then
# line 1278 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 98 then
	begin begin p = (( @te))-1; end

        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 105 then
	begin begin p = (( @te))-1; end

        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
      end
	when 116 then
	begin begin p = (( @te))-1; end

        if @version >= 27
          emit(:tPIPE, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = p - 1;
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          p -= 2
          	begin
		 @cs = 807
		_goto_level = _again
		next
	end

        end
      end
	when 120 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 121 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 537; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 122 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
           @command_start = true
            @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 126 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
 end
	when 127 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 464; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 131 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 807
		_goto_level = _again
		next
	end
 end
end 
			end
	when 340 then
# line 1279 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1869 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 313 then
# line 1279 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 2071 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 341 then
# line 1284 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1869 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 488 then
# line 1289 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2364 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 266 then
# line 1295 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1511 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze, @te - 1, @te)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 384 then
# line 1295 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1977 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 491 then
# line 1295 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 2451 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK2, '['.freeze)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 494 then
# line 1301 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2418 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 807;
          else
             @cs = 529;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 258 then
# line 1308 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1492 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '('.freeze, @te - 1, @te)
           @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 271 then
# line 1308 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1505 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2, '('.freeze)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 279 then
# line 1308 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1637 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
        if version?(18)
           @cs = 799; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 327 then
# line 1308 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1982 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN, '('.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 435 then
# line 1308 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 2414 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 436 then
# line 1318 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2418 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 807;
          else
             @cs = 529;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 71 then
# line 1790 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 351 then
# line 1791 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1792 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, heredoc_e) =~ /^<<(-?)(~?)(["'`]?)(.*)\3$/m

        indent      = !$1.empty? || !$2.empty?
        dedent_body = !$2.empty?
        type        =  $3.empty? ? '<<"'.freeze : ('<<'.freeze + $3)
        delimiter   =  $4

        if @version >= 27
          if delimiter.count("\n") > 0 || delimiter.count("\r") > 0
            diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
          end
        elsif @version >= 24
          if delimiter.count("\n") > 0
            if delimiter.end_with?("\n")
              diagnostic :warning, :heredoc_id_ends_with_nl, nil, range(@ts, @ts + 1)
              delimiter = delimiter.rstrip
            else
              diagnostic :fatal, :heredoc_id_has_newline, nil, range(@ts, @ts + 1)
            end
          end
        end

        if dedent_body && version?(18, 19, 20, 21, 22)
          emit(:tLSHFT, '<<'.freeze, @ts, @ts + 2)
          p = @ts + 1
           @cs = 561; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = (push_literal(type, delimiter, @ts, heredoc_e, indent, dedent_body));

          @herebody_s ||= new_herebody_s
          p = @herebody_s - 1
        end
       end
		end
	when 346 then
# line 1882 "lib/parser/lexer.rl"
		begin
 tm = p - 1; diag_msg = :ivar_name 		end
# line 1885 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 349 then
# line 1883 "lib/parser/lexer.rl"
		begin
 tm = p - 2; diag_msg = :cvar_name 		end
# line 1885 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 357 then
# line 1903 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 387 then
# line 1992 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1993 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 537; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 478 then
# line 2266 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 472 then
# line 2267 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 475 then
# line 2268 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 469 then
# line 2269 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 484 then
# line 2270 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 447 then
# line 2271 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 485 then
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 451 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2330 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 227 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1382 "lib/parser/lexer.rl"
		begin
 @act = 43;		end
	when 214 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1386 "lib/parser/lexer.rl"
		begin
 @act = 44;		end
	when 210 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1390 "lib/parser/lexer.rl"
		begin
 @act = 45;		end
	when 26 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1554 "lib/parser/lexer.rl"
		begin
 @act = 71;		end
	when 260 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1571 "lib/parser/lexer.rl"
		begin
 @act = 72;		end
	when 27 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1610 "lib/parser/lexer.rl"
		begin
 @act = 77;		end
	when 253 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1615 "lib/parser/lexer.rl"
		begin
 @act = 78;		end
	when 280 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1647 "lib/parser/lexer.rl"
		begin
 @act = 84;		end
	when 45 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1660 "lib/parser/lexer.rl"
		begin
 @act = 85;		end
	when 301 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1714 "lib/parser/lexer.rl"
		begin
 @act = 92;		end
	when 290 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1718 "lib/parser/lexer.rl"
		begin
 @act = 93;		end
	when 69 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1838 "lib/parser/lexer.rl"
		begin
 @act = 105;		end
	when 392 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1946 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 304 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @act = 120;		end
	when 386 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1993 "lib/parser/lexer.rl"
		begin
 @act = 121;		end
	when 385 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1999 "lib/parser/lexer.rl"
		begin
 @act = 122;		end
	when 74 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2071 "lib/parser/lexer.rl"
		begin
 @act = 126;		end
	when 302 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1323 "lib/parser/lexer.rl"
		begin
 @act = 127;		end
	when 305 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2117 "lib/parser/lexer.rl"
		begin
 @act = 131;		end
	when 502 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2181 "lib/parser/lexer.rl"
		begin
 @act = 144;		end
	when 497 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2210 "lib/parser/lexer.rl"
		begin
 @act = 145;		end
	when 505 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2220 "lib/parser/lexer.rl"
		begin
 @act = 147;		end
	when 498 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2225 "lib/parser/lexer.rl"
		begin
 @act = 148;		end
	when 499 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2230 "lib/parser/lexer.rl"
		begin
 @act = 149;		end
	when 504 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @act = 150;		end
	when 496 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2245 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
	when 490 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2259 "lib/parser/lexer.rl"
		begin
 @act = 152;		end
	when 416 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @act = 153;		end
	when 449 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2317 "lib/parser/lexer.rl"
		begin
 @act = 156;		end
	when 81 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2332 "lib/parser/lexer.rl"
		begin
 @act = 157;		end
	when 419 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2360 "lib/parser/lexer.rl"
		begin
 @act = 159;		end
	when 410 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1323 "lib/parser/lexer.rl"
		begin
 @act = 163;		end
	when 421 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2382 "lib/parser/lexer.rl"
		begin
 @act = 164;		end
	when 414 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2408 "lib/parser/lexer.rl"
		begin
 @act = 166;		end
	when 420 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2414 "lib/parser/lexer.rl"
		begin
 @act = 167;		end
	when 87 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2505 "lib/parser/lexer.rl"
		begin
 @act = 180;		end
	when 509 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2544 "lib/parser/lexer.rl"
		begin
 @act = 184;		end
	when 182 then
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 953 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
# line 825 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 123 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 154 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 367 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 130 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 161 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 374 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 121 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 152 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 365 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 129 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 160 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 373 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 125 then
# line 747 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 156 then
# line 747 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 369 then
# line 747 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 128 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 159 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 372 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 135 then
# line 779 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 793 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 166 then
# line 779 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 793 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 379 then
# line 779 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 793 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 115 then
# line 825 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 819 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 147 then
# line 825 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 819 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 360 then
# line 825 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 819 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 61 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 220 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1423 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 235 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 247 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 269 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1618 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 807
		_goto_level = _again
		next
	end
  end
		end
	when 284 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 296 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1720 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 322 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2098 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 397 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2125 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 407 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2156 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 428 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 101 then
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2569 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 480 then
# line 2270 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 444 then
# line 2271 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 459 then
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 452 then
# line 2329 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 644 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 448 then
# line 2330 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 644 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 275 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 501 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1615 "lib/parser/lexer.rl"
		begin
 @act = 78;		end
	when 35 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1610 "lib/parser/lexer.rl"
		begin
 @act = 77;		end
	when 46 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1660 "lib/parser/lexer.rl"
		begin
 @act = 85;		end
	when 93 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2505 "lib/parser/lexer.rl"
		begin
 @act = 180;		end
	when 65 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1741 "lib/parser/lexer.rl"
		begin
 @act = 98;		end
	when 84 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2214 "lib/parser/lexer.rl"
		begin
 @act = 146;		end
	when 92 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2505 "lib/parser/lexer.rl"
		begin
 @act = 180;		end
	when 37 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1570 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1571 "lib/parser/lexer.rl"
		begin
 @act = 72;		end
	when 389 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1992 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2071 "lib/parser/lexer.rl"
		begin
 @act = 126;		end
	when 388 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1992 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1323 "lib/parser/lexer.rl"
		begin
 @act = 127;		end
	when 481 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2270 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @act = 153;		end
	when 126 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 157 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 370 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]

    if @version >= 30 && (codepoint == 117 || codepoint == 85) # 'u' or 'U'
      diagnostic :fatal, :invalid_escape
    end

    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 124 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 155 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 368 then
# line 723 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 131 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 162 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 375 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 127 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 158 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp? && @version < 31
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 371 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(p - 2, p).to_i(16)) 		end
# line 731 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 735 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 807; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 476 then
# line 2266 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 470 then
# line 2267 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 473 then
# line 2268 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 467 then
# line 2269 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 479 then
# line 2270 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 443 then
# line 2271 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2273 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 865 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1570 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1571 "lib/parser/lexer.rl"
		begin
 @act = 72;		end
	when 62 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1741 "lib/parser/lexer.rl"
		begin
 @act = 98;		end
	when 91 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1225 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1228 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2505 "lib/parser/lexer.rl"
		begin
 @act = 180;		end
	when 486 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2305 "lib/parser/lexer.rl"
		begin
 @act = 155;		end
	when 482 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2270 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2305 "lib/parser/lexer.rl"
		begin
 @act = 155;		end
	when 446 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2271 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2272 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2305 "lib/parser/lexer.rl"
		begin
 @act = 155;		end
# line 24463 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 95 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 24473 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 286 "lib/parser/lexer.rl"
    # %

    # Ragel creates a local variable called `testEof` but it doesn't use
    # it in any assignment. This dead code is here to swallow the warning.
    # It has no runtime cost because Ruby doesn't produce any instructions from it.
    if false
      testEof
    end

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == klass.lex_error
      [ false, [ '$error'.freeze, range(p - 1, p) ] ]
    else
      eof = @source_pts.size
      [ false, [ '$eof'.freeze,   range(eof, eof) ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  def encode_escape(ord)
    ord.chr.force_encoding(@source_buffer.source.encoding)
  end

  def tok(s = @ts, e = @te)
    @source_buffer.slice(s...e)
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND, 'do'.freeze)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK, 'do'.freeze)
    else
      emit(:kDO, 'do'.freeze)
    end
  end

  def arg_or_cmdarg(cmd_state)
    if cmd_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)
    next_state_for_literal(new_literal)
  end

  def next_state_for_literal(literal)
    if literal.words? && literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_backslash_delimited_words
      else
        self.class.lex_en_plain_backslash_delimited_words
      end
    elsif literal.words? && !literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    elsif !literal.words? && literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_backslash_delimited
      else
        self.class.lex_en_plain_backslash_delimited
      end
    else
      if literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    @dedent_level = old_literal.dedent_level

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    else
      self.class.lex_en_expr_end
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,    '&.'  => :tANDDOT,
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  
# line 2584 "lib/parser/lexer.rl"

  # %
end
